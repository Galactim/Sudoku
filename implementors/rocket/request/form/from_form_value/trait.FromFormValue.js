(function() {var implementors = {};
implementors["sudoku_backend"] = [{text:"impl&lt;'v&gt; <a class=\"trait\" href=\"rocket/request/form/from_form_value/trait.FromFormValue.html\" title=\"trait rocket::request::form::from_form_value::FromFormValue\">FromFormValue</a>&lt;'v&gt; for <a class=\"enum\" href=\"sudoku_backend/ops/enum.BoardDifficulty.html\" title=\"enum sudoku_backend::ops::BoardDifficulty\">BoardDifficulty</a>",synthetic:false,types:["sudoku_backend::ops::model::sudoku_difficulty::BoardDifficulty"]},{text:"impl&lt;'v&gt; <a class=\"trait\" href=\"rocket/request/form/from_form_value/trait.FromFormValue.html\" title=\"trait rocket::request::form::from_form_value::FromFormValue\">FromFormValue</a>&lt;'v&gt; for <a class=\"struct\" href=\"sudoku_backend/ops/constraints/struct.NonEmpty.html\" title=\"struct sudoku_backend::ops::constraints::NonEmpty\">NonEmpty</a>",synthetic:false,types:["sudoku_backend::ops::constraints::NonEmpty"]},{text:"impl&lt;'v, P:&nbsp;<a class=\"trait\" href=\"sudoku_backend/ops/constraints/trait.StringLength.html\" title=\"trait sudoku_backend::ops::constraints::StringLength\">StringLength</a>&gt; <a class=\"trait\" href=\"rocket/request/form/from_form_value/trait.FromFormValue.html\" title=\"trait rocket::request::form::from_form_value::FromFormValue\">FromFormValue</a>&lt;'v&gt; for <a class=\"struct\" href=\"sudoku_backend/ops/constraints/struct.HexString.html\" title=\"struct sudoku_backend::ops::constraints::HexString\">HexString</a>&lt;P&gt;",synthetic:false,types:["sudoku_backend::ops::constraints::HexString"]},{text:"impl&lt;'v, P:&nbsp;<a class=\"trait\" href=\"sudoku_backend/ops/constraints/trait.StringLength.html\" title=\"trait sudoku_backend::ops::constraints::StringLength\">StringLength</a>&gt; <a class=\"trait\" href=\"rocket/request/form/from_form_value/trait.FromFormValue.html\" title=\"trait rocket::request::form::from_form_value::FromFormValue\">FromFormValue</a>&lt;'v&gt; for <a class=\"struct\" href=\"sudoku_backend/ops/constraints/struct.SudokuString.html\" title=\"struct sudoku_backend::ops::constraints::SudokuString\">SudokuString</a>&lt;P&gt;",synthetic:false,types:["sudoku_backend::ops::constraints::SudokuString"]},{text:"impl&lt;'v&gt; <a class=\"trait\" href=\"rocket/request/form/from_form_value/trait.FromFormValue.html\" title=\"trait rocket::request::form::from_form_value::FromFormValue\">FromFormValue</a>&lt;'v&gt; for <a class=\"struct\" href=\"sudoku_backend/ops/constraints/struct.EMail.html\" title=\"struct sudoku_backend::ops::constraints::EMail\">EMail</a>",synthetic:false,types:["sudoku_backend::ops::constraints::EMail"]},{text:"impl&lt;'v, T:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/str/trait.FromStr.html\" title=\"trait core::str::FromStr\">FromStr</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&gt; <a class=\"trait\" href=\"rocket/request/form/from_form_value/trait.FromFormValue.html\" title=\"trait rocket::request::form::from_form_value::FromFormValue\">FromFormValue</a>&lt;'v&gt; for <a class=\"struct\" href=\"sudoku_backend/ops/constraints/struct.Positive.html\" title=\"struct sudoku_backend::ops::constraints::Positive\">Positive</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/str/trait.FromStr.html\" title=\"trait core::str::FromStr\">FromStr</a>&gt;::<a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/str/trait.FromStr.html#associatedtype.Err\" title=\"type core::str::FromStr::Err\">Err</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/alloc/string/trait.ToString.html\" title=\"trait alloc::string::ToString\">ToString</a>,&nbsp;</span>",synthetic:false,types:["sudoku_backend::ops::constraints::Positive"]},];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        
})()
