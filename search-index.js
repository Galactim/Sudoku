var N = null;var searchIndex = {};
searchIndex["ansi_term"]={"doc":"This is a library for controlling colours and formatting, such as red bold text or blue underlined text, on ANSI terminals.","items":[[3,"Prefix","ansi_term","Like `ANSIString`, but only displays the style prefix.",N,N],[3,"Infix","","Like `ANSIString`, but only displays the difference between two styles.",N,N],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",N,N],[3,"Style","","A style is a collection of properties that can format a string using ANSI escape codes.",N,N],[12,"foreground","","The style's foreground colour, if it has one.",0,N],[12,"background","","The style's background colour, if it has one.",0,N],[12,"is_bold","","Whether this style is bold.",0,N],[12,"is_dimmed","","Whether this style is dimmed.",0,N],[12,"is_italic","","Whether this style is italic.",0,N],[12,"is_underline","","Whether this style is underlined.",0,N],[12,"is_blink","","Whether this style is blinking.",0,N],[12,"is_reverse","","Whether this style has reverse colours.",0,N],[12,"is_hidden","","Whether this style is hidden.",0,N],[12,"is_strikethrough","","Whether this style is struckthrough.",0,N],[3,"ANSIGenericString","","An `ANSIGenericString` includes a generic string type and a `Style` to display that string.  `ANSIString` and `ANSIByteString` are aliases for this type on `str` and `[u8]`, respectively.",N,N],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be written with a minimum of control characters.",N,N],[12,"0","","",1,N],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",N,N],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,N],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,N],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,N],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,N],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,N],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,N],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,N],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,N],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,N],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,N],[4,"Color","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",N,N],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,N],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,N],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,N],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,N],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,N],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,N],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,N],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,N],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,N],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,N],[5,"ANSIStrings","","A function to construct an `ANSIStrings` instance.",N,N],[5,"ANSIByteStrings","","A function to construct an `ANSIByteStrings` instance.",N,N],[11,"clone","","",3,[[["self"]],["prefix"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["infix"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["suffix"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"prefix","","The prefix for this style.",0,[[["self"]],["prefix"]]],[11,"infix","","The infix between this style and another.",0,[[["self"],["style"]],["infix"]]],[11,"suffix","","The suffix for this style.",0,[[["self"]],["suffix"]]],[11,"prefix","","The prefix for this colour.",2,[[["self"]],["prefix"]]],[11,"infix","","The infix between this colour and another.",2,[[["self"],["colour"]],["infix"]]],[11,"suffix","","The suffix for this colour.",2,[[["self"]],["suffix"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["style"]],["bool"]]],[11,"ne","","",0,[[["self"],["style"]],["bool"]]],[11,"clone","","",0,[[["self"]],["style"]]],[11,"new","","Creates a new Style with no differences.",0,[[],["style"]]],[11,"bold","","Returns a `Style` with the bold property set.",0,[[["self"]],["style"]]],[11,"dimmed","","Returns a `Style` with the dimmed property set.",0,[[["self"]],["style"]]],[11,"italic","","Returns a `Style` with the italic property set.",0,[[["self"]],["style"]]],[11,"underline","","Returns a `Style` with the underline property set.",0,[[["self"]],["style"]]],[11,"blink","","Returns a `Style` with the blink property set.",0,[[["self"]],["style"]]],[11,"reverse","","Returns a `Style` with the reverse property set.",0,[[["self"]],["style"]]],[11,"hidden","","Returns a `Style` with the hidden property set.",0,[[["self"]],["style"]]],[11,"strikethrough","","Returns a `Style` with the hidden property set.",0,[[["self"]],["style"]]],[11,"fg","","Returns a `Style` with the foreground colour property set.",0,[[["self"],["colour"]],["style"]]],[11,"on","","Returns a `Style` with the background colour property set.",0,[[["self"],["colour"]],["style"]]],[11,"is_plain","","Return true if this `Style` has no actual styles, and can be written without any control characters.",0,[[["self"]],["bool"]]],[11,"default","","Returns a style with no properties set. Formatting text using this style returns the exact same text.",0,[[],["style"]]],[11,"eq","","",2,[[["self"],["colour"]],["bool"]]],[11,"ne","","",2,[[["self"],["colour"]],["bool"]]],[11,"clone","","",2,[[["self"]],["colour"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"normal","","Return a `Style` with the foreground colour set to this colour.",2,[[["self"]],["style"]]],[11,"bold","","Returns a `Style` with the bold property set.",2,[[["self"]],["style"]]],[11,"dimmed","","Returns a `Style` with the dimmed property set.",2,[[["self"]],["style"]]],[11,"italic","","Returns a `Style` with the italic property set.",2,[[["self"]],["style"]]],[11,"underline","","Returns a `Style` with the underline property set.",2,[[["self"]],["style"]]],[11,"blink","","Returns a `Style` with the blink property set.",2,[[["self"]],["style"]]],[11,"reverse","","Returns a `Style` with the reverse property set.",2,[[["self"]],["style"]]],[11,"hidden","","Returns a `Style` with the hidden property set.",2,[[["self"]],["style"]]],[11,"strikethrough","","Returns a `Style` with the strikethrough property set.",2,[[["self"]],["style"]]],[11,"on","","Returns a `Style` with the background colour property set.",2,[[["self"],["colour"]],["style"]]],[11,"from","","You can turn a `Colour` into a `Style` with the foreground colour set with the `From` trait.",0,[[["colour"]],["style"]]],[11,"eq","","",6,[[["self"],["ansigenericstring"]],["bool"]]],[11,"ne","","",6,[[["self"],["ansigenericstring"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["ansigenericstring"]]],[11,"from","","",6,[[["i"]],["ansigenericstring"]]],[11,"deref","","",6,[[["self"]],["s"]]],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",0,[[["self"],["i"]],["ansigenericstring"]]],[11,"paint","","Paints the given text with this colour, returning an ANSI string. This is a short-cut so you don’t have to use `Blue.normal()` just to get blue text.",2,[[["self"],["i"]],["ansigenericstring"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[6,"ANSIString","","An ANSI String is a string coupled with the `Style` to display it in a terminal.",N,N],[6,"ANSIByteString","","An `ANSIByteString` represents a formatted series of bytes.  Use `ANSIByteString` when styling text with an unknown encoding.",N,N],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",N,N],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be written with a minimum of control characters.",N,N],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"write_to","","Write an `ANSIByteString` to an `io::Write`.  This writes the escape sequences for the associated `Style` around the bytes.",8,[[["self"],["w"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"write_to","","Write `ANSIByteStrings` to an `io::Write`.  This writes the minimal escape sequences for the associated `Style`s around each set of bytes.",10,[[["self"],["w"]],["result"]]]],"paths":[[3,"Style"],[3,"ANSIGenericStrings"],[4,"Colour"],[3,"Prefix"],[3,"Infix"],[3,"Suffix"],[3,"ANSIGenericString"],[6,"ANSIString"],[6,"ANSIByteString"],[6,"ANSIStrings"],[6,"ANSIByteStrings"]]};
searchIndex["antidote"]={"doc":"Mutex and RwLock types that do not poison themselves.","items":[[3,"WaitTimeoutResult","antidote","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",N,N],[3,"Mutex","","Like `std::sync::Mutex` except that it does not poison itself.",N,N],[3,"MutexGuard","","Like `std::sync::MutexGuard`.",N,N],[3,"Condvar","","Like `std::sync::Condvar`.",N,N],[3,"TryLockError","","Like `std::sync::TryLockError`.",N,N],[3,"RwLock","","Like `std::sync::RwLock` except that it does not poison itself.",N,N],[3,"RwLockReadGuard","","Like `std::sync::RwLockReadGuard`.",N,N],[3,"RwLockWriteGuard","","Like `std::sync::RwLockWriteGuard`.",N,N],[6,"TryLockResult","","Like `std::sync::TryLockResult`.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Like `std::sync::Mutex::new`.",0,[[["t"]],["mutex"]]],[11,"into_inner","","Like `std::sync::Mutex::into_inner`.",0,[[["self"]],["t"]]],[11,"lock","","Like `std::sync::Mutex::lock`.",0,[[["self"]],["mutexguard"]]],[11,"try_lock","","Like `std::sync::Mutex::try_lock`.",0,[[["self"]],["trylockresult",["mutexguard"]]]],[11,"get_mut","","Like `std::sync::Mutex::get_mut`.",0,[[["self"]],["t"]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"deref_mut","","",1,[[["self"]],["t"]]],[11,"new","","Like `std::sync::Condvar::new`.",2,[[],["condvar"]]],[11,"wait","","Like `std::sync::Condvar::wait`.",2,[[["self"],["mutexguard"]],["mutexguard"]]],[11,"wait_timeout","","Like `std::sync::Condvar::wait_timeout`.",2,N],[11,"notify_one","","Like `std::sync::Condvar::notify_one`.",2,[[["self"]]]],[11,"notify_all","","Like `std::sync::Condvar::notify_all`.",2,[[["self"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Like `std::sync::RwLock::new`.",4,[[["t"]],["rwlock"]]],[11,"into_inner","","Like `std::sync::RwLock::into_inner`.",4,[[["self"]],["t"]]],[11,"read","","Like `std::sync::RwLock::read`.",4,[[["self"]],["rwlockreadguard"]]],[11,"try_read","","Like `std::sync::RwLock::try_read`.",4,[[["self"]],["trylockresult",["rwlockreadguard"]]]],[11,"write","","Like `std::sync::RwLock::write`.",4,[[["self"]],["rwlockwriteguard"]]],[11,"try_write","","Like `std::sync::RwLock::try_write`.",4,[[["self"]],["trylockresult",["rwlockwriteguard"]]]],[11,"get_mut","","Like `std::sync::RwLock::get_mut`.",4,[[["self"]],["t"]]],[11,"deref","","",5,[[["self"]],["t"]]],[11,"deref","","",6,[[["self"]],["t"]]],[11,"deref_mut","","",6,[[["self"]],["t"]]],[11,"timed_out","","Returns whether the wait was known to have timed out.",7,[[["self"]],["bool"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"clone","","",7,[[["self"]],["waittimeoutresult"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",7,[[["self"],["waittimeoutresult"]],["bool"]]],[11,"ne","","",7,[[["self"],["waittimeoutresult"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]]],"paths":[[3,"Mutex"],[3,"MutexGuard"],[3,"Condvar"],[3,"TryLockError"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"WaitTimeoutResult"]]};
searchIndex["atty"]={"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",N,N],[13,"Stdout","","",0,N],[13,"Stderr","","",0,N],[13,"Stdin","","",0,N],[5,"is","","returns true if this is a tty",N,[[["stream"]],["bool"]]],[5,"isnt","","returns true if this is not a tty",N,[[["stream"]],["bool"]]],[11,"clone","","",0,[[["self"]],["stream"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N]],"paths":[[4,"Stream"]]};
searchIndex["base64"]={"doc":"Configs","items":[[3,"Config","base64","Contains configuration parameters for base64 encoding",N,N],[4,"DecodeError","","Errors that can occur while decoding.",N,N],[13,"InvalidByte","","An invalid byte was found in the input. The offset and offending byte are provided.",0,N],[13,"InvalidLength","","The length of the input is invalid.",0,N],[4,"CharacterSet","","Available encoding character sets",N,N],[13,"Standard","","The standard character set (uses `+` and `/`)",1,N],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,N],[13,"Crypt","","The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`)",1,N],[4,"LineEnding","","Line ending used in optional line wrapping.",N,N],[13,"LF","","Unix-style \\n",2,N],[13,"CRLF","","Windows-style \\r\\n",2,N],[4,"LineWrap","","Line wrap configuration.",N,N],[13,"NoWrap","","Don't wrap.",3,N],[13,"Wrap","","Wrap lines with the specified length and line ending. The length must be > 0.",3,N],[5,"encode","","Encode arbitrary octets as base64. Returns a String. Convenience for `encode_config(input, base64::STANDARD);`.",N,[[["t"]],["string"]]],[5,"encode_config","","Encode arbitrary octets as base64. Returns a String.",N,[[["t"],["config"]],["string"]]],[5,"encode_config_buf","","Encode arbitrary octets as base64. Writes into the supplied output buffer, which will grow the buffer if needed.",N,[[["t"],["config"],["string"]]]],[5,"encode_config_slice","","Encode arbitrary octets as base64. Writes into the supplied output buffer.",N,N],[5,"decode","","Decode from string reference as octets. Returns a Result containing a Vec. Convenience `decode_config(input, base64::STANDARD);`.",N,[[["t"]],["result",["vec","decodeerror"]]]],[5,"decode_config","","Decode from string reference as octets. Returns a Result containing a Vec.",N,[[["t"],["config"]],["result",["vec","decodeerror"]]]],[5,"decode_config_buf","","Decode from string reference as octets. Writes into the supplied buffer to avoid allocation. Returns a Result containing an empty tuple, aka ().",N,[[["t"],["config"],["vec"]],["result",["decodeerror"]]]],[5,"decode_config_slice","","Decode the input into the provided output slice.",N,N],[0,"display","","Enables base64'd output anywhere you might use a `Display` implementation, like a format string.",N,N],[3,"Base64Display","base64::display","A convenience wrapper for base64'ing bytes into a format string without heap allocation.",N,N],[4,"DisplayError","","Errors that can occur initializing a Base64Display.",N,N],[13,"InvalidLineLength","","If wrapping is configured, the line length must be a multiple of 4, and must not be absurdly large (currently capped at 1024, subject to change).",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["displayerror"]],["bool"]]],[11,"with_config","","Create a `Base64Display` with the provided config.",5,N],[11,"standard","","Convenience method for creating a `Base64Display` with the `STANDARD` configuration.",5,N],[11,"url_safe","","Convenience method for creating a `Base64Display` with the `URL_SAFE` configuration.",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","base64","",0,[[["self"]],["decodeerror"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["decodeerror"]],["bool"]]],[11,"ne","","",0,[[["self"],["decodeerror"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[17,"STANDARD","","Standard character set with padding.",N,N],[17,"STANDARD_NO_PAD","","Standard character set without padding.",N,N],[17,"MIME","","As per standards for MIME encoded messages",N,N],[17,"URL_SAFE","","URL-safe character set with padding",N,N],[17,"URL_SAFE_NO_PAD","","URL-safe character set without padding",N,N],[17,"CRYPT","","As per `crypt(3)` requirements",N,N],[11,"clone","","",1,[[["self"]],["characterset"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["lineending"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["linewrap"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["config"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Config`.",6,[[["characterset"],["bool"],["bool"],["linewrap"]],["config"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","base64::display","",5,[[["self"]],["string"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]]],"paths":[[4,"DecodeError"],[4,"CharacterSet"],[4,"LineEnding"],[4,"LineWrap"],[4,"DisplayError"],[3,"Base64Display"],[3,"Config"]]};
searchIndex["bitflags"]={"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",N,N]],"paths":[]};
searchIndex["byteorder"]={"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[6,"BE","","A type alias for [`BigEndian`].",N,N],[6,"LE","","A type alias for [`LittleEndian`].",N,N],[6,"NetworkEndian","","Defines network byte order serialization.",N,N],[6,"NativeEndian","","Defines system native-endian serialization.",N,N],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",N,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",N,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,N],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,N],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",2,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,N],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,N],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.",2,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,N],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,N],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",2,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,N],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,N],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",2,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,N],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,N],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,N],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,N],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,N],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,N],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,N],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,N],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,N],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,N],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,N],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,N],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,N],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,N],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,N],[11,"clone","","",3,[[["self"]],["bigendian"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"cmp","","",3,[[["self"],["bigendian"]],["ordering"]]],[11,"eq","","",3,[[["self"],["bigendian"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["bigendian"]],["option",["ordering"]]]],[11,"default","","",3,[[],["bigendian"]]],[11,"clone","","",4,[[["self"]],["littleendian"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",4,N],[11,"cmp","","",4,[[["self"],["littleendian"]],["ordering"]]],[11,"eq","","",4,[[["self"],["littleendian"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["littleendian"]],["option",["ordering"]]]],[11,"default","","",4,[[],["littleendian"]]],[11,"read_u16","","",3,N],[11,"read_u32","","",3,N],[11,"read_u64","","",3,N],[11,"read_uint","","",3,N],[11,"write_u16","","",3,N],[11,"write_u32","","",3,N],[11,"write_u64","","",3,N],[11,"write_uint","","",3,N],[11,"read_u16_into","","",3,N],[11,"read_u32_into","","",3,N],[11,"read_u64_into","","",3,N],[11,"write_u16_into","","",3,N],[11,"write_u32_into","","",3,N],[11,"write_u64_into","","",3,N],[11,"from_slice_u16","","",3,N],[11,"from_slice_u32","","",3,N],[11,"from_slice_u64","","",3,N],[11,"from_slice_f32","","",3,N],[11,"from_slice_f64","","",3,N],[11,"read_u16","","",4,N],[11,"read_u32","","",4,N],[11,"read_u64","","",4,N],[11,"read_uint","","",4,N],[11,"write_u16","","",4,N],[11,"write_u32","","",4,N],[11,"write_u64","","",4,N],[11,"write_uint","","",4,N],[11,"read_u16_into","","",4,N],[11,"read_u32_into","","",4,N],[11,"read_u64_into","","",4,N],[11,"write_u16_into","","",4,N],[11,"write_u32_into","","",4,N],[11,"write_u64_into","","",4,N],[11,"from_slice_u16","","",4,N],[11,"from_slice_u32","","",4,N],[11,"from_slice_u64","","",4,N],[11,"from_slice_f32","","",4,N],[11,"from_slice_f64","","",4,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["chrono"]={"doc":"Chrono: Date and Time for Rust","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",N,N],[3,"Date","","ISO 8601 calendar date with time zone.",N,N],[3,"DateTime","","ISO 8601 combined date and time with time zone.",N,N],[3,"ParseWeekdayError","","An error resulting from reading `Weekday` value with `FromStr`.",N,N],[4,"SecondsFormat","","Specific formatting options for seconds. This may be extended in the future, so exhaustive matching in external code is not recommended.",N,N],[13,"Secs","","Format whole seconds only, with no decimal point nor subseconds.",0,N],[13,"Millis","","Use fixed 3 subsecond digits. This corresponds to Fixed::Nanosecond3.",0,N],[13,"Micros","","Use fixed 6 subsecond digits. This corresponds to Fixed::Nanosecond6.",0,N],[13,"Nanos","","Use fixed 9 subsecond digits. This corresponds to Fixed::Nanosecond9.",0,N],[13,"AutoSi","","Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to display all available non-zero sub-second digits.  This corresponds to Fixed::Nanosecond.",0,N],[4,"Weekday","","The day of week.",N,N],[13,"Mon","","Monday.",1,N],[13,"Tue","","Tuesday.",1,N],[13,"Wed","","Wednesday.",1,N],[13,"Thu","","Thursday.",1,N],[13,"Fri","","Friday.",1,N],[13,"Sat","","Saturday.",1,N],[13,"Sun","","Sunday.",1,N],[0,"prelude","","A convenience module appropriate for glob imports (`use chrono::prelude::*;`).",N,N],[0,"offset","","The time zone, which calculates offsets from the local time to UTC.",N,N],[3,"Utc","chrono::offset","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",N,N],[3,"FixedOffset","","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",N,N],[3,"Local","","The local timescale. This is implemented via the standard `time` crate.",N,N],[4,"LocalResult","","The conversion result from the local time to the timezone-aware datetime types.",N,N],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",2,N],[13,"Single","","Given local time representation has a single unique result.",2,N],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",2,N],[11,"clone","","",3,[[["self"]],["utc"]]],[11,"eq","","",3,[[["self"],["utc"]],["bool"]]],[11,"today","","Returns a `Date` which corresponds to the current date.",3,[[],["date",["utc"]]]],[11,"now","","Returns a `DateTime` which corresponds to the current date.",3,[[],["datetime",["utc"]]]],[11,"from_offset","","",3,[[["utc"]],["utc"]]],[11,"offset_from_local_date","","",3,[[["self"],["naivedate"]],["localresult",["utc"]]]],[11,"offset_from_local_datetime","","",3,[[["self"],["naivedatetime"]],["localresult",["utc"]]]],[11,"offset_from_utc_date","","",3,[[["self"],["naivedate"]],["utc"]]],[11,"offset_from_utc_datetime","","",3,[[["self"],["naivedatetime"]],["utc"]]],[11,"fix","","",3,[[["self"]],["fixedoffset"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["fixedoffset"]],["bool"]]],[11,"ne","","",4,[[["self"],["fixedoffset"]],["bool"]]],[11,"hash","","",4,N],[11,"clone","","",4,[[["self"]],["fixedoffset"]]],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",4,[[["i32"]],["fixedoffset"]]],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",4,[[["i32"]],["option",["fixedoffset"]]]],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",4,[[["i32"]],["fixedoffset"]]],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",4,[[["i32"]],["option",["fixedoffset"]]]],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC to the local time.",4,[[["self"]],["i32"]]],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the local time to UTC.",4,[[["self"]],["i32"]]],[11,"from_offset","","",4,[[["fixedoffset"]],["fixedoffset"]]],[11,"offset_from_local_date","","",4,[[["self"],["naivedate"]],["localresult",["fixedoffset"]]]],[11,"offset_from_local_datetime","","",4,[[["self"],["naivedatetime"]],["localresult",["fixedoffset"]]]],[11,"offset_from_utc_date","","",4,[[["self"],["naivedate"]],["fixedoffset"]]],[11,"offset_from_utc_datetime","","",4,[[["self"],["naivedatetime"]],["fixedoffset"]]],[11,"fix","","",4,[[["self"]],["fixedoffset"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"add","chrono","",5,[[["self"],["fixedoffset"]],["datetime"]]],[11,"sub","","",5,[[["self"],["fixedoffset"]],["datetime"]]],[11,"clone","chrono::offset","",6,[[["self"]],["local"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"today","","Returns a `Date` which corresponds to the current date.",6,[[],["date",["local"]]]],[11,"now","","Returns a `DateTime` which corresponds to the current date.",6,[[],["datetime",["local"]]]],[11,"from_offset","","",6,[[["fixedoffset"]],["local"]]],[11,"offset_from_local_date","","",6,[[["self"],["naivedate"]],["localresult",["fixedoffset"]]]],[11,"offset_from_local_datetime","","",6,[[["self"],["naivedatetime"]],["localresult",["fixedoffset"]]]],[11,"offset_from_utc_date","","",6,[[["self"],["naivedate"]],["fixedoffset"]]],[11,"offset_from_utc_datetime","","",6,[[["self"],["naivedatetime"]],["fixedoffset"]]],[11,"from_local_date","","",6,[[["self"],["naivedate"]],["localresult",["date"]]]],[11,"from_local_datetime","","",6,[[["self"],["naivedatetime"]],["localresult",["datetime"]]]],[11,"from_utc_date","","",6,[[["self"],["naivedate"]],["date",["local"]]]],[11,"from_utc_datetime","","",6,[[["self"],["naivedatetime"]],["datetime",["local"]]]],[8,"Offset","","The offset from the local time to UTC.",N,N],[10,"fix","","Returns the fixed offset from UTC to the local time stored.",7,[[["self"]],["fixedoffset"]]],[8,"TimeZone","","The time zone.",N,N],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",8,N],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,[[["self"],["i32"],["u32"],["u32"]],["date"]]],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,[[["self"],["i32"],["u32"],["u32"]],["localresult",["date"]]]],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,[[["self"],["i32"],["u32"]],["date"]]],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,[[["self"],["i32"],["u32"]],["localresult",["date"]]]],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",8,[[["self"],["i32"],["u32"],["weekday"]],["date"]]],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",8,[[["self"],["i32"],["u32"],["weekday"]],["localresult",["date"]]]],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",8,[[["self"],["i64"],["u32"]],["datetime"]]],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",8,[[["self"],["i64"],["u32"]],["localresult",["datetime"]]]],[11,"timestamp_millis","","Makes a new `DateTime` from the number of non-leap milliseconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",8,[[["self"],["i64"]],["datetime"]]],[11,"timestamp_millis_opt","","Makes a new `DateTime` from the number of non-leap milliseconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",8,[[["self"],["i64"]],["localresult",["datetime"]]]],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",8,[[["self"],["str"],["str"]],["parseresult",["datetime"]]]],[10,"from_offset","","Reconstructs the time zone from the offset.",8,N],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",8,[[["self"],["naivedate"]],["localresult"]]],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",8,[[["self"],["naivedatetime"]],["localresult"]]],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",8,[[["self"],["naivedate"]],["localresult",["date"]]]],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",8,[[["self"],["naivedatetime"]],["localresult",["datetime"]]]],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",8,N],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",8,N],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",8,[[["self"],["naivedate"]],["date"]]],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",8,[[["self"],["naivedatetime"]],["datetime"]]],[11,"clone","","",2,[[["self"]],["localresult"]]],[11,"eq","","",2,[[["self"],["localresult"]],["bool"]]],[11,"ne","","",2,[[["self"],["localresult"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",2,[[["self"]],["option"]]],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",2,[[["self"]],["option"]]],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",2,[[["self"]],["option"]]],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",2,[[["self"],["f"]],["localresult"]]],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",2,[[["self"],["naivetime"]],["localresult",["datetime"]]]],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",2,[[["self"]],["t"]]],[0,"naive","chrono","Date and time types which do not concern about the timezones.",N,N],[3,"NaiveDate","chrono::naive","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",N,N],[3,"IsoWeek","","ISO 8601 week.",N,N],[3,"NaiveTime","","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",N,N],[3,"NaiveDateTime","","ISO 8601 combined date and time without timezone.",N,N],[11,"serialize","","",9,[[["self"],["s"]],["result"]]],[11,"deserialize","","",9,[[["d"]],["result"]]],[11,"eq","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"ne","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"hash","","",9,N],[11,"partial_cmp","","",9,[[["self"],["naivedate"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"le","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"gt","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"ge","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"cmp","","",9,[[["self"],["naivedate"]],["ordering"]]],[11,"clone","","",9,[[["self"]],["naivedate"]]],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",9,[[["i32"],["u32"],["u32"]],["naivedate"]]],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",9,[[["i32"],["u32"],["u32"]],["option",["naivedate"]]]],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",9,[[["i32"],["u32"]],["naivedate"]]],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",9,[[["i32"],["u32"]],["option",["naivedate"]]]],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",9,[[["i32"],["u32"],["weekday"]],["naivedate"]]],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",9,[[["i32"],["u32"],["weekday"]],["option",["naivedate"]]]],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",9,[[["i32"]],["naivedate"]]],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",9,[[["i32"]],["option",["naivedate"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",9,[[["str"],["str"]],["parseresult",["naivedate"]]]],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",9,[[["self"],["naivetime"]],["naivedatetime"]]],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",9,[[["self"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",9,[[["self"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",9,[[["self"]],["naivedate"]]],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",9,[[["self"]],["option",["naivedate"]]]],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",9,[[["self"]],["naivedate"]]],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",9,[[["self"]],["option",["naivedate"]]]],[11,"checked_add_signed","","Adds the `days` part of given `Duration` to the current date.",9,[[["self"],["oldduration"]],["option",["naivedate"]]]],[11,"checked_sub_signed","","Subtracts the `days` part of given `Duration` from the current date.",9,[[["self"],["oldduration"]],["option",["naivedate"]]]],[11,"signed_duration_since","","Subtracts another `NaiveDate` from the current date. Returns a `Duration` of integral numbers.",9,[[["self"],["naivedate"]],["oldduration"]]],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",9,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",9,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"year","","Returns the year number in the calendar date.",9,[[["self"]],["i32"]]],[11,"month","","Returns the month number starting from 1.",9,[[["self"]],["u32"]]],[11,"month0","","Returns the month number starting from 0.",9,[[["self"]],["u32"]]],[11,"day","","Returns the day of month starting from 1.",9,[[["self"]],["u32"]]],[11,"day0","","Returns the day of month starting from 0.",9,[[["self"]],["u32"]]],[11,"ordinal","","Returns the day of year starting from 1.",9,[[["self"]],["u32"]]],[11,"ordinal0","","Returns the day of year starting from 0.",9,[[["self"]],["u32"]]],[11,"weekday","","Returns the day of week.",9,[[["self"]],["weekday"]]],[11,"iso_week","","",9,[[["self"]],["isoweek"]]],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",9,[[["self"],["i32"]],["option",["naivedate"]]]],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"add","","",9,[[["self"],["oldduration"]],["naivedate"]]],[11,"add_assign","","",9,[[["self"],["oldduration"]]]],[11,"sub","","",9,[[["self"],["oldduration"]],["naivedate"]]],[11,"sub_assign","","",9,[[["self"],["oldduration"]]]],[11,"sub","","",9,[[["self"],["naivedate"]],["oldduration"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",9,[[["str"]],["parseresult",["naivedate"]]]],[11,"eq","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"ne","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["isoweek"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"le","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"gt","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"ge","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"cmp","","",10,[[["self"],["isoweek"]],["ordering"]]],[11,"clone","","",10,[[["self"]],["isoweek"]]],[11,"year","","Returns the year number for this ISO week.",10,[[["self"]],["i32"]]],[11,"week","","Returns the ISO week number starting from 1.",10,[[["self"]],["u32"]]],[11,"week0","","Returns the ISO week number starting from 0.",10,[[["self"]],["u32"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",11,[[["self"],["s"]],["result"]]],[11,"deserialize","","",11,[[["d"]],["result"]]],[11,"eq","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"ne","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["naivetime"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"le","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"gt","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"ge","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"cmp","","",11,[[["self"],["naivetime"]],["ordering"]]],[11,"clone","","",11,[[["self"]],["naivetime"]]],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",11,[[["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",11,[[["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",11,[[["u32"],["u32"]],["naivetime"]]],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",11,[[["u32"],["u32"]],["option",["naivetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",11,[[["str"],["str"]],["parseresult",["naivetime"]]]],[11,"overflowing_add_signed","","Adds given `Duration` to the current time, and also returns the number of seconds in the integral number of days ignored from the addition. (We cannot return `Duration` because it is subject to overflow or underflow.)",11,N],[11,"overflowing_sub_signed","","Subtracts given `Duration` from the current time, and also returns the number of seconds in the integral number of days ignored from the subtraction. (We cannot return `Duration` because it is subject to overflow or underflow.)",11,N],[11,"signed_duration_since","","Subtracts another `NaiveTime` from the current time. Returns a `Duration` within +/- 1 day. This does not overflow or underflow at all.",11,[[["self"],["naivetime"]],["oldduration"]]],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",11,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"hour","","Returns the hour number from 0 to 23.",11,[[["self"]],["u32"]]],[11,"minute","","Returns the minute number from 0 to 59.",11,[[["self"]],["u32"]]],[11,"second","","Returns the second number from 0 to 59.",11,[[["self"]],["u32"]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",11,[[["self"]],["u32"]]],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",11,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",11,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",11,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",11,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",11,[[["self"]],["u32"]]],[11,"hash","","",11,[[["self"],["h"]]]],[11,"add","","",11,[[["self"],["oldduration"]],["naivetime"]]],[11,"add_assign","","",11,[[["self"],["oldduration"]]]],[11,"sub","","",11,[[["self"],["oldduration"]],["naivetime"]]],[11,"sub_assign","","",11,[[["self"],["oldduration"]]]],[11,"sub","","",11,[[["self"],["naivetime"]],["oldduration"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",11,[[["str"]],["parseresult",["naivetime"]]]],[11,"serialize","","",12,[[["self"],["s"]],["result"]]],[11,"deserialize","","",12,[[["d"]],["result"]]],[11,"eq","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"ne","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["naivedatetime"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"le","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"gt","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"ge","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"cmp","","",12,[[["self"],["naivedatetime"]],["ordering"]]],[11,"clone","","",12,[[["self"]],["naivedatetime"]]],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",12,[[["naivedate"],["naivetime"]],["naivedatetime"]]],[11,"from_timestamp","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",12,[[["i64"],["u32"]],["naivedatetime"]]],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",12,[[["i64"],["u32"]],["option",["naivedatetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",12,[[["str"],["str"]],["parseresult",["naivedatetime"]]]],[11,"date","","Retrieves a date component.",12,[[["self"]],["naivedate"]]],[11,"time","","Retrieves a time component.",12,[[["self"]],["naivetime"]]],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",12,[[["self"]],["i64"]]],[11,"timestamp_millis","","Returns the number of non-leap milliseconds since midnight on January 1, 1970.",12,[[["self"]],["i64"]]],[11,"timestamp_nanos","","Returns the number of non-leap nanoseconds since midnight on January 1, 1970.",12,[[["self"]],["i64"]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",12,[[["self"]],["u32"]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",12,[[["self"]],["u32"]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",12,[[["self"]],["u32"]]],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",12,[[["self"],["oldduration"]],["option",["naivedatetime"]]]],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",12,[[["self"],["oldduration"]],["option",["naivedatetime"]]]],[11,"signed_duration_since","","Subtracts another `NaiveDateTime` from the current date and time. This does not overflow or underflow at all.",12,[[["self"],["naivedatetime"]],["oldduration"]]],[11,"format_with_items","","Formats the combined date and time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",12,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",12,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"year","","Returns the year number in the calendar date.",12,[[["self"]],["i32"]]],[11,"month","","Returns the month number starting from 1.",12,[[["self"]],["u32"]]],[11,"month0","","Returns the month number starting from 0.",12,[[["self"]],["u32"]]],[11,"day","","Returns the day of month starting from 1.",12,[[["self"]],["u32"]]],[11,"day0","","Returns the day of month starting from 0.",12,[[["self"]],["u32"]]],[11,"ordinal","","Returns the day of year starting from 1.",12,[[["self"]],["u32"]]],[11,"ordinal0","","Returns the day of year starting from 0.",12,[[["self"]],["u32"]]],[11,"weekday","","Returns the day of week.",12,[[["self"]],["weekday"]]],[11,"iso_week","","",12,[[["self"]],["isoweek"]]],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",12,[[["self"],["i32"]],["option",["naivedatetime"]]]],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"hour","","Returns the hour number from 0 to 23.",12,[[["self"]],["u32"]]],[11,"minute","","Returns the minute number from 0 to 59.",12,[[["self"]],["u32"]]],[11,"second","","Returns the second number from 0 to 59.",12,[[["self"]],["u32"]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",12,[[["self"]],["u32"]]],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"hash","","",12,[[["self"],["h"]]]],[11,"add","","",12,[[["self"],["oldduration"]],["naivedatetime"]]],[11,"add_assign","","",12,[[["self"],["oldduration"]]]],[11,"sub","","",12,[[["self"],["oldduration"]],["naivedatetime"]]],[11,"sub_assign","","",12,[[["self"],["oldduration"]]]],[11,"sub","","",12,[[["self"],["naivedatetime"]],["oldduration"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",12,[[["str"]],["parseresult",["naivedatetime"]]]],[0,"serde","","Serialization/Deserialization of naive types in alternate formats",N,N],[0,"ts_nanoseconds","chrono::naive::serde","Used to serialize/deserialize from nanosecond-precision timestamps",N,N],[5,"serialize","chrono::naive::serde::ts_nanoseconds","Serialize a UTC datetime into an integer number of nanoseconds since the epoch",N,[[["naivedatetime"],["s"]],["result"]]],[5,"deserialize","","Deserialize a `DateTime` from a nanoseconds timestamp",N,[[["d"]],["result",["naivedatetime"]]]],[0,"ts_milliseconds","chrono::naive::serde","Used to serialize/deserialize from millisecond-precision timestamps",N,N],[5,"serialize","chrono::naive::serde::ts_milliseconds","Serialize a UTC datetime into an integer number of milliseconds since the epoch",N,[[["naivedatetime"],["s"]],["result"]]],[5,"deserialize","","Deserialize a `DateTime` from a milliseconds timestamp",N,[[["d"]],["result",["naivedatetime"]]]],[0,"ts_seconds","chrono::naive::serde","Used to serialize/deserialize from second-precision timestamps",N,N],[5,"serialize","chrono::naive::serde::ts_seconds","Serialize a UTC datetime into an integer number of seconds since the epoch",N,[[["naivedatetime"],["s"]],["result"]]],[5,"deserialize","","Deserialize a `DateTime` from a seconds timestamp",N,[[["d"]],["result",["naivedatetime"]]]],[17,"MIN_DATE","chrono::naive","The minimum possible `NaiveDate` (January 1, 262145 BCE).",N,N],[17,"MAX_DATE","","The maximum possible `NaiveDate` (December 31, 262143 CE).",N,N],[11,"clone","chrono","",13,[[["self"]],["date"]]],[11,"from_utc","","Makes a new `Date` with given UTC date and offset. The local date should be constructed via the `TimeZone` trait.",13,N],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",13,[[["self"],["naivetime"]],["option",["datetime"]]]],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"succ","","Makes a new `Date` for the next date.",13,[[["self"]],["date"]]],[11,"succ_opt","","Makes a new `Date` for the next date.",13,[[["self"]],["option",["date"]]]],[11,"pred","","Makes a new `Date` for the prior date.",13,[[["self"]],["date"]]],[11,"pred_opt","","Makes a new `Date` for the prior date.",13,[[["self"]],["option",["date"]]]],[11,"offset","","Retrieves an associated offset from UTC.",13,N],[11,"timezone","","Retrieves an associated time zone.",13,[[["self"]],["tz"]]],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",13,[[["self"],["tz2"]],["date"]]],[11,"checked_add_signed","","Adds given `Duration` to the current date.",13,[[["self"],["oldduration"]],["option",["date"]]]],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date.",13,[[["self"],["oldduration"]],["option",["date"]]]],[11,"signed_duration_since","","Subtracts another `Date` from the current date. Returns a `Duration` of integral numbers.",13,[[["self"],["date"]],["oldduration"]]],[11,"naive_utc","","Returns a view to the naive UTC date.",13,[[["self"]],["naivedate"]]],[11,"naive_local","","Returns a view to the naive local date.",13,[[["self"]],["naivedate"]]],[11,"format_with_items","","Formats the date with the specified formatting items.",13,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",13,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"year","","",13,[[["self"]],["i32"]]],[11,"month","","",13,[[["self"]],["u32"]]],[11,"month0","","",13,[[["self"]],["u32"]]],[11,"day","","",13,[[["self"]],["u32"]]],[11,"day0","","",13,[[["self"]],["u32"]]],[11,"ordinal","","",13,[[["self"]],["u32"]]],[11,"ordinal0","","",13,[[["self"]],["u32"]]],[11,"weekday","","",13,[[["self"]],["weekday"]]],[11,"iso_week","","",13,[[["self"]],["isoweek"]]],[11,"with_year","","",13,[[["self"],["i32"]],["option",["date"]]]],[11,"with_month","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_month0","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_day","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_day0","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_ordinal","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_ordinal0","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"eq","","",13,[[["self"],["date"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["date"]],["option",["ordering"]]]],[11,"cmp","","",13,[[["self"],["date"]],["ordering"]]],[11,"hash","","",13,[[["self"],["h"]]]],[11,"add","","",13,[[["self"],["oldduration"]],["date"]]],[11,"sub","","",13,[[["self"],["oldduration"]],["date"]]],[11,"sub","","",13,[[["self"],["date"]],["oldduration"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"serialize","","Serialize into a rfc3339 time string",5,[[["self"],["s"]],["result"]]],[11,"deserialize","","",5,[[["d"]],["result"]]],[11,"deserialize","","",5,[[["d"]],["result"]]],[11,"deserialize","","",5,[[["d"]],["result"]]],[11,"clone","","",0,[[["self"]],["secondsformat"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["secondsformat"]],["bool"]]],[11,"clone","","",5,[[["self"]],["datetime"]]],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",5,N],[11,"date","","Retrieves a date component.",5,[[["self"]],["date"]]],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",5,[[["self"]],["naivetime"]]],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",5,[[["self"]],["i64"]]],[11,"timestamp_millis","","Returns the number of non-leap-milliseconds since January 1, 1970 UTC",5,[[["self"]],["i64"]]],[11,"timestamp_nanos","","Returns the number of non-leap-nanoseconds since January 1, 1970 UTC",5,[[["self"]],["i64"]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",5,[[["self"]],["u32"]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",5,[[["self"]],["u32"]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",5,[[["self"]],["u32"]]],[11,"offset","","Retrieves an associated offset from UTC.",5,N],[11,"timezone","","Retrieves an associated time zone.",5,[[["self"]],["tz"]]],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",5,[[["self"],["tz2"]],["datetime"]]],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",5,[[["self"],["oldduration"]],["option",["datetime"]]]],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",5,[[["self"],["oldduration"]],["option",["datetime"]]]],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",5,[[["self"],["datetime"]],["oldduration"]]],[11,"naive_utc","","Returns a view to the naive UTC datetime.",5,[[["self"]],["naivedatetime"]]],[11,"naive_local","","Returns a view to the naive local datetime.",5,[[["self"]],["naivedatetime"]]],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",5,[[["str"]],["parseresult",["datetime"]]]],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",5,[[["str"]],["parseresult",["datetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",5,[[["str"],["str"]],["parseresult",["datetime"]]]],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",5,[[["self"]],["string"]]],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",5,[[["self"]],["string"]]],[11,"to_rfc3339_opts","","Return an RFC 3339 and ISO 8601 date and time string with subseconds formatted as per a `SecondsFormat`. If passed `use_z` true and the timezone is UTC (offset 0), use 'Z', as per Fixed::TimezoneOffsetColonZ. If passed `use_z` false, use Fixed::TimezoneOffsetColon.",5,[[["self"],["secondsformat"],["bool"]],["string"]]],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",5,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",5,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"year","","",5,[[["self"]],["i32"]]],[11,"month","","",5,[[["self"]],["u32"]]],[11,"month0","","",5,[[["self"]],["u32"]]],[11,"day","","",5,[[["self"]],["u32"]]],[11,"day0","","",5,[[["self"]],["u32"]]],[11,"ordinal","","",5,[[["self"]],["u32"]]],[11,"ordinal0","","",5,[[["self"]],["u32"]]],[11,"weekday","","",5,[[["self"]],["weekday"]]],[11,"iso_week","","",5,[[["self"]],["isoweek"]]],[11,"with_year","","",5,[[["self"],["i32"]],["option",["datetime"]]]],[11,"with_month","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_month0","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_day","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_day0","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_ordinal","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_ordinal0","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"hour","","",5,[[["self"]],["u32"]]],[11,"minute","","",5,[[["self"]],["u32"]]],[11,"second","","",5,[[["self"]],["u32"]]],[11,"nanosecond","","",5,[[["self"]],["u32"]]],[11,"with_hour","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_minute","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_second","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_nanosecond","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"eq","","",5,[[["self"],["datetime"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["datetime"]],["option",["ordering"]]]],[11,"cmp","","",5,[[["self"],["datetime"]],["ordering"]]],[11,"hash","","",5,[[["self"],["h"]]]],[11,"add","","",5,[[["self"],["oldduration"]],["datetime"]]],[11,"sub","","",5,[[["self"],["oldduration"]],["datetime"]]],[11,"sub","","",5,[[["self"],["datetime"]],["oldduration"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",5,[[["str"]],["parseresult",["datetime"]]]],[11,"from_str","","",5,[[["str"]],["parseresult",["datetime"]]]],[11,"from_str","","",5,[[["str"]],["parseresult",["datetime"]]]],[11,"from","","",5,[[["systemtime"]],["datetime",["utc"]]]],[11,"from","","",5,[[["systemtime"]],["datetime",["local"]]]],[0,"format","","Formatting (and parsing) utilities for date and time.",N,N],[3,"Parsed","chrono::format","Parsed parts of date and time. There are two classes of methods:",N,N],[12,"year","","Year.",14,N],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"isoyear","","Year in the ISO week date.",14,N],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"month","","Month (1--12).",14,N],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",14,N],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",14,N],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",14,N],[12,"weekday","","Day of the week.",14,N],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",14,N],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",14,N],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",14,N],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",14,N],[12,"minute","","Minute number (0--59).",14,N],[12,"second","","Second number (0--60, accounting for leap seconds).",14,N],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",14,N],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",14,N],[12,"offset","","Offset from the local time to UTC, in seconds.",14,N],[3,"InternalNumeric","","An opaque type representing numeric item types for internal uses only.",N,N],[3,"InternalFixed","","An opaque type representing fixed-format item types for internal uses only.",N,N],[3,"ParseError","","An error from the `parse` function.",N,N],[3,"DelayedFormat","","A temporary object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",N,N],[4,"Pad","","Padding characters for numeric items.",N,N],[13,"None","","No padding.",15,N],[13,"Zero","","Zero (`0`) padding.",15,N],[13,"Space","","Space padding.",15,N],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",N,N],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,N],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",16,N],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",16,N],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,N],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",16,N],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",16,N],[13,"Month","","Month (FW=PW=2).",16,N],[13,"Day","","Day of the month (FW=PW=2).",16,N],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",16,N],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",16,N],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",16,N],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",16,N],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",16,N],[13,"Ordinal","","Day of the year (FW=PW=3).",16,N],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",16,N],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",16,N],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",16,N],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",16,N],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is not left-aligned; see also `Fixed::Nanosecond`.",16,N],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞). For formatting, it assumes UTC upon the absence of time zone offset.",16,N],[13,"Internal","","Internal uses only.",16,N],[4,"Fixed","","Fixed-format item types.",N,N],[13,"ShortMonthName","","Abbreviated month names.",17,N],[13,"LongMonthName","","Full month names.",17,N],[13,"ShortWeekdayName","","Abbreviated day of the week names.",17,N],[13,"LongWeekdayName","","Full day of the week names.",17,N],[13,"LowerAmPm","","AM/PM.",17,N],[13,"UpperAmPm","","AM/PM.",17,N],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",17,N],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",17,N],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",17,N],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",17,N],[13,"TimezoneName","","Timezone name.",17,N],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",17,N],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",17,N],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",17,N],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",17,N],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",17,N],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",17,N],[13,"Internal","","Internal uses only.",17,N],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",N,N],[13,"Literal","","A literally printed and parsed text.",18,N],[13,"OwnedLiteral","","Same to `Literal` but with the string owned by the item.",18,N],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",18,N],[13,"OwnedSpace","","Same to `Space` but with the string owned by the item.",18,N],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",18,N],[13,"Fixed","","Fixed-format item.",18,N],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",18,N],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",N,[[["parsed"],["str"],["i"]],["parseresult"]]],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",N,[[["formatter"],["option",["naivedate"]],["option",["naivetime"]],["option"],["i"]],["result"]]],[11,"clone","","",14,[[["self"]],["parsed"]]],[11,"eq","","",14,[[["self"],["parsed"]],["bool"]]],[11,"ne","","",14,[[["self"],["parsed"]],["bool"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"default","","",14,[[],["parsed"]]],[11,"new","","Returns the initial value of parsed parts.",14,[[],["parsed"]]],[11,"set_year","","Tries to set the `year` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_month","","Tries to set the `month` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_weekday","","Tries to set the `weekday` field from given value.",14,[[["self"],["weekday"]],["parseresult"]]],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_day","","Tries to set the `day` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",14,[[["self"],["bool"]],["parseresult"]]],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_minute","","Tries to set the `minute` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_second","","Tries to set the `second` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_offset","","Tries to set the `offset` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",14,[[["self"]],["parseresult",["naivedate"]]]],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",14,[[["self"]],["parseresult",["naivetime"]]]],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",14,[[["self"],["i32"]],["parseresult",["naivedatetime"]]]],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",14,[[["self"]],["parseresult",["fixedoffset"]]]],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",14,[[["self"]],["parseresult",["datetime"]]]],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",14,[[["self"],["tz"]],["parseresult",["datetime"]]]],[0,"strftime","","`strftime`/`strptime`-inspired date and time formatting syntax.",N,N],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",N,N],[11,"clone","","",19,[[["self"]],["strftimeitems"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",19,[[["str"]],["strftimeitems"]]],[11,"next","","",19,[[["self"]],["option",["item"]]]],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",N,N],[11,"clone","","",15,[[["self"]],["pad"]]],[11,"eq","","",15,[[["self"],["pad"]],["bool"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["numeric"]]],[11,"eq","","",16,[[["self"],["numeric"]],["bool"]]],[11,"ne","","",16,[[["self"],["numeric"]],["bool"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["self"]]],[11,"eq","","",20,[[["self"],["internalnumeric"]],["bool"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["fixed"]]],[11,"eq","","",17,[[["self"],["fixed"]],["bool"]]],[11,"ne","","",17,[[["self"],["fixed"]],["bool"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["internalfixed"]]],[11,"eq","","",21,[[["self"],["internalfixed"]],["bool"]]],[11,"ne","","",21,[[["self"],["internalfixed"]],["bool"]]],[11,"clone","","",18,[[["self"]],["item"]]],[11,"eq","","",18,[[["self"],["item"]],["bool"]]],[11,"ne","","",18,[[["self"],["item"]],["bool"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["parseerror"]]],[11,"eq","","",22,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",22,[[["self"],["parseerror"]],["bool"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"description","","",22,[[["self"]],["str"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",23,[[["option",["naivedate"]],["option",["naivetime"]],["i"]],["delayedformat"]]],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",23,[[["option",["naivedate"]],["option",["naivetime"]],["off"],["i"]],["delayedformat"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"from_str","chrono","",1,[[["str"]],["result"]]],[0,"serde","","Serialization/Deserialization in alternate formats",N,N],[0,"ts_nanoseconds","chrono::serde","Ser/de to/from timestamps in nanoseconds",N,N],[5,"serialize","chrono::serde::ts_nanoseconds","Serialize a UTC datetime into an integer number of nanoseconds since the epoch",N,[[["datetime"],["s"]],["result"]]],[5,"deserialize","","Deserialize a `DateTime` from a nanosecond timestamp",N,[[["d"]],["result",["datetime"]]]],[0,"ts_milliseconds","chrono::serde","Ser/de to/from timestamps in milliseconds",N,N],[5,"serialize","chrono::serde::ts_milliseconds","Serialize a UTC datetime into an integer number of milliseconds since the epoch",N,[[["datetime"],["s"]],["result"]]],[5,"deserialize","","Deserialize a `DateTime` from a millisecond timestamp",N,[[["d"]],["result",["datetime"]]]],[0,"ts_seconds","chrono::serde","Ser/de to/from timestamps in seconds",N,N],[5,"serialize","chrono::serde::ts_seconds","Serialize a UTC datetime into an integer number of seconds since the epoch",N,[[["datetime"],["s"]],["result"]]],[5,"deserialize","","Deserialize a `DateTime` from a seconds timestamp",N,[[["d"]],["result",["datetime"]]]],[11,"serialize","chrono","",1,[[["self"],["s"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result"]]],[17,"MIN_DATE","","The minimum possible `Date`.",N,N],[17,"MAX_DATE","","The maximum possible `Date`.",N,N],[8,"SubsecRound","","Extension trait for subsecond rounding or truncation to a maximum number of digits. Rounding can be used to decrease the error variance when serializing/persisting to lower precision. Truncation is the default behavior in Chrono display formatting.  Either can be used to guarantee equality (e.g. for testing) when round-tripping through a lower precision format.",N,N],[10,"round_subsecs","","Return a copy rounded to the specified number of subsecond digits. With 9 or more digits, self is returned unmodified. Halfway values are rounded up (away from zero).",24,[[["self"],["u16"]],["self"]]],[10,"trunc_subsecs","","Return a copy truncated to the specified number of subsecond digits. With 9 or more digits, self is returned unmodified.",24,[[["self"],["u16"]],["self"]]],[8,"Datelike","","The common set of methods for date component.",N,N],[10,"year","","Returns the year number in the calendar date.",25,[[["self"]],["i32"]]],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",25,N],[10,"month","","Returns the month number starting from 1.",25,[[["self"]],["u32"]]],[10,"month0","","Returns the month number starting from 0.",25,[[["self"]],["u32"]]],[10,"day","","Returns the day of month starting from 1.",25,[[["self"]],["u32"]]],[10,"day0","","Returns the day of month starting from 0.",25,[[["self"]],["u32"]]],[10,"ordinal","","Returns the day of year starting from 1.",25,[[["self"]],["u32"]]],[10,"ordinal0","","Returns the day of year starting from 0.",25,[[["self"]],["u32"]]],[10,"weekday","","Returns the day of week.",25,[[["self"]],["weekday"]]],[10,"iso_week","","Returns the ISO week.",25,[[["self"]],["isoweek"]]],[10,"with_year","","Makes a new value with the year number changed.",25,[[["self"],["i32"]],["option"]]],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",25,[[["self"],["u32"]],["option"]]],[11,"num_days_from_ce","","Returns the number of days since January 1, Year 1 (aka Day 1) in the proleptic Gregorian calendar.",25,[[["self"]],["i32"]]],[8,"Timelike","","The common set of methods for time component.",N,N],[10,"hour","","Returns the hour number from 0 to 23.",26,[[["self"]],["u32"]]],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",26,N],[10,"minute","","Returns the minute number from 0 to 59.",26,[[["self"]],["u32"]]],[10,"second","","Returns the second number from 0 to 59.",26,[[["self"]],["u32"]]],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",26,[[["self"]],["u32"]]],[10,"with_hour","","Makes a new value with the hour number changed.",26,[[["self"],["u32"]],["option"]]],[10,"with_minute","","Makes a new value with the minute number changed.",26,[[["self"],["u32"]],["option"]]],[10,"with_second","","Makes a new value with the second number changed.",26,[[["self"],["u32"]],["option"]]],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",26,[[["self"],["u32"]],["option"]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",26,[[["self"]],["u32"]]],[11,"eq","","",1,[[["self"],["weekday"]],["bool"]]],[11,"clone","","",1,[[["self"]],["weekday"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"succ","","The next day in the week.",1,[[["self"]],["weekday"]]],[11,"pred","","The previous day in the week.",1,[[["self"]],["weekday"]]],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",1,[[["self"]],["u32"]]],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",1,[[["self"]],["u32"]]],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",1,[[["self"]],["u32"]]],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",1,[[["self"]],["u32"]]],[11,"from_i64","","",1,[[["i64"]],["option",["weekday"]]]],[11,"from_u64","","",1,[[["u64"]],["option",["weekday"]]]],[11,"clone","","",27,[[["self"]],["parseweekdayerror"]]],[11,"eq","","",27,[[["self"],["parseweekdayerror"]],["bool"]]],[11,"ne","","",27,[[["self"],["parseweekdayerror"]],["bool"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,[[["i64"]],["duration"]]],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,[[["i64"]],["duration"]]],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,[[["i64"]],["duration"]]],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",28,[[["i64"]],["duration"]]],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",28,[[["i64"]],["duration"]]],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",28,[[["i64"]],["duration"]]],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",28,[[["i64"]],["duration"]]],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",28,[[["i64"]],["duration"]]],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",28,[[["f"]],["duration"]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",28,[[["self"]],["i64"]]],[11,"num_days","","Returns the total number of whole days in the duration.",28,[[["self"]],["i64"]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",28,[[["self"]],["i64"]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",28,[[["self"]],["i64"]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",28,[[["self"]],["i64"]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",28,[[["self"]],["i64"]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",28,[[["self"]],["option",["i64"]]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",28,[[["self"]],["option",["i64"]]]],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",28,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",28,[[["self"],["duration"]],["option",["duration"]]]],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",28,[[],["duration"]]],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",28,[[],["duration"]]],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",28,[[],["duration"]]],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",28,[[["self"]],["bool"]]],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",28,[[["duration"]],["result",["duration","outofrangeerror"]]]],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",28,[[["self"]],["result",["duration","outofrangeerror"]]]],[11,"to_string","","",28,[[["self"]],["string"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"eq","","",28,[[["self"],["duration"]],["bool"]]],[11,"ne","","",28,[[["self"],["duration"]],["bool"]]],[11,"mul","","",28,[[["self"],["i32"]],["duration"]]],[11,"neg","","",28,[[["self"]],["duration"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"div","","",28,[[["self"],["i32"]],["duration"]]],[11,"partial_cmp","","",28,[[["self"],["duration"]],["option",["ordering"]]]],[11,"lt","","",28,[[["self"],["duration"]],["bool"]]],[11,"le","","",28,[[["self"],["duration"]],["bool"]]],[11,"gt","","",28,[[["self"],["duration"]],["bool"]]],[11,"ge","","",28,[[["self"],["duration"]],["bool"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",28,[[["self"]],["duration"]]],[11,"add","","",28,[[["self"],["duration"]],["duration"]]],[11,"cmp","","",28,[[["self"],["duration"]],["ordering"]]],[11,"sub","","",28,[[["self"],["duration"]],["duration"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","chrono::offset","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"add","chrono::naive","",11,[[["self"],["fixedoffset"]],["naivetime"]]],[11,"sub","","",11,[[["self"],["fixedoffset"]],["naivetime"]]],[11,"add","","",12,[[["self"],["fixedoffset"]],["naivedatetime"]]],[11,"sub","","",12,[[["self"],["fixedoffset"]],["naivedatetime"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","chrono::format","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","chrono::format::strftime","",19,[[["t"]],["t"]]],[11,"into_iter","","",19,[[["self"]],["i"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]]],"paths":[[4,"SecondsFormat"],[4,"Weekday"],[4,"LocalResult"],[3,"Utc"],[3,"FixedOffset"],[3,"DateTime"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"IsoWeek"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"Parsed"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"StrftimeItems"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"DelayedFormat"],[8,"SubsecRound"],[8,"Datelike"],[8,"Timelike"],[3,"ParseWeekdayError"],[3,"Duration"]]};
searchIndex["clap"]={"doc":"`clap` is a simple-to-use, efficient, and full-featured library for parsing command line arguments and subcommands when writing console/terminal applications.","items":[[3,"Arg","clap","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.",N,N],[3,"ArgGroup","","`ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these arguments\". By placing arguments in a logical group, you can create easier requirement and exclusion rules instead of having to list each argument individually, or when you want a rule to apply \"any but not all\" arguments.",N,N],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by the user. New instances of this struct are obtained by using the [`App::get_matches`] family of methods.",N,N],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`] method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike [`Values`].",N,N],[3,"SubCommand","","The abstract representation of a command line subcommand.",N,N],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`] method.",N,N],[3,"App","","Used to create a representation of a command line program and all possible command line arguments. Application settings are set using the \"builder pattern\" with the [`App::get_matches`] family of methods being the terminal methods that starts the runtime-parsing process. These methods then return information about the user supplied arguments (or lack there of).",N,N],[3,"Error","","Command Line Argument Parser Error",N,N],[12,"message","","Formatted error message",0,N],[12,"kind","","The type of error",0,N],[12,"info","","Any additional information passed along, such as the argument name that caused the error",0,N],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`]",N,N],[13,"Required","","The argument must be used",1,N],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",1,N],[13,"EmptyValues","","The argument allows empty values such as `--option \"\"`",1,N],[13,"Global","","The argument should be propagated down through all child [`SubCommands`] [`SubCommand`]: ./struct.SubCommand.html",1,N],[13,"Hidden","","The argument should not be shown in help text",1,N],[13,"TakesValue","","The argument accepts a value, such as `--option <value>`",1,N],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimiter",1,N],[13,"NextLineHelp","","Prints the help text on the line after the argument",1,N],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",1,N],[13,"HidePossibleValues","","Hides the possible values from the help string",1,N],[13,"AllowLeadingHyphen","","Allows vals that start with a '-'",1,N],[13,"RequireEquals","","Require options use `--option=val` syntax",1,N],[13,"Last","","Specifies that the arg is the last positional argument and may be accessed early via `--` syntax",1,N],[13,"HideDefaultValue","","Hides the default value from the help string",1,N],[13,"CaseInsensitive","","Makes `Arg::possible_values` case insensitive",1,N],[13,"HideEnvValues","","Hides ENV values in the help message",1,N],[13,"HiddenShortHelp","","The argument should not be shown in short help text",1,N],[13,"HiddenLongHelp","","The argument should not be shown in long help text",1,N],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",N,N],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should not be treated as an error. This is the default behavior of `clap`.",2,N],[13,"AllArgsOverrideSelf","","Essentially sets [`Arg::overrides_with(\"itself\")`] for all arguments.",2,N],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument values, such as negative numbers like `-10`. (which would otherwise be parsed as another flag or option)",2,N],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is similar to `AllowLeadingHyphen` except that it only allows numbers, all other undefined leading hyphens will fail to parse.",2,N],[13,"AllowMissingPositional","","Allows one to implement two styles of CLIs where positionals can be used out of order.",2,N],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which would otherwise cause a [`ErrorKind::UnknownArgument`] error, should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.",2,N],[13,"ArgsNegateSubcommands","","Specifies that use of a valid [argument] negates [subcommands] being used after. By default `clap` allows arguments between subcommands such as `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that functionality and says that arguments can only follow the final subcommand. For instance using this setting makes only the following invocations possible:",2,N],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.",2,N],[13,"ColoredHelp","","Uses colorized help messages.",2,N],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",2,N],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",2,N],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",2,N],[13,"DontCollapseArgsInUsage","","Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string",2,N],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`] was used.",2,N],[13,"DisableHelpSubcommand","","Disables the `help` subcommand",2,N],[13,"DisableVersion","","Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s (Defaults to `false`; application does have a version flag)",2,N],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were declared in, and not alphabetically which is the default.",2,N],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]s. (Defaults to `false`; subcommands have independent version strings from their parents.)",2,N],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",2,N],[13,"HidePossibleValuesInHelp","","Tells `clap` not to print possible values when displaying help information. This can be useful if there are many values, or they are explained elsewhere.",2,N],[13,"InferSubcommands","","Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.",2,N],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name. This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one one would not normally type the binary or program name for each command.",2,N],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument.",2,N],[13,"PropagateGlobalValuesDown","","DEPRECATED: This setting is no longer required in order to propagate values up or down",2,N],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command. For example if you had a subcommand or top level application with a required argument that is only required as long as there is no subcommand present, using this setting would allow you to set those arguments to [`Arg::required(true)`] and yet receive no error so long as the user uses a valid subcommand instead.",2,N],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before exiting gracefully) if no [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).",2,N],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail with a [`ErrorKind::InvalidUtf8`] error.",2,N],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime, error and exit gracefully.",2,N],[13,"TrailingVarArg","","Specifies that the final positional argument is a \"VarArg\" and that `clap` should not attempt to parse any further args.",2,N],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more unified help message (a la `getopts` or `docopt` style).",2,N],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s (Defaults to `false`; subcommands do have version flags.)",2,N],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait for user before exiting",2,N],[4,"ErrorKind","","Command line argument parser kind of error",N,N],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values, and the user provides a value which isn't in that set.",3,N],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or subcommand which isn't defined.",3,N],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for being similar enough to an existing subcommand. If it doesn't meet the threshold, or the 'suggestions' feature is disabled, the more general [`UnknownArgument`] error is returned.",3,N],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which either doesn't meet the threshold for being similar enough to an existing subcommand, or the 'suggestions' feature is disabled. Otherwise the more detailed [`InvalidSubcommand`] error is returned.",3,N],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty values.",3,N],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the value fails that validation.",3,N],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting [`Arg::max_values`].",3,N],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting [`Arg::min_values`].",3,N],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what's been defined by setting [`Arg::number_of_values`] or than was implicitly set by [`Arg::value_names`].",3,N],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can't be used together.",3,N],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",3,N],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]), but the user does not provide one.",3,N],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.",3,N],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an argument which doesn't allow that.",3,N],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and [`AppSettings::StrictUtf8`] is set.",3,N],[13,"HelpDisplayed","","Not a true \"error\" as it means `--help` or similar was used. The help message will be sent to `stdout`.",3,N],[13,"VersionDisplayed","","Not a true \"error\" as it means `--version` or similar was used. The message will be sent to `stdout`.",3,N],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument with name `config` to be converted, but `config` wasn't used by the user. [`value_t!`]: ./macro.value_t!.html [`values_t!`]: ./macro.values_t!.html",3,N],[13,"Io","","Represents an [I/O error]. Can occur when writing to `stderr` or `stdout` or reading a configuration file. [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",3,N],[13,"Format","","Represents a [Format error] (which is a part of [`Display`]). Typically caused by writing to `stderr` or `stdout`. [`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html [Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",3,N],[4,"Shell","","Describes which shell to produce a completions file for",N,N],[13,"Bash","","Generates a .bash completion file for the Bourne Again SHell (BASH)",4,N],[13,"Fish","","Generates a .fish completion file for the Friendly Interactive SHell (fish)",4,N],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",4,N],[13,"PowerShell","","Generates a completion file for PowerShell",4,N],[13,"Elvish","","Generates a completion file for Elvish",4,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["appsettings"]],["bool"]]],[11,"clone","","",2,[[["self"]],["appsettings"]]],[11,"from_str","","",2,[[["str"]],["result"]]],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn't have to be same as the binary. The name will be displayed to the user when they request to print version or help and usage information.",5,[[["s"]],["self"]]],[11,"get_name","","Get the name of the app",5,[[["self"]],["str"]]],[11,"get_bin_name","","Get the name of the binary",5,[[["self"]],["option",["str"]]]],[11,"with_defaults","","Creates a new instance of an application requiring a name, but uses the [`crate_authors!`] and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.",5,[[["s"]],["self"]]],[11,"author","","Sets a string of author(s) that will be displayed to the user when they request the help information with `--help` or `-h`.",5,[[["self"],["s"]],["self"]]],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely necessary, such as when the binary name for your application is misleading, or perhaps not how the user should invoke your program.",5,[[["self"],["s"]],["self"]]],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help information with `-h`.",5,[[["self"],["s"]],["self"]]],[11,"long_about","","Sets a string describing what the program does. This will be displayed when displaying help information.",5,[[["self"],["s"]],["self"]]],[11,"name","","Sets the program's name. This will be displayed when displaying help information.",5,[[["self"],["s"]],["self"]]],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed after the auto-generated help information. This is often used to describe how to use the arguments, or caveats to be noted.",5,[[["self"],["s"]],["self"]]],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed before the auto-generated help information. This is often used for header information.",5,[[["self"],["s"]],["self"]]],[11,"version","","Sets a string of the version number to be displayed when displaying version or help information with `-V`.",5,[[["self"],["s"]],["self"]]],[11,"long_version","","Sets a string of the version number to be displayed when displaying version or help information with `--version`.",5,[[["self"],["s"]],["self"]]],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",5,[[["self"],["s"]],["self"]]],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used when the auto-generated message does not suffice.",5,[[["self"],["s"]],["self"]]],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",5,[[["self"],["s"]],["self"]]],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",5,[[["self"],["s"]],["self"]]],[11,"help_message","","Sets the help text for the auto-generated `help` argument.",5,[[["self"],["s"]],["self"]]],[11,"version_message","","Sets the help text for the auto-generated `version` argument.",5,[[["self"],["s"]],["self"]]],[11,"template","","Sets the help template to be used, overriding the default format.",5,[[["self"],["s"]],["self"]]],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",5,[[["self"],["appsettings"]],["self"]]],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",5,N],[11,"global_setting","","Enables a single setting that is propagated down through all child [`SubCommand`]s.",5,[[["self"],["appsettings"]],["self"]]],[11,"global_settings","","Enables multiple settings which are propagated down through all child [`SubCommand`]s.",5,N],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",5,[[["self"],["appsettings"]],["self"]]],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",5,N],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will ignore terminal widths and use source formatting.",5,[[["self"],["usize"]],["self"]]],[11,"max_term_width","","Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal widths and use source formatting.",5,[[["self"],["usize"]],["self"]]],[11,"arg","","Adds an [argument] to the list of valid possibilities.",5,[[["self"],["a"]],["self"]]],[11,"args","","Adds multiple [arguments] to the list of valid possibilities",5,N],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string used follows the same rules and syntax as [`Arg::from_usage`]",5,[[["self"],["str"]],["self"]]],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See [`Arg::from_usage`] for details on the syntax and rules supported.",5,[[["self"],["str"]],["self"]]],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,[[["self"],["s"]],["self"]]],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,N],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with [`App::alias`], except that they are visible inside the help message.",5,[[["self"],["s"]],["self"]]],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined with [`App::aliases`], except that they are visible inside the help message.",5,N],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments. By placing them in a logical group, you can build easier requirement and exclusion rules. For instance, you can make an entire [`ArgGroup`] required, meaning that one (and only one) argument from that group must be present at runtime.",5,[[["self"],["arggroup"]],["self"]]],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",5,N],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilities. Subcommands are effectively sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage, etc. They also function just like [`App`]s, in that they get their own auto generated help, version, and usage.",5,[[["self"],["app"]],["self"]]],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilities by iterating over an [`IntoIterator`] of [`SubCommand`]s",5,[[["self"],["i"]],["self"]]],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used subcommands, or prioritize those towards the top of the list. Duplicate values are allowed. Subcommands with duplicate display orders will be displayed in alphabetical order.",5,[[["self"],["usize"]],["self"]]],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `-h` to request the help message",5,[[["self"]],["clapresult"]]],[11,"print_long_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `--help` to request the help message",5,[[["self"]],["clapresult"]]],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `-h`",5,[[["self"],["w"]],["clapresult"]]],[11,"write_long_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `--help`",5,[[["self"],["w"]],["clapresult"]]],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.",5,[[["self"],["w"]],["clapresult"]]],[11,"write_long_version","","Writes the version message to the user to a [`io::Write`] object",5,[[["self"],["w"]],["clapresult"]]],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",5,[[["self"],["s"],["shell"],["t"]]]],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can install extra files like a completion script, this may be used e.g. in a command that outputs the contents of the completion script, to be redirected into a file by the user.",5,[[["self"],["s"],["shell"],["w"]]]],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and the process will exit with the appropriate error code. By default this method gets all user provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points, which are legal on many platforms.",5,[[["self"]],["argmatches"]]],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting the process on failed parse. By default this method gets matches from [`env::args_os`]",5,[[["self"]],["clapresult",["argmatches"]]]],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`] and will automatically exit with an error message. This method, however, lets you specify what iterator to use when performing matches, such as a [`Vec`] of your making.",5,[[["self"],["i"]],["argmatches"]]],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and [`App::get_matches_safe`]",5,[[["self"],["i"]],["clapresult",["argmatches"]]]],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not the desired functionality, instead prefer [`App::get_matches_from_safe`] which does consume `self`.",5,[[["self"],["i"]],["clapresult",["argmatches"]]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"default","","",6,[[],["arg"]]],[11,"clone","","",6,[[["self"]],["arg"]]],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get information about whether or not the argument was used at runtime, get values, set relationships with other args, etc..",6,[[["str"]],["self"]]],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings for the [`Arg`]. The syntax is flexible, but there are some rules to follow.",6,[[["str"]],["self"]]],[11,"short","","Sets the short version of the argument without the preceding `-`.",6,[[["self"],["s"]],["self"]]],[11,"long","","Sets the long version of the argument without the preceding `--`.",6,[[["self"],["str"]],["self"]]],[11,"alias","","Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden arguments as one only needs to check for the existence of this command, and not all variants.",6,[[["self"],["s"]],["self"]]],[11,"aliases","","Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",6,N],[11,"visible_alias","","Allows adding a [`Arg`] alias that functions exactly like those defined with [`Arg::alias`], except that they are visible inside the help message.",6,[[["self"],["s"]],["self"]]],[11,"visible_aliases","","Allows adding multiple [`Arg`] aliases that functions exactly like those defined with [`Arg::aliases`], except that they are visible inside the help message.",6,N],[11,"help","","Sets the short help text of the argument that will be displayed to the user when they print the help information with `-h`. Typically, this is a short (one line) description of the arg.",6,[[["self"],["str"]],["self"]]],[11,"long_help","","Sets the long help text of the argument that will be displayed to the user when they print the help information with `--help`. Typically this a more detailed (multi-line) message that describes the arg.",6,[[["self"],["str"]],["self"]]],[11,"last","","Specifies that this arg is the last, or final, positional argument (i.e. has the highest index) and is only able to be accessed via the `--` syntax (i.e. `$ prog args -- last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also allows one to access this arg early using the `--` syntax. Accessing an arg early, even with the `--` syntax is otherwise not possible.",6,[[["self"],["bool"]],["self"]]],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is required, when no other conflicting rules have been evaluated. Conflicting rules take precedence over being required. Default: `false`",6,[[["self"],["bool"]],["self"]]],[11,"require_equals","","Requires that options use the `--option=val` syntax (i.e. an equals between the option and associated value) Default: `false`",6,[[["self"],["bool"]],["self"]]],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (`-`)",6,[[["self"],["bool"]],["self"]]],[11,"required_unless","","Sets an arg that override this arg's required setting. (i.e. this arg will be required unless this other argument is present).",6,[[["self"],["str"]],["self"]]],[11,"required_unless_all","","Sets args that override this arg's required setting. (i.e. this arg will be required unless all these other arguments are present).",6,N],[11,"required_unless_one","","Sets args that override this arg's [required] setting. (i.e. this arg will be required unless at least one of these other arguments are present).",6,N],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument, the following argument can't be present and vice versa.",6,[[["self"],["str"]],["self"]]],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per argument.",6,N],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,[[["self"],["str"]],["self"]]],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,N],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when using this argument, the following argument must be present.",6,[[["self"],["str"]],["self"]]],[11,"requires_if","","Allows a conditional requirement. The requirement will only become valid if this arg's value equals `val`.",6,[[["self"],["str"],["str"]],["self"]]],[11,"requires_ifs","","Allows multiple conditional requirements. The requirement will only become valid if this arg's value equals `val`.",6,N],[11,"required_if","","Allows specifying that an argument is [required] conditionally. The requirement will only become valid if the specified `arg`'s value equals `val`.",6,[[["self"],["str"],["str"]],["self"]]],[11,"required_ifs","","Allows specifying that an argument is [required] based on multiple conditions. The conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid if one of the specified `arg`'s value equals it's corresponding `val`.",6,N],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when using this argument, the following arguments must be present.",6,N],[11,"takes_value","","Specifies that the argument takes a value at run time.",6,[[["self"],["bool"]],["self"]]],[11,"hide_possible_values","","Specifies if the possible values of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show possible values)",6,[[["self"],["bool"]],["self"]]],[11,"hide_default_value","","Specifies if the default value of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show default value)",6,[[["self"],["bool"]],["self"]]],[11,"index","","Specifies the index of a positional argument starting at 1.",6,[[["self"],["u64"]],["self"]]],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d` would count as three occurrences. For options there is a distinct difference in multiple occurrences vs multiple values.",6,[[["self"],["bool"]],["self"]]],[11,"value_terminator","","Specifies a value that stops parsing multiple values of a give argument. By default when one sets [`multiple(true)`] on an argument, clap will continue parsing values for that argument until it reaches another valid argument, or one of the other more specific settings for multiple values is used (such as [`min_values`], [`max_values`] or [`number_of_values`]).",6,[[["self"],["str"]],["self"]]],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",6,[[["self"],["bool"]],["self"]]],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at the command line with an explicit `\"\"`, or `''`",6,[[["self"],["bool"]],["self"]]],[11,"hidden","","Hides an argument from help message output.",6,[[["self"],["bool"]],["self"]]],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that only one of the specified values was used, or fails with an error message.",6,N],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies that only one of the specified values was used, or fails with error message.",6,[[["self"],["str"]],["self"]]],[11,"case_insensitive","","When used with [`Arg::possible_values`] it allows the argument value to pass validation even if the case differs from that of the specified `possible_value`.",6,[[["self"],["bool"]],["self"]]],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",6,[[["self"],["str"]],["self"]]],[11,"groups","","Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.",6,N],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a `-f <file>` argument where you wanted exactly 3 'files' you would set `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided 3 and only 3 values.",6,[[["self"],["u64"]],["self"]]],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a message displayed to the user.",6,[[["self"],["f"]],["self"]]],[11,"validator_os","","Works identically to Validator but is intended to be used with values that could contain non UTF-8 formatted strings.",6,[[["self"],["f"]],["self"]]],[11,"max_values","","Specifies the maximum number of values are for this argument. For example, if you had a `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3 values.",6,[[["self"],["u64"]],["self"]]],[11,"min_values","","Specifies the minimum number of values for this argument. For example, if you had a `-f <file>` argument where you wanted at least 2 'files' you would set `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more values.",6,[[["self"],["u64"]],["self"]]],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`, and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the value delimiter for all arguments that accept values (options and positional arguments)",6,[[["self"],["bool"]],["self"]]],[11,"require_delimiter","","Specifies that multiple values may only be set using the delimiter. This means if an if an option is encountered, and no delimiter is found, it automatically assumed that no additional values for that option follow. This is unlike the default, where it is generally assumed that more values will follow regardless of whether or not a delimiter is used.",6,[[["self"],["bool"]],["self"]]],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",6,[[["self"],["str"]],["self"]]],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used for help and usage strings only. The names are not used to access arguments. The values of the arguments are accessed in numeric order (i.e. if you specify two names `one` and `two` `one` will be the first matched value, `two` will be the second).",6,N],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help documentation. This name is cosmetic only, the name is not used to access arguments. This setting can be very helpful when describing the type of input the user should be using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to use all capital letters for the value name.",6,[[["self"],["str"]],["self"]]],[11,"default_value","","Specifies the value of the argument when not specified at runtime.",6,[[["self"],["str"]],["self"]]],[11,"default_value_os","","Provides a default value in the exact same manner as [`Arg::default_value`] only using [`OsStr`]s instead. [`Arg::default_value`]: ./struct.Arg.html#method.default_value [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,[[["self"],["osstr"]],["self"]]],[11,"default_value_if","","Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be present at runtime and have the value `val`.",6,[[["self"],["str"],["option",["str"]],["str"]],["self"]]],[11,"default_value_if_os","","Provides a conditional default value in the exact same manner as [`Arg::default_value_if`] only using [`OsStr`]s instead. [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,[[["self"],["str"],["option",["osstr"]],["osstr"]],["self"]]],[11,"default_value_ifs","","Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`]. The method takes a slice of tuples in the `(arg, Option<val>, default)` format.",6,N],[11,"default_value_ifs_os","","Provides multiple conditional default values in the exact same manner as [`Arg::default_value_ifs`] only using [`OsStr`]s instead. [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,N],[11,"env","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment, if available. If it is not present in the environment, then default rules will apply.",6,[[["self"],["str"]],["self"]]],[11,"env_os","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment if available in the exact same manner as [`Arg::env`] only using [`OsStr`]s instead.",6,[[["self"],["osstr"]],["self"]]],[11,"hide_env_values","","@TODO @p2 @docs @release: write docs",6,[[["self"],["bool"]],["self"]]],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and indented once. This can be helpful for arguments with very long or complex help messages. This can also be helpful for arguments with very long flag names, or many/long value names.",6,[[["self"],["bool"]],["self"]]],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used args, or prioritize those towards the top of the list. Duplicate values are allowed. Args with duplicate display orders will be displayed in alphabetical order.",6,[[["self"],["usize"]],["self"]]],[11,"raw","","Indicates that all parameters passed after this should not be parsed individually, but rather passed in their entirety. It is worth noting that setting this requires all values to come after a `--` to indicate they should all be captured. For example:",6,[[["self"],["bool"]],["self"]]],[11,"hidden_short_help","","Hides an argument from short help message output.",6,[[["self"],["bool"]],["self"]]],[11,"hidden_long_help","","Hides an argument from long help message output.",6,[[["self"],["bool"]],["self"]]],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,[[["self"],["argsettings"]],["bool"]]],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,[[["self"],["argsettings"]],["self"]]],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,[[["self"],["argsettings"]],["self"]]],[11,"from","","",6,[[["arg"]],["self"]]],[11,"eq","","",6,[[["self"],["arg"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["argmatches"]]],[11,"default","","",7,[[],["self"]]],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes an additional value at runtime). If the option wasn't present at runtime it returns `None`.",7,[[["self"],["s"]],["option",["str"]]]],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn't present at runtime it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,[[["self"],["s"]],["option",["cow"]]]],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument value may contain invalid UTF-8 code points.",7,[[["self"],["s"]],["option",["osstr"]]]],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument (i.e. an argument that takes multiple values at runtime). If the option wasn't present at runtime it returns `None`",7,[[["self"],["s"]],["option",["values"]]]],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn't present at runtime it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,[[["self"],["s"]],["option",["vec"]]]],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",7,[[["self"],["s"]],["option",["osvalues"]]]],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",7,[[["self"],["s"]],["bool"]]],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn't present it will return `0`.",7,[[["self"],["s"]],["u64"]]],[11,"index_of","","Gets the starting index of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",7,[[["self"],["s"]],["option",["usize"]]]],[11,"indices_of","","Gets all indices of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",7,[[["self"],["s"]],["option",["indices"]]]],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if the subcommand wasn't present at runtime.",7,[[["self"],["s"]],["option",["argmatches"]]]],[11,"subcommand_name","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know which subcommand was actually used. This method returns the name of the subcommand that was used at runtime, or `None` if one wasn't.",7,[[["self"]],["option",["str"]]]],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`] by returning a tuple with both pieces of information.",7,N],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",7,[[["self"]],["str"]]],[11,"clone","","",8,[[["self"]],["values"]]],[11,"next","","",8,[[["self"]],["option",["str"]]]],[11,"size_hint","","",8,N],[11,"next_back","","",8,[[["self"]],["option",["str"]]]],[11,"default","","",8,[[],["self"]]],[11,"clone","","",9,[[["self"]],["osvalues"]]],[11,"next","","",9,[[["self"]],["option",["osstr"]]]],[11,"size_hint","","",9,N],[11,"next_back","","",9,[[["self"]],["option",["osstr"]]]],[11,"default","","",9,[[],["self"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["subcommand"]]],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed to the user when they print version or help and usage information.",10,[[["str"]],["app"]]],[11,"default","","",11,[[],["arggroup"]]],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to get values from the group or refer to the group inside of conflict and requirement rules.",11,[[["str"]],["self"]]],[11,"arg","","Adds an [argument] to this group by name",11,[[["self"],["str"]],["self"]]],[11,"args","","Adds multiple [arguments] to this group by name",11,N],[11,"multiple","","Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)",11,[[["self"],["bool"]],["self"]]],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states that one argument from this group must be present at runtime (unless conflicting with another argument).",11,[[["self"],["bool"]],["self"]]],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when any one of the arguments from this group is used.",11,[[["self"],["str"]],["self"]]],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when one of the arguments from this group is used.",11,N],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,[[["self"],["str"]],["self"]]],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,N],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"from","","",11,[[["arggroup"]],["self"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["argsettings"]],["bool"]]],[11,"clone","","",1,[[["self"]],["argsettings"]]],[11,"from_str","","",1,[[["str"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["errorkind"]]],[11,"eq","","",3,[[["self"],["errorkind"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"use_stderr","","Should the message be written to `stdout` or not",0,[[["self"]],["bool"]]],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",0,N],[11,"with_description","","Create an error with a custom description.",0,[[["str"],["errorkind"]],["self"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["shell"]]],[11,"variants","","A list of possible variants in `&'static str` form",4,N],[11,"from_str","","",4,[[["str"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[6,"Result","","Short hand for [`Result`] type",N,N],[14,"value_t","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an argument value. This macro returns a `Result<T,String>` which allows you as the developer to decide what you'd like to do on a failed parse. There are two types of errors, parse failures and those where the argument wasn't present (such as a non-required argument). You can use it to get a single value, or a iterator as with the [`ArgMatches::values_of`]",N,N],[14,"value_t_or_exit","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or exiting upon error, instead of returning a [`Result`] type.",N,N],[14,"values_t","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] This macro returns a [`clap::Result<Vec<T>>`] which allows you as the developer to decide what you'd like to do on a failed parse.",N,N],[14,"values_t_or_exit","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] or exiting upon error.",N,N],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time evaluable expression, suitable for use as a static array size, or the value of a `const`.",N,N],[14,"arg_enum","","Convenience macro to generate more complete enums with variants to be used as a type when parsing arguments. This enum also provides a `variants()` function which can be used to retrieve a `Vec<&'static str>` of the variant names, as well as implementing [`FromStr`] and [`Display`] automatically.",N,N],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at compile time as `MAJOR.MINOR.PATCH_PKGVERSION_PRE`",N,N],[14,"crate_authors","","Allows you to pull the authors for the app from your Cargo.toml at compile time in the form: `\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`",N,N],[14,"crate_description","","Allows you to pull the description from your Cargo.toml at compile time.",N,N],[14,"crate_name","","Allows you to pull the name from your Cargo.toml at compile time.",N,N],[14,"app_from_crate","","Allows you to build the `App` instance from your Cargo.toml at compile time.",N,N],[14,"clap_app","","Build `App`, `Arg`s, `SubCommand`s and `Group`s with Usage-string like input but without the associated parsing runtime cost.",N,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]]],"paths":[[3,"Error"],[4,"ArgSettings"],[4,"AppSettings"],[4,"ErrorKind"],[4,"Shell"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"Values"],[3,"OsValues"],[3,"SubCommand"],[3,"ArgGroup"]]};
searchIndex["cookie"]={"doc":"HTTP cookie parsing and cookie jar management.","items":[[3,"PrivateJar","cookie","A child cookie jar that provides authenticated encryption for its cookies.",N,N],[3,"SignedJar","","A child cookie jar that authenticates its cookies.",N,N],[3,"Key","","A cryptographic master key for use with `Signed` and/or `Private` jars.",N,N],[3,"CookieBuilder","","Structure that follows the builder pattern for building `Cookie` structs.",N,N],[3,"CookieJar","","A collection of cookies that tracks its modifications.",N,N],[3,"Delta","","Iterator over the changes to a cookie jar.",N,N],[3,"Iter","","Iterator over all of the cookies in a jar.",N,N],[3,"Cookie","","Representation of an HTTP cookie.",N,N],[3,"EncodedCookie","","Wrapper around `Cookie` whose `Display` implementation percent-encodes the cookie's name and value.",N,N],[4,"ParseError","","Enum corresponding to a parsing error.",N,N],[13,"MissingPair","","The cookie did not contain a name/value pair.",0,N],[13,"EmptyName","","The cookie's name was empty.",0,N],[13,"Utf8Error","","Decoding the cookie's name or value resulted in invalid UTF-8.",0,N],[4,"SameSite","","The `SameSite` cookie attribute.",N,N],[13,"Strict","","The \"Strict\" `SameSite` attribute.",1,N],[13,"Lax","","The \"Lax\" `SameSite` attribute.",1,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["cookiebuilder"]]],[11,"new","","Creates a new `CookieBuilder` instance from the given name and value.",2,[[["n"],["v"]],["cookiebuilder"]]],[11,"expires","","Sets the `expires` field in the cookie being built.",2,[[["self"],["tm"]],["cookiebuilder"]]],[11,"max_age","","Sets the `max_age` field in the cookie being built.",2,[[["self"],["duration"]],["cookiebuilder"]]],[11,"domain","","Sets the `domain` field in the cookie being built.",2,[[["self"],["d"]],["cookiebuilder"]]],[11,"path","","Sets the `path` field in the cookie being built.",2,[[["self"],["p"]],["cookiebuilder"]]],[11,"secure","","Sets the `secure` field in the cookie being built.",2,[[["self"],["bool"]],["cookiebuilder"]]],[11,"http_only","","Sets the `http_only` field in the cookie being built.",2,[[["self"],["bool"]],["cookiebuilder"]]],[11,"same_site","","Sets the `same_site` field in the cookie being built.",2,[[["self"],["samesite"]],["cookiebuilder"]]],[11,"permanent","","Makes the cookie being built 'permanent' by extending its expiration and max age 20 years into the future.",2,[[["self"]],["cookiebuilder"]]],[11,"finish","","Finishes building and returns the built `Cookie`.",2,[[["self"]],["cookie"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",0,[[["self"],["parseerror"]],["bool"]]],[11,"clone","","",0,[[["self"]],["parseerror"]]],[11,"as_str","","Returns a description of this error as a string",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["utf8error"]],["parseerror"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"default","","",3,[[],["cookiejar"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["cookiejar"]]],[11,"new","","Creates an empty cookie jar.",3,[[],["cookiejar"]]],[11,"get","","Returns a reference to the `Cookie` inside this jar with the name `name`. If no such cookie exists, returns `None`.",3,[[["self"],["str"]],["option",["cookie"]]]],[11,"add_original","","Adds an \"original\" `cookie` to this jar. Adding an original cookie does not affect the delta computation. This method is intended to be used to seed the cookie jar with cookies received from a client's HTTP message.",3,[[["self"],["cookie"]]]],[11,"add","","Adds `cookie` to this jar.",3,[[["self"],["cookie"]]]],[11,"remove","","Removes `cookie` from this jar. If an original cookie with the same name as `cookie` is present in the jar, a removal cookie will be present in the `delta` computation. To properly generate the removal cookie, `cookie` must contain the same `path` and `domain` as the cookie that was initially set.",3,[[["self"],["cookie"]]]],[11,"clear","","Removes all cookies from this cookie jar.",3,[[["self"]]]],[11,"delta","","Returns an iterator over cookies that represent the changes to this jar over time. These cookies can be rendered directly as `Set-Cookie` header values to affect the changes made to this jar on the client.",3,[[["self"]],["delta"]]],[11,"iter","","Returns an iterator over all of the cookies present in this jar.",3,[[["self"]],["iter"]]],[11,"private","","Returns a `PrivateJar` with `self` as its parent jar using the key `key` to sign/encrypt and verify/decrypt cookies added/retrieved from the child jar.",3,[[["self"],["key"]],["privatejar"]]],[11,"signed","","Returns a `SignedJar` with `self` as its parent jar using the key `key` to sign/verify cookies added/retrieved from the child jar.",3,[[["self"],["key"]],["signedjar"]]],[11,"next","","",4,[[["self"]],["option",["cookie"]]]],[11,"next","","",5,[[["self"]],["option",["cookie"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["samesite"]]],[11,"eq","","",1,[[["self"],["samesite"]],["bool"]]],[11,"hash","","",1,N],[11,"is_strict","","Returns `true` if `self` is `SameSite::Strict` and `false` otherwise.",1,[[["self"]],["bool"]]],[11,"is_lax","","Returns `true` if `self` is `SameSite::Lax` and `false` otherwise.",1,[[["self"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"get","","Returns a reference to the `Cookie` inside this jar with the name `name` and authenticates and decrypts the cookie's value, returning a `Cookie` with the decrypted value. If the cookie cannot be found, or the cookie fails to authenticate or decrypt, `None` is returned.",6,[[["self"],["str"]],["option",["cookie"]]]],[11,"add","","Adds `cookie` to the parent jar. The cookie's value is encrypted with authenticated encryption assuring confidentiality, integrity, and authenticity.",6,[[["self"],["cookie"]]]],[11,"remove","","Removes `cookie` from the parent jar.",6,[[["self"],["cookie"]]]],[11,"get","","Returns a reference to the `Cookie` inside this jar with the name `name` and verifies the authenticity and integrity of the cookie's value, returning a `Cookie` with the authenticated value. If the cookie cannot be found, or the cookie fails to verify, `None` is returned.",7,[[["self"],["str"]],["option",["cookie"]]]],[11,"add","","Adds `cookie` to the parent jar. The cookie's value is signed assuring integrity and authenticity.",7,[[["self"],["cookie"]]]],[11,"remove","","Removes `cookie` from the parent jar.",7,[[["self"],["cookie"]]]],[11,"clone","","",8,[[["self"]],["key"]]],[11,"from_master","","Derives new signing/encryption keys from a master key.",8,N],[11,"generate","","Generates signing/encryption keys from a secure, random source. Keys are generated nondeterministically.",8,[[],["key"]]],[11,"try_generate","","Attempts to generate signing/encryption keys from a secure, random source. Keys are generated nondeterministically. If randomness cannot be retrieved from the underlying operating system, returns `None`.",8,[[],["option",["key"]]]],[11,"signing","","Returns the raw bytes of a key suitable for signing cookies.",8,N],[11,"encryption","","Returns the raw bytes of a key suitable for encrypting cookies.",8,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["cookie"]]],[11,"new","","Creates a new `Cookie` with the given name and value.",9,[[["n"],["v"]],["cookie"]]],[11,"named","","Creates a new `Cookie` with the given name and an empty value.",9,[[["n"]],["cookie"]]],[11,"build","","Creates a new `CookieBuilder` instance from the given key and value strings.",9,[[["n"],["v"]],["cookiebuilder"]]],[11,"parse","","Parses a `Cookie` from the given HTTP cookie header value string. Does not perform any percent-decoding.",9,[[["s"]],["result",["cookie","parseerror"]]]],[11,"parse_encoded","","Parses a `Cookie` from the given HTTP cookie header value string where the name and value fields are percent-encoded. Percent-decodes the name/value fields.",9,[[["s"]],["result",["cookie","parseerror"]]]],[11,"encoded","","Wraps `self` in an `EncodedCookie`: a cost-free wrapper around `Cookie` whose `Display` implementation percent-encodes the name and value of the wrapped `Cookie`.",9,[[["self"]],["encodedcookie"]]],[11,"into_owned","","Converts `self` into a `Cookie` with a static lifetime. This method results in at most one allocation.",9,[[["self"]],["cookie"]]],[11,"name","","Returns the name of `self`.",9,[[["self"]],["str"]]],[11,"value","","Returns the value of `self`.",9,[[["self"]],["str"]]],[11,"name_value","","Returns the name and value of `self` as a tuple of `(name, value)`.",9,N],[11,"http_only","","Returns whether this cookie was marked `HttpOnly` or not.",9,[[["self"]],["bool"]]],[11,"secure","","Returns whether this cookie was marked `Secure` or not.",9,[[["self"]],["bool"]]],[11,"same_site","","Returns the `SameSite` attribute of this cookie if one was specified.",9,[[["self"]],["option",["samesite"]]]],[11,"max_age","","Returns the specified max-age of the cookie if one was specified.",9,[[["self"]],["option",["duration"]]]],[11,"path","","Returns the `Path` of the cookie if one was specified.",9,[[["self"]],["option",["str"]]]],[11,"domain","","Returns the `Domain` of the cookie if one was specified.",9,[[["self"]],["option",["str"]]]],[11,"expires","","Returns the `Expires` time of the cookie if one was specified.",9,[[["self"]],["option",["tm"]]]],[11,"set_name","","Sets the name of `self` to `name`.",9,[[["self"],["n"]]]],[11,"set_value","","Sets the value of `self` to `value`.",9,[[["self"],["v"]]]],[11,"set_http_only","","Sets the value of `http_only` in `self` to `value`.",9,[[["self"],["bool"]]]],[11,"set_secure","","Sets the value of `secure` in `self` to `value`.",9,[[["self"],["bool"]]]],[11,"set_same_site","","Sets the value of `same_site` in `self` to `value`.",9,[[["self"],["samesite"]]]],[11,"set_max_age","","Sets the value of `max_age` in `self` to `value`.",9,[[["self"],["duration"]]]],[11,"set_path","","Sets the `path` of `self` to `path`.",9,[[["self"],["p"]]]],[11,"set_domain","","Sets the `domain` of `self` to `domain`.",9,[[["self"],["d"]]]],[11,"set_expires","","Sets the expires field of `self` to `time`.",9,[[["self"],["tm"]]]],[11,"make_permanent","","Makes `self` a \"permanent\" cookie by extending its expiration and max age 20 years into the future.",9,[[["self"]]]],[11,"name_raw","","Returns the name of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, returns `None`.",9,[[["self"]],["option",["str"]]]],[11,"value_raw","","Returns the value of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, returns `None`.",9,[[["self"]],["option",["str"]]]],[11,"path_raw","","Returns the `Path` of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, or if `self` doesn't contain a `Path`, or if the `Path` has changed since parsing, returns `None`.",9,[[["self"]],["option",["str"]]]],[11,"domain_raw","","Returns the `Domain` of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, or if `self` doesn't contain a `Domain`, or if the `Domain` has changed since parsing, returns `None`.",9,[[["self"]],["option",["str"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Formats the cookie `self` as a `Set-Cookie` header value.",9,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",9,[[["str"]],["result",["cookie","parseerror"]]]],[11,"eq","","",9,[[["self"],["cookie"]],["bool"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[4,"ParseError"],[4,"SameSite"],[3,"CookieBuilder"],[3,"CookieJar"],[3,"Delta"],[3,"Iter"],[3,"PrivateJar"],[3,"SignedJar"],[3,"Key"],[3,"Cookie"],[3,"EncodedCookie"]]};
searchIndex["crypto"]={"doc":"","items":[[0,"aead","crypto","",N,N],[8,"AeadEncryptor","crypto::aead","",N,N],[10,"encrypt","","",0,N],[8,"AeadDecryptor","","",N,N],[10,"decrypt","","",1,N],[0,"aes","crypto","",N,N],[4,"KeySize","crypto::aes","AES key size",N,N],[13,"KeySize128","","",2,N],[13,"KeySize192","","",2,N],[13,"KeySize256","","",2,N],[5,"ecb_encryptor","","Get the best implementation of an EcbEncryptor",N,N],[5,"ecb_decryptor","","Get the best implementation of an EcbDecryptor",N,N],[5,"cbc_encryptor","","Get the best implementation of a CbcEncryptor",N,N],[5,"cbc_decryptor","","Get the best implementation of a CbcDecryptor",N,N],[5,"ctr","","Get the best implementation of a Ctr",N,N],[11,"clone","","",2,[[["self"]],["keysize"]]],[0,"aes_gcm","crypto","",N,N],[3,"AesGcm","crypto::aes_gcm","",N,N],[11,"new","","",3,N],[11,"encrypt","","",3,N],[11,"decrypt","","",3,N],[0,"aessafe","crypto","The `aessafe` module implements the AES algorithm completely in software without using any table lookups or other timing dependant mechanisms. This module actually contains two seperate implementations - an implementation that works on a single block at a time and a second implementation that processes 8 blocks in parallel. Some block encryption modes really only work if you are processing a single blocks (CFB, OFB, and CBC encryption for example) while other modes are trivially parallelizable (CTR and CBC decryption). Processing more blocks at once allows for greater efficiency, especially when using wide registers, such as the XMM registers available in x86 processors.",N,N],[3,"AesSafe128Encryptor","crypto::aessafe","",N,N],[3,"AesSafe128Decryptor","","",N,N],[3,"AesSafe192Encryptor","","",N,N],[3,"AesSafe192Decryptor","","",N,N],[3,"AesSafe256Encryptor","","",N,N],[3,"AesSafe256Decryptor","","",N,N],[3,"AesSafe128EncryptorX8","","",N,N],[3,"AesSafe128DecryptorX8","","",N,N],[3,"AesSafe192EncryptorX8","","",N,N],[3,"AesSafe192DecryptorX8","","",N,N],[3,"AesSafe256EncryptorX8","","",N,N],[3,"AesSafe256DecryptorX8","","",N,N],[11,"clone","","",4,[[["self"]],["aessafe128encryptor"]]],[11,"clone","","",5,[[["self"]],["aessafe128decryptor"]]],[11,"new","","",4,N],[11,"new","","",5,N],[11,"block_size","","",4,[[["self"]],["usize"]]],[11,"encrypt_block","","",4,N],[11,"block_size","","",5,[[["self"]],["usize"]]],[11,"decrypt_block","","",5,N],[11,"clone","","",6,[[["self"]],["aessafe192encryptor"]]],[11,"clone","","",7,[[["self"]],["aessafe192decryptor"]]],[11,"new","","",6,N],[11,"new","","",7,N],[11,"block_size","","",6,[[["self"]],["usize"]]],[11,"encrypt_block","","",6,N],[11,"block_size","","",7,[[["self"]],["usize"]]],[11,"decrypt_block","","",7,N],[11,"clone","","",8,[[["self"]],["aessafe256encryptor"]]],[11,"clone","","",9,[[["self"]],["aessafe256decryptor"]]],[11,"new","","",8,N],[11,"new","","",9,N],[11,"block_size","","",8,[[["self"]],["usize"]]],[11,"encrypt_block","","",8,N],[11,"block_size","","",9,[[["self"]],["usize"]]],[11,"decrypt_block","","",9,N],[11,"clone","","",10,[[["self"]],["aessafe128encryptorx8"]]],[11,"clone","","",11,[[["self"]],["aessafe128decryptorx8"]]],[11,"new","","",10,N],[11,"new","","",11,N],[11,"block_size","","",10,[[["self"]],["usize"]]],[11,"encrypt_block_x8","","",10,N],[11,"block_size","","",11,[[["self"]],["usize"]]],[11,"decrypt_block_x8","","",11,N],[11,"clone","","",12,[[["self"]],["aessafe192encryptorx8"]]],[11,"clone","","",13,[[["self"]],["aessafe192decryptorx8"]]],[11,"new","","",12,N],[11,"new","","",13,N],[11,"block_size","","",12,[[["self"]],["usize"]]],[11,"encrypt_block_x8","","",12,N],[11,"block_size","","",13,[[["self"]],["usize"]]],[11,"decrypt_block_x8","","",13,N],[11,"clone","","",14,[[["self"]],["aessafe256encryptorx8"]]],[11,"clone","","",15,[[["self"]],["aessafe256decryptorx8"]]],[11,"new","","",14,N],[11,"new","","",15,N],[11,"block_size","","",14,[[["self"]],["usize"]]],[11,"encrypt_block_x8","","",14,N],[11,"block_size","","",15,[[["self"]],["usize"]]],[11,"decrypt_block_x8","","",15,N],[0,"bcrypt","crypto","",N,N],[5,"bcrypt","crypto::bcrypt","",N,N],[0,"bcrypt_pbkdf","crypto","",N,N],[5,"bcrypt_pbkdf","crypto::bcrypt_pbkdf","",N,N],[0,"blake2b","crypto","",N,N],[3,"Blake2b","crypto::blake2b","",N,N],[11,"clone","","",16,[[["self"]],["blake2b"]]],[11,"new","","",16,[[["usize"]],["blake2b"]]],[11,"new_keyed","","",16,N],[11,"reset","","",16,[[["self"]]]],[11,"blake2b","","",16,N],[11,"reset","","",16,[[["self"]]]],[11,"input","","",16,N],[11,"result","","",16,N],[11,"output_bits","","",16,[[["self"]],["usize"]]],[11,"block_size","","",16,[[["self"]],["usize"]]],[11,"input","","Process input data.",16,N],[11,"reset","","Reset the Mac state to begin processing another input stream.",16,[[["self"]]]],[11,"result","","Obtain the result of a Mac computation as a MacResult.",16,[[["self"]],["macresult"]]],[11,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully since incorrect use of the Mac code could result in permitting a timing attack which defeats the security provided by a Mac function.",16,N],[11,"output_bytes","","Get the size of the Mac code, in bytes.",16,[[["self"]],["usize"]]],[0,"blake2s","crypto","",N,N],[3,"Blake2s","crypto::blake2s","",N,N],[11,"clone","","",17,[[["self"]],["blake2s"]]],[11,"new","","",17,[[["usize"]],["blake2s"]]],[11,"new_keyed","","",17,N],[11,"reset","","",17,[[["self"]]]],[11,"blake2s","","",17,N],[11,"reset","","",17,[[["self"]]]],[11,"input","","",17,N],[11,"result","","",17,N],[11,"output_bits","","",17,[[["self"]],["usize"]]],[11,"block_size","","",17,[[["self"]],["usize"]]],[11,"input","","Process input data.",17,N],[11,"reset","","Reset the Mac state to begin processing another input stream.",17,[[["self"]]]],[11,"result","","Obtain the result of a Mac computation as a MacResult.",17,[[["self"]],["macresult"]]],[11,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully since incorrect use of the Mac code could result in permitting a timing attack which defeats the security provided by a Mac function.",17,N],[11,"output_bytes","","Get the size of the Mac code, in bytes.",17,[[["self"]],["usize"]]],[0,"blockmodes","crypto","",N,N],[3,"NoPadding","crypto::blockmodes","No padding mode for ECB and CBC encryption",N,N],[3,"PkcsPadding","","PKCS padding mode for ECB and CBC encryption",N,N],[3,"EncPadding","","Wraps a PaddingProcessor so that only pad_input() will actually be called.",N,N],[3,"DecPadding","","Wraps a PaddingProcessor so that only strip_output() will actually be called.",N,N],[3,"EcbEncryptor","","ECB Encryption mode",N,N],[3,"EcbDecryptor","","ECB Decryption mode",N,N],[3,"CbcEncryptor","","CBC encryption mode",N,N],[3,"CbcDecryptor","","CBC decryption mode",N,N],[3,"CtrMode","","CTR Mode",N,N],[3,"CtrModeX8","","CTR Mode that operates on 8 blocks at a time",N,N],[8,"PaddingProcessor","","A PaddingProcessor handles adding or removing padding",N,N],[10,"pad_input","","Add padding to the last block of input data If the mode can't handle a non-full block, it signals that error by simply leaving the block as it is which will be detected as an InvalidLength error.",18,[[["self"],["w"]]]],[10,"strip_output","","Remove padding from the last block of output data If false is returned, the processing fails",18,[[["self"],["r"]],["bool"]]],[11,"clone","","",19,[[["self"]],["nopadding"]]],[11,"pad_input","","",19,[[["self"],["w"]]]],[11,"strip_output","","",19,[[["self"],["r"]],["bool"]]],[11,"clone","","",20,[[["self"]],["pkcspadding"]]],[11,"pad_input","","",20,[[["self"],["w"]]]],[11,"strip_output","","",20,[[["self"],["r"]],["bool"]]],[11,"pad_input","","",21,[[["self"],["w"]]]],[11,"strip_output","","",21,[[["self"],["r"]],["bool"]]],[11,"pad_input","","",22,[[["self"],["w"]]]],[11,"strip_output","","",22,[[["self"],["r"]],["bool"]]],[11,"new","","Create a new ECB encryption mode object",23,[[["t"],["x"]],["ecbencryptor",["encpadding"]]]],[11,"reset","","",23,[[["self"]]]],[11,"encrypt","","",23,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"new","","Create a new ECB decryption mode object",24,[[["t"],["x"]],["ecbdecryptor",["decpadding"]]]],[11,"reset","","",24,[[["self"]]]],[11,"decrypt","","",24,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"new","","Create a new CBC encryption mode object",25,[[["t"],["x"],["vec",["u8"]]],["cbcencryptor",["encpadding"]]]],[11,"reset","","",25,N],[11,"encrypt","","",25,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"new","","Create a new CBC decryption mode object",26,[[["t"],["x"],["vec",["u8"]]],["cbcdecryptor",["decpadding"]]]],[11,"reset","","",26,N],[11,"decrypt","","",26,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"new","","Create a new CTR object",27,[[["a"],["vec",["u8"]]],["ctrmode"]]],[11,"reset","","",27,N],[11,"process","","",27,N],[11,"encrypt","","",27,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"decrypt","","",27,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"new","","Create a new CTR object that operates on 8 blocks at a time",28,N],[11,"reset","","",28,N],[11,"process","","",28,N],[11,"encrypt","","",28,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"decrypt","","",28,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[0,"blowfish","crypto","",N,N],[3,"Blowfish","crypto::blowfish","",N,N],[11,"clone","","",29,[[["self"]],["blowfish"]]],[11,"new","","",29,N],[11,"init_state","","",29,[[],["blowfish"]]],[11,"expand_key","","",29,N],[11,"salted_expand_key","","",29,N],[11,"encrypt","","",29,N],[11,"block_size","","",29,[[["self"]],["usize"]]],[11,"encrypt_block","","",29,N],[11,"block_size","","",29,[[["self"]],["usize"]]],[11,"decrypt_block","","",29,N],[0,"buffer","crypto","",N,N],[3,"RefReadBuffer","crypto::buffer","",N,N],[3,"OwnedReadBuffer","","",N,N],[3,"RefWriteBuffer","","",N,N],[3,"BorrowedWriteBuffer","","",N,N],[3,"OwnedWriteBuffer","","",N,N],[4,"BufferResult","","",N,N],[13,"BufferUnderflow","","",30,N],[13,"BufferOverflow","","",30,N],[8,"ReadBuffer","","",N,N],[10,"is_empty","","",31,[[["self"]],["bool"]]],[10,"is_full","","",31,[[["self"]],["bool"]]],[10,"remaining","","",31,[[["self"]],["usize"]]],[10,"capacity","","",31,[[["self"]],["usize"]]],[11,"position","","",31,[[["self"]],["usize"]]],[10,"rewind","","",31,[[["self"],["usize"]]]],[10,"truncate","","",31,[[["self"],["usize"]]]],[10,"reset","","",31,[[["self"]]]],[10,"peek_next","","",31,N],[11,"peek_remaining","","",31,N],[10,"take_next","","",31,N],[11,"take_remaining","","",31,N],[11,"push_to","","",31,[[["self"],["w"]]]],[8,"WriteBuffer","","",N,N],[10,"is_empty","","",32,[[["self"]],["bool"]]],[10,"is_full","","",32,[[["self"]],["bool"]]],[10,"remaining","","",32,[[["self"]],["usize"]]],[10,"capacity","","",32,[[["self"]],["usize"]]],[11,"position","","",32,[[["self"]],["usize"]]],[10,"rewind","","",32,[[["self"],["usize"]]]],[10,"reset","","",32,[[["self"]]]],[10,"peek_read_buffer","","",32,[[["self"]],["refreadbuffer"]]],[10,"take_next","","",32,N],[11,"take_remaining","","",32,N],[10,"take_read_buffer","","",32,[[["self"]],["refreadbuffer"]]],[11,"clone","","",30,[[["self"]],["bufferresult"]]],[11,"new","","",33,N],[11,"is_empty","","",33,[[["self"]],["bool"]]],[11,"is_full","","",33,[[["self"]],["bool"]]],[11,"remaining","","",33,[[["self"]],["usize"]]],[11,"capacity","","",33,[[["self"]],["usize"]]],[11,"rewind","","",33,[[["self"],["usize"]]]],[11,"truncate","","",33,[[["self"],["usize"]]]],[11,"reset","","",33,[[["self"]]]],[11,"peek_next","","",33,N],[11,"take_next","","",33,N],[11,"new","","",34,[[["vec",["u8"]]],["ownedreadbuffer"]]],[11,"new_with_len","","",34,[[["vec",["u8"]],["usize"]],["ownedreadbuffer"]]],[11,"into_write_buffer","","",34,[[["self"]],["ownedwritebuffer"]]],[11,"borrow_write_buffer","","",34,[[["self"]],["borrowedwritebuffer"]]],[11,"is_empty","","",34,[[["self"]],["bool"]]],[11,"is_full","","",34,[[["self"]],["bool"]]],[11,"remaining","","",34,[[["self"]],["usize"]]],[11,"capacity","","",34,[[["self"]],["usize"]]],[11,"rewind","","",34,[[["self"],["usize"]]]],[11,"truncate","","",34,[[["self"],["usize"]]]],[11,"reset","","",34,[[["self"]]]],[11,"peek_next","","",34,N],[11,"take_next","","",34,N],[11,"new","","",35,N],[11,"is_empty","","",35,[[["self"]],["bool"]]],[11,"is_full","","",35,[[["self"]],["bool"]]],[11,"remaining","","",35,[[["self"]],["usize"]]],[11,"capacity","","",35,[[["self"]],["usize"]]],[11,"rewind","","",35,[[["self"],["usize"]]]],[11,"reset","","",35,[[["self"]]]],[11,"peek_read_buffer","","",35,[[["self"]],["refreadbuffer"]]],[11,"take_next","","",35,N],[11,"take_read_buffer","","",35,[[["self"]],["refreadbuffer"]]],[11,"is_empty","","",36,[[["self"]],["bool"]]],[11,"is_full","","",36,[[["self"]],["bool"]]],[11,"remaining","","",36,[[["self"]],["usize"]]],[11,"capacity","","",36,[[["self"]],["usize"]]],[11,"rewind","","",36,[[["self"],["usize"]]]],[11,"reset","","",36,[[["self"]]]],[11,"peek_read_buffer","","",36,[[["self"]],["refreadbuffer"]]],[11,"take_next","","",36,N],[11,"take_read_buffer","","",36,[[["self"]],["refreadbuffer"]]],[11,"new","","",37,[[["vec",["u8"]]],["ownedwritebuffer"]]],[11,"into_read_buffer","","",37,[[["self"]],["ownedreadbuffer"]]],[11,"is_empty","","",37,[[["self"]],["bool"]]],[11,"is_full","","",37,[[["self"]],["bool"]]],[11,"remaining","","",37,[[["self"]],["usize"]]],[11,"capacity","","",37,[[["self"]],["usize"]]],[11,"rewind","","",37,[[["self"],["usize"]]]],[11,"reset","","",37,[[["self"]]]],[11,"peek_read_buffer","","",37,[[["self"]],["refreadbuffer"]]],[11,"take_next","","",37,N],[11,"take_read_buffer","","",37,[[["self"]],["refreadbuffer"]]],[0,"chacha20","crypto","",N,N],[3,"ChaCha20","crypto::chacha20","",N,N],[11,"clone","","",38,[[["self"]],["chacha20"]]],[11,"new","","",38,N],[11,"new_xchacha20","","",38,N],[11,"process","","",38,N],[11,"encrypt","","",38,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"decrypt","","",38,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[0,"chacha20poly1305","crypto","",N,N],[3,"ChaCha20Poly1305","crypto::chacha20poly1305","",N,N],[11,"clone","","",39,[[["self"]],["chacha20poly1305"]]],[11,"new","","",39,N],[11,"encrypt","","",39,N],[11,"decrypt","","",39,N],[0,"curve25519","crypto","",N,N],[3,"Fe","crypto::curve25519","",N,N],[12,"0","","",40,N],[3,"GeP2","","",N,N],[3,"GeP3","","",N,N],[3,"GeP1P1","","",N,N],[3,"GePrecomp","","",N,N],[3,"GeCached","","",N,N],[5,"ge_scalarmult_base","","",N,N],[5,"sc_reduce","","",N,N],[5,"sc_muladd","","",N,N],[5,"curve25519","","",N,N],[5,"curve25519_base","","",N,N],[11,"clone","","",40,[[["self"]],["fe"]]],[11,"eq","","",40,[[["self"],["fe"]],["bool"]]],[11,"add","","",40,[[["self"],["fe"]],["fe"]]],[11,"sub","","",40,[[["self"],["fe"]],["fe"]]],[11,"mul","","",40,[[["self"],["fe"]],["fe"]]],[11,"from_bytes","","",40,N],[11,"to_bytes","","",40,N],[11,"maybe_swap_with","","",40,[[["self"],["fe"],["i32"]]]],[11,"maybe_set","","",40,[[["self"],["fe"],["i32"]]]],[11,"invert","","",40,[[["self"]],["fe"]]],[11,"clone","","",41,[[["self"]],["gep2"]]],[11,"clone","","",42,[[["self"]],["gep3"]]],[11,"clone","","",43,[[["self"]],["gep1p1"]]],[11,"clone","","",44,[[["self"]],["geprecomp"]]],[11,"clone","","",45,[[["self"]],["gecached"]]],[11,"to_bytes","","",41,N],[11,"double_scalarmult_vartime","","",41,N],[11,"from_bytes_negate_vartime","","",42,N],[11,"to_bytes","","",42,N],[11,"add","","",42,[[["self"],["gecached"]],["gep1p1"]]],[11,"add","","",42,[[["self"],["geprecomp"]],["gep1p1"]]],[11,"sub","","",42,[[["self"],["gecached"]],["gep1p1"]]],[11,"sub","","",42,[[["self"],["geprecomp"]],["gep1p1"]]],[11,"maybe_set","","",44,[[["self"],["geprecomp"],["i32"]]]],[11,"select","","",44,[[["usize"],["i8"]],["geprecomp"]]],[0,"digest","crypto","",N,N],[8,"Digest","crypto::digest","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2 family of digest functions.",N,N],[10,"input","","Provide message data.",46,N],[10,"result","","Retrieve the digest result. This method may be called multiple times.",46,N],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more data.",46,[[["self"]]]],[10,"output_bits","","Get the output size in bits.",46,[[["self"]],["usize"]]],[11,"output_bytes","","Get the output size in bytes.",46,[[["self"]],["usize"]]],[10,"block_size","","Get the block size in bytes.",46,[[["self"]],["usize"]]],[11,"input_str","","Convenience function that feeds a string into a digest.",46,[[["self"],["str"]]]],[11,"result_str","","Convenience function that retrieves the result of a digest as a String in hexadecimal format.",46,[[["self"]],["string"]]],[0,"ed25519","crypto","",N,N],[5,"keypair","crypto::ed25519","",N,N],[5,"signature","","",N,N],[5,"verify","","",N,N],[5,"exchange","","",N,N],[0,"fortuna","crypto","An implementation of the Fortuna CSPRNG",N,N],[3,"Fortuna","crypto::fortuna","The `Fortuna` CSPRNG (PC 9.5)",N,N],[17,"MIN_POOL_SIZE","","Length in bytes that the first pool must be before a \"catastrophic reseed\" is allowed to happen. (A direct reseed through the `SeedableRng` API is not affected by this limit.)",N,N],[11,"new_unseeded","","Creates a new unseeded `Fortuna` (PC 9.5.4)",47,[[],["fortuna"]]],[11,"add_random_event","","Adds a random event `e` from source `s` to entropy pool `i` (PC 9.5.6)",47,N],[11,"fill_bytes","","Generate a bunch of random data into `dest` (PC 9.5.5)",47,N],[11,"next_u32","","",47,[[["self"]],["u32"]]],[11,"from_seed","","",47,N],[11,"reseed","","",47,N],[0,"ghash","crypto","",N,N],[3,"Ghash","crypto::ghash","A structure representing the state of a GHASH computation",N,N],[3,"GhashWithC","","A structure representing the state of a GHASH computation, after input for C was provided",N,N],[11,"clone","","",48,[[["self"]],["ghash"]]],[11,"clone","","",49,[[["self"]],["ghashwithc"]]],[11,"new","","Creates a new GHASH state, with `h` as the key",48,N],[11,"input_a","","Feeds data for GHASH's A input",48,N],[11,"input_c","","Feeds data for GHASH's C input",48,N],[11,"result","","Retrieve the digest result",48,N],[11,"input_c","","Feeds data for GHASH's C input",49,N],[11,"result","","Retrieve the digest result",49,N],[11,"input","","",48,N],[11,"reset","","",48,[[["self"]]]],[11,"result","","",48,[[["self"]],["macresult"]]],[11,"raw_result","","",48,N],[11,"output_bytes","","",48,[[["self"]],["usize"]]],[0,"hc128","crypto","",N,N],[3,"Hc128","crypto::hc128","",N,N],[11,"clone","","",50,[[["self"]],["hc128"]]],[11,"new","","",50,N],[11,"process","","",50,N],[11,"encrypt","","",50,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"decrypt","","",50,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[0,"hmac","crypto","This module implements the Hmac function - a Message Authentication Code using a Digest.",N,N],[3,"Hmac","crypto::hmac","The Hmac struct represents an Hmac function - a Message Authentication Code using a Digest.",N,N],[11,"new","","Create a new Hmac instance.",51,N],[11,"input","","",51,N],[11,"reset","","",51,[[["self"]]]],[11,"result","","",51,[[["self"]],["macresult"]]],[11,"raw_result","","",51,N],[11,"output_bytes","","",51,[[["self"]],["usize"]]],[0,"hkdf","crypto","This module implements the HMAC-based Extract-and-Expand Key Derivation Function as specified by  https://tools.ietf.org/html/rfc5869.",N,N],[5,"hkdf_extract","crypto::hkdf","Execute the HKDF-Extract function.  Applications MUST NOT use this for password hashing.",N,N],[5,"hkdf_expand","","Execute the HKDF-Expand function.  Applications MUST NOT use this for password hashing.",N,N],[0,"mac","crypto","The mac module defines the Message Authentication Code (Mac) trait.",N,N],[3,"MacResult","crypto::mac","A MacResult wraps a Mac code and provides a safe Eq implementation that runs in fixed time.",N,N],[8,"Mac","","The Mac trait defines methods for a Message Authentication function.",N,N],[10,"input","","Process input data.",52,N],[10,"reset","","Reset the Mac state to begin processing another input stream.",52,[[["self"]]]],[10,"result","","Obtain the result of a Mac computation as a MacResult.",52,[[["self"]],["macresult"]]],[10,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully since incorrect use of the Mac code could result in permitting a timing attack which defeats the security provided by a Mac function.",52,N],[10,"output_bytes","","Get the size of the Mac code, in bytes.",52,[[["self"]],["usize"]]],[11,"new","","Create a new MacResult.",53,N],[11,"new_from_owned","","Create a new MacResult taking ownership of the specified code value.",53,[[["vec",["u8"]]],["macresult"]]],[11,"code","","Get the code value. Be very careful using this method, since incorrect use of the code value may permit timing attacks which defeat the security provided by the Mac function.",53,N],[11,"eq","","",53,[[["self"],["macresult"]],["bool"]]],[0,"md5","crypto","",N,N],[3,"Md5","crypto::md5","The MD5 Digest algorithm",N,N],[11,"clone","","",54,[[["self"]],["md5"]]],[11,"new","","Construct a new instance of the MD5 Digest.",54,[[],["md5"]]],[11,"input","","",54,N],[11,"reset","","",54,[[["self"]]]],[11,"result","","",54,N],[11,"output_bits","","",54,[[["self"]],["usize"]]],[11,"block_size","","",54,[[["self"]],["usize"]]],[0,"pbkdf2","crypto","This module implements the PBKDF2 Key Derivation Function as specified by http://tools.ietf.org/html/rfc2898.",N,N],[5,"pbkdf2","crypto::pbkdf2","Execute the PBKDF2 Key Derivation Function. The Scrypt Key Derivation Function generally provides better security, so, applications that do not have a requirement to use PBKDF2 specifically should consider using that function instead.",N,N],[5,"pbkdf2_simple","","pbkdf2_simple is a helper function that should be sufficient for the majority of cases where an application needs to use PBKDF2 to hash a password for storage. The result is a String that contains the parameters used as part of its encoding. The pbkdf2_check function may be used on a password to check if it is equal to a hashed value.",N,[[["str"],["u32"]],["result",["string"]]]],[5,"pbkdf2_check","","pbkdf2_check compares a password against the result of a previous call to pbkdf2_simple and returns true if the passed in password hashes to the same value.",N,[[["str"],["str"]],["result",["bool","str"]]]],[0,"poly1305","crypto","",N,N],[3,"Poly1305","crypto::poly1305","",N,N],[11,"clone","","",55,[[["self"]],["poly1305"]]],[11,"new","","",55,N],[11,"input","","",55,N],[11,"reset","","",55,[[["self"]]]],[11,"result","","",55,[[["self"]],["macresult"]]],[11,"raw_result","","",55,N],[11,"output_bytes","","",55,[[["self"]],["usize"]]],[0,"rc4","crypto","An implementation of the RC4 (also sometimes called ARC4) stream cipher. THIS IMPLEMENTATION IS NOT A FIXED TIME IMPLEMENTATION.",N,N],[3,"Rc4","crypto::rc4","",N,N],[11,"clone","","",56,[[["self"]],["rc4"]]],[11,"new","","",56,N],[11,"process","","",56,N],[11,"encrypt","","",56,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"decrypt","","",56,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[0,"ripemd160","crypto","An implementation of the RIPEMD-160 cryptographic hash.",N,N],[3,"Ripemd160","crypto::ripemd160","Structure representing the state of a Ripemd160 computation",N,N],[11,"clone","","",57,[[["self"]],["ripemd160"]]],[11,"new","","",57,[[],["ripemd160"]]],[11,"reset","","Resets the hash to its original state also clearing the buffer. To be used in between hashing separate messages to avoid having to recreate and allocate the whole structure.",57,[[["self"]]]],[11,"input","","Adds the input `msg` to the hash. This method can be called repeatedly for use with streaming messages.",57,N],[11,"result","","Returns the resulting digest of the entire message. Note: `out` must be at least 20 bytes (160 bits)",57,N],[11,"output_bits","","Returns the size of the digest in bits",57,[[["self"]],["usize"]]],[11,"block_size","","Returns the block size the hash operates on in bytes",57,[[["self"]],["usize"]]],[0,"salsa20","crypto","",N,N],[3,"Salsa20","crypto::salsa20","",N,N],[5,"hsalsa20","","",N,N],[11,"clone","","",58,[[["self"]],["salsa20"]]],[11,"new","","",58,N],[11,"new_xsalsa20","","",58,N],[11,"process","","",58,N],[11,"encrypt","","",58,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"decrypt","","",58,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[0,"scrypt","crypto","This module implements the Scrypt key derivation function as specified in [1].",N,N],[3,"ScryptParams","crypto::scrypt","The Scrypt parameter values.",N,N],[5,"scrypt","","The scrypt key derivation function.",N,N],[5,"scrypt_simple","","scrypt_simple is a helper function that should be sufficient for the majority of cases where an application needs to use Scrypt to hash a password for storage. The result is a String that contains the parameters used as part of its encoding. The scrypt_check function may be used on a password to check if it is equal to a hashed value.",N,[[["str"],["scryptparams"]],["result",["string"]]]],[5,"scrypt_check","","scrypt_check compares a password against the result of a previous call to scrypt_simple and returns true if the passed in password hashes to the same value.",N,[[["str"],["str"]],["result",["bool","str"]]]],[11,"clone","","",59,[[["self"]],["scryptparams"]]],[11,"new","","Create a new instance of ScryptParams.",59,[[["u8"],["u32"],["u32"]],["scryptparams"]]],[0,"sha1","crypto","An implementation of the SHA-1 cryptographic hash algorithm.",N,N],[3,"Sha1","crypto::sha1","Structure representing the state of a Sha1 computation",N,N],[5,"sha1_first","","Not an intrinsic, but gets the first element of a vector.",N,[[["u32x4"]],["u32"]]],[5,"sha1_first_add","","Not an intrinsic, but adds a word to the first element of a vector.",N,[[["u32"],["u32x4"]],["u32x4"]]],[5,"sha1_schedule_x4","","Performs 4 rounds of the message schedule update.",N,[[["u32x4"],["u32x4"],["u32x4"],["u32x4"]],["u32x4"]]],[5,"sha1_first_half","","Emulates `llvm.x86.sha1nexte` intrinsic.",N,[[["u32x4"],["u32x4"]],["u32x4"]]],[5,"sha1_digest_round_x4","","Emulates `llvm.x86.sha1rnds4` intrinsic. Performs 4 rounds of the message block digest.",N,[[["u32x4"],["u32x4"],["i8"]],["u32x4"]]],[5,"sha1_digest_block_u32","","Process a block with the SHA-1 algorithm.",N,N],[5,"sha1_digest_block","","Process a block with the SHA-1 algorithm. (See more...)",N,N],[11,"clone","","",60,[[["self"]],["sha1"]]],[11,"new","","Construct a `sha` object",60,[[],["sha1"]]],[11,"reset","","",60,[[["self"]]]],[11,"input","","",60,N],[11,"result","","",60,N],[11,"output_bits","","",60,[[["self"]],["usize"]]],[11,"block_size","","",60,[[["self"]],["usize"]]],[0,"sha2","crypto","An implementation of the SHA-2 cryptographic hash algorithms.",N,N],[3,"Sha512","crypto::sha2","The SHA-512 hash algorithm with the SHA-512 initial hash value.",N,N],[3,"Sha384","","The SHA-512 hash algorithm with the SHA-384 initial hash value. The result is truncated to 384 bits.",N,N],[3,"Sha512Trunc256","","The SHA-512 hash algorithm with the SHA-512/256 initial hash value. The result is truncated to 256 bits.",N,N],[3,"Sha512Trunc224","","The SHA-512 hash algorithm with the SHA-512/224 initial hash value. The result is truncated to 224 bits.",N,N],[3,"Sha256","","The SHA-256 hash algorithm with the SHA-256 initial hash value.",N,N],[3,"Sha224","","The SHA-256 hash algorithm with the SHA-224 initial hash value. The result is truncated to 224 bits.",N,N],[5,"sha256_schedule_x4","","Performs 4 rounds of the SHA-256 message schedule update.",N,[[["u32x4"],["u32x4"],["u32x4"],["u32x4"]],["u32x4"]]],[5,"sha256_digest_round_x2","","Emulates `llvm.x86.sha256rnds2` intrinsic.",N,[[["u32x4"],["u32x4"],["u32x4"]],["u32x4"]]],[5,"sha256_digest_block_u32","","Process a block with the SHA-256 algorithm.",N,N],[5,"sha256_digest_block","","Process a block with the SHA-256 algorithm. (See more...)",N,N],[5,"sha512_schedule_x2","","Performs 2 rounds of the SHA-512 message schedule update.",N,[[["u64x2"],["u64x2"],["u64x2"],["u64x2"]],["u64x2"]]],[5,"sha512_digest_round","","Performs one round of the SHA-512 message block digest.",N,[[["u64x2"],["u64x2"],["u64x2"],["u64x2"],["u64"]],["u64x2"]]],[5,"sha512_digest_block_u64","","Process a block with the SHA-512 algorithm.",N,N],[5,"sha512_digest_block","","Process a block with the SHA-512 algorithm. (See more...)",N,N],[17,"K64","","Constants necessary for SHA-512 family of digests.",N,N],[17,"K64X2","","Constants necessary for SHA-512 family of digests.",N,N],[17,"K32","","Constants necessary for SHA-256 family of digests.",N,N],[17,"K32X4","","Constants necessary for SHA-256 family of digests.",N,N],[11,"clone","","",61,[[["self"]],["sha512"]]],[11,"new","","Construct an new instance of a SHA-512 digest.",61,[[],["sha512"]]],[11,"input","","",61,N],[11,"result","","",61,N],[11,"reset","","",61,[[["self"]]]],[11,"output_bits","","",61,[[["self"]],["usize"]]],[11,"block_size","","",61,[[["self"]],["usize"]]],[11,"clone","","",62,[[["self"]],["sha384"]]],[11,"new","","Construct an new instance of a SHA-384 digest.",62,[[],["sha384"]]],[11,"input","","",62,N],[11,"result","","",62,N],[11,"reset","","",62,[[["self"]]]],[11,"output_bits","","",62,[[["self"]],["usize"]]],[11,"block_size","","",62,[[["self"]],["usize"]]],[11,"clone","","",63,[[["self"]],["sha512trunc256"]]],[11,"new","","Construct an new instance of a SHA-512/256 digest.",63,[[],["sha512trunc256"]]],[11,"input","","",63,N],[11,"result","","",63,N],[11,"reset","","",63,[[["self"]]]],[11,"output_bits","","",63,[[["self"]],["usize"]]],[11,"block_size","","",63,[[["self"]],["usize"]]],[11,"clone","","",64,[[["self"]],["sha512trunc224"]]],[11,"new","","Construct an new instance of a SHA-512/224 digest.",64,[[],["sha512trunc224"]]],[11,"input","","",64,N],[11,"result","","",64,N],[11,"reset","","",64,[[["self"]]]],[11,"output_bits","","",64,[[["self"]],["usize"]]],[11,"block_size","","",64,[[["self"]],["usize"]]],[11,"clone","","",65,[[["self"]],["sha256"]]],[11,"new","","Construct an new instance of a SHA-256 digest.",65,[[],["sha256"]]],[11,"input","","",65,N],[11,"result","","",65,N],[11,"reset","","",65,[[["self"]]]],[11,"output_bits","","",65,[[["self"]],["usize"]]],[11,"block_size","","",65,[[["self"]],["usize"]]],[11,"clone","","",66,[[["self"]],["sha224"]]],[11,"new","","Construct an new instance of a SHA-224 digest.",66,[[],["sha224"]]],[11,"input","","",66,N],[11,"result","","",66,N],[11,"reset","","",66,[[["self"]]]],[11,"output_bits","","",66,[[["self"]],["usize"]]],[11,"block_size","","",66,[[["self"]],["usize"]]],[0,"sha3","crypto","An implementation of the SHA-3 cryptographic hash algorithms.",N,N],[3,"Sha3","crypto::sha3","",N,N],[4,"Sha3Mode","","SHA-3 Modes.",N,N],[13,"Sha3_224","","",67,N],[13,"Sha3_256","","",67,N],[13,"Sha3_384","","",67,N],[13,"Sha3_512","","",67,N],[13,"Shake128","","",67,N],[13,"Shake256","","",67,N],[13,"Keccak224","","",67,N],[13,"Keccak256","","",67,N],[13,"Keccak384","","",67,N],[13,"Keccak512","","",67,N],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"clone","","",67,[[["self"]],["sha3mode"]]],[11,"digest_length","","Return the expected hash size in bytes specified for `mode`, or 0 for modes with variable output as for shake functions.",67,[[["self"]],["usize"]]],[11,"is_shake","","Return `true` if `mode` is a SHAKE mode.",67,[[["self"]],["bool"]]],[11,"is_keccak","","Return `true` if `mode` is a Keccak mode.",67,[[["self"]],["bool"]]],[11,"new","","New SHA-3 instanciated from specified SHA-3 `mode`.",68,[[["sha3mode"]],["sha3"]]],[11,"sha3_224","","New SHA3-224 instance.",68,[[],["sha3"]]],[11,"sha3_256","","New SHA3-256 instance.",68,[[],["sha3"]]],[11,"sha3_384","","New SHA3-384 instance.",68,[[],["sha3"]]],[11,"sha3_512","","New SHA3-512 instance.",68,[[],["sha3"]]],[11,"shake_128","","New SHAKE-128 instance.",68,[[],["sha3"]]],[11,"shake_256","","New SHAKE-256 instance.",68,[[],["sha3"]]],[11,"keccak224","","New Keccak224 instance.",68,[[],["sha3"]]],[11,"keccak256","","New Keccak256 instance.",68,[[],["sha3"]]],[11,"keccak384","","New Keccak384 instance.",68,[[],["sha3"]]],[11,"keccak512","","New Keccak512 instance.",68,[[],["sha3"]]],[11,"input","","",68,N],[11,"result","","",68,N],[11,"reset","","",68,[[["self"]]]],[11,"output_bits","","",68,[[["self"]],["usize"]]],[11,"block_size","","",68,[[["self"]],["usize"]]],[11,"clone","","",68,[[["self"]],["self"]]],[0,"sosemanuk","crypto","",N,N],[3,"Sosemanuk","crypto::sosemanuk","",N,N],[11,"clone","","",69,[[["self"]],["sosemanuk"]]],[11,"new","","",69,N],[11,"process","","",69,N],[11,"encrypt","","",69,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[11,"decrypt","","",69,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[0,"symmetriccipher","crypto","",N,N],[4,"SymmetricCipherError","crypto::symmetriccipher","",N,N],[13,"InvalidLength","","",70,N],[13,"InvalidPadding","","",70,N],[8,"BlockEncryptor","","",N,N],[10,"block_size","","",71,[[["self"]],["usize"]]],[10,"encrypt_block","","",71,N],[8,"BlockEncryptorX8","","",N,N],[10,"block_size","","",72,[[["self"]],["usize"]]],[10,"encrypt_block_x8","","",72,N],[8,"BlockDecryptor","","",N,N],[10,"block_size","","",73,[[["self"]],["usize"]]],[10,"decrypt_block","","",73,N],[8,"BlockDecryptorX8","","",N,N],[10,"block_size","","",74,[[["self"]],["usize"]]],[10,"decrypt_block_x8","","",74,N],[8,"Encryptor","","",N,N],[10,"encrypt","","",75,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[8,"Decryptor","","",N,N],[10,"decrypt","","",76,[[["self"],["refreadbuffer"],["refwritebuffer"],["bool"]],["result",["bufferresult","symmetricciphererror"]]]],[8,"SynchronousStreamCipher","","",N,N],[10,"process","","",77,N],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"clone","","",70,[[["self"]],["symmetricciphererror"]]],[0,"util","crypto","",N,N],[5,"supports_aesni","crypto::util","",N,[[],["bool"]]],[5,"secure_memset","","",N,N],[5,"fixed_time_eq","","Compare two vectors using a fixed number of operations. If the two vectors are not of equal length, the function returns false immediately.",N,N],[5,"rust_crypto_util_supports_aesni","","",N,N],[5,"rust_crypto_util_fixed_time_eq_asm","","",N,N],[5,"rust_crypto_util_secure_memset","","",N,N],[0,"whirlpool","crypto","An implementation of the Whirlpool cryptographic hash algorithm.",N,N],[3,"Whirlpool","crypto::whirlpool","",N,N],[11,"clone","","",78,[[["self"]],["whirlpool"]]],[11,"new","","",78,[[],["whirlpool"]]],[11,"input","","",78,N],[11,"result","","",78,N],[11,"reset","","",78,[[["self"]]]],[11,"output_bits","","",78,[[["self"]],["usize"]]],[11,"block_size","","",78,[[["self"]],["usize"]]],[0,"aesni","crypto","",N,N],[3,"AesNiEncryptor","crypto::aesni","",N,N],[3,"AesNiDecryptor","","",N,N],[11,"clone","","",79,[[["self"]],["aesniencryptor"]]],[11,"clone","","",80,[[["self"]],["aesnidecryptor"]]],[11,"new","","",79,N],[11,"new","","",80,N],[11,"block_size","","",79,[[["self"]],["usize"]]],[11,"encrypt_block","","",79,N],[11,"block_size","","",80,[[["self"]],["usize"]]],[11,"decrypt_block","","",80,N],[11,"from","crypto::aes","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","crypto::aes_gcm","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","crypto::aessafe","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","crypto::blake2b","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","crypto::blake2s","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","crypto::blockmodes","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","crypto::blowfish","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","crypto::buffer","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","crypto::chacha20","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","crypto::chacha20poly1305","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"from","crypto::curve25519","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"from","crypto::fortuna","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"from","crypto::ghash","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"from","crypto::hc128","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"from","crypto::hmac","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"from","crypto::mac","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"from","crypto::md5","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"from","crypto::poly1305","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"from","crypto::rc4","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"from","crypto::ripemd160","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"from","crypto::salsa20","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"from","crypto::scrypt","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"from","crypto::sha1","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"from","crypto::sha2","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"from","crypto::sha3","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"from","crypto::sosemanuk","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"from","crypto::symmetriccipher","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"from","crypto::whirlpool","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"from","crypto::aesni","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]]],"paths":[[8,"AeadEncryptor"],[8,"AeadDecryptor"],[4,"KeySize"],[3,"AesGcm"],[3,"AesSafe128Encryptor"],[3,"AesSafe128Decryptor"],[3,"AesSafe192Encryptor"],[3,"AesSafe192Decryptor"],[3,"AesSafe256Encryptor"],[3,"AesSafe256Decryptor"],[3,"AesSafe128EncryptorX8"],[3,"AesSafe128DecryptorX8"],[3,"AesSafe192EncryptorX8"],[3,"AesSafe192DecryptorX8"],[3,"AesSafe256EncryptorX8"],[3,"AesSafe256DecryptorX8"],[3,"Blake2b"],[3,"Blake2s"],[8,"PaddingProcessor"],[3,"NoPadding"],[3,"PkcsPadding"],[3,"EncPadding"],[3,"DecPadding"],[3,"EcbEncryptor"],[3,"EcbDecryptor"],[3,"CbcEncryptor"],[3,"CbcDecryptor"],[3,"CtrMode"],[3,"CtrModeX8"],[3,"Blowfish"],[4,"BufferResult"],[8,"ReadBuffer"],[8,"WriteBuffer"],[3,"RefReadBuffer"],[3,"OwnedReadBuffer"],[3,"RefWriteBuffer"],[3,"BorrowedWriteBuffer"],[3,"OwnedWriteBuffer"],[3,"ChaCha20"],[3,"ChaCha20Poly1305"],[3,"Fe"],[3,"GeP2"],[3,"GeP3"],[3,"GeP1P1"],[3,"GePrecomp"],[3,"GeCached"],[8,"Digest"],[3,"Fortuna"],[3,"Ghash"],[3,"GhashWithC"],[3,"Hc128"],[3,"Hmac"],[8,"Mac"],[3,"MacResult"],[3,"Md5"],[3,"Poly1305"],[3,"Rc4"],[3,"Ripemd160"],[3,"Salsa20"],[3,"ScryptParams"],[3,"Sha1"],[3,"Sha512"],[3,"Sha384"],[3,"Sha512Trunc256"],[3,"Sha512Trunc224"],[3,"Sha256"],[3,"Sha224"],[4,"Sha3Mode"],[3,"Sha3"],[3,"Sosemanuk"],[4,"SymmetricCipherError"],[8,"BlockEncryptor"],[8,"BlockEncryptorX8"],[8,"BlockDecryptor"],[8,"BlockDecryptorX8"],[8,"Encryptor"],[8,"Decryptor"],[8,"SynchronousStreamCipher"],[3,"Whirlpool"],[3,"AesNiEncryptor"],[3,"AesNiDecryptor"]]};
searchIndex["diesel"]={"doc":"Diesel","items":[[5,"debug_query","diesel","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement"]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,[[["t"]],["select",["selectstatement"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[5,"update","","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement"]]],[0,"associations","","Traits related to relationships between multiple tables.",N,N],[8,"BelongsTo","diesel::associations","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",0,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",0,N],[10,"foreign_key","","Returns the foreign key for `self`",0,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",0,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",1,N],[8,"HasTable","","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",2,N],[10,"table","","Returns the table this type is associated with.",2,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",3,N],[10,"id","","Returns the identifier for this record.",3,N],[0,"backend","diesel","Types which represent various database backends",N,N],[8,"Backend","diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",4,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",4,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",4,N],[16,"ByteOrder","","What byte order is used to transmit integers?",4,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[0,"connection","diesel","Types related to database connections",N,N],[3,"AnsiTransactionManager","diesel::connection","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[11,"default","","",5,[[],["ansitransactionmanager"]]],[11,"new","","Create a new transaction manager",5,[[],["self"]]],[11,"begin_transaction_sql","","Begin a transaction with custom SQL",5,[[["self"],["conn"],["str"]],["queryresult"]]],[11,"begin_transaction","","",5,[[["self"],["conn"]],["queryresult"]]],[11,"rollback_transaction","","",5,[[["self"],["conn"]],["queryresult"]]],[11,"commit_transaction","","",5,[[["self"],["conn"]],["queryresult"]]],[11,"get_transaction_depth","","",5,[[["self"]],["u32"]]],[8,"TransactionManager","","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",6,[[["self"],["conn"]],["queryresult"]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",6,[[["self"],["conn"]],["queryresult"]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",6,[[["self"],["conn"]],["queryresult"]]],[10,"get_transaction_depth","","Fetch the current transaction depth",6,[[["self"]],["u32"]]],[8,"SimpleConnection","","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",7,[[["self"],["str"]],["queryresult"]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",8,N],[10,"establish","","Establishes a new connection to the database",8,[[["str"]],["connectionresult"]]],[11,"transaction","","Executes the given function inside of a database transaction",8,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",8,[[["self"]],["queryresult"]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",8,[[["self"],["f"]],["t"]]],[0,"data_types","diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",9,N],[10,"build","","Construct an instance of this type",9,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",10,[[["r"]],["result"]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",11,[[["option"]],["result"]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",12,N],[10,"build_from_row","","See the trait documentation.",12,[[["t"]],["result"]]],[0,"expression","diesel","AST types representing various typed SQL expressions.",N,N],[3,"SqlLiteral","diesel::expression","Returned by the [`sql()`] function.",N,N],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[11,"add","","",13,N],[11,"sub","","",13,N],[11,"mul","","",13,N],[11,"div","","",13,N],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["sqlliteral"]]],[11,"bind","","Bind a value for use with this SQL query.",13,[[["self"],["u"]],["uncheckedbind"]]],[11,"sql","","Use literal SQL in the query builder",13,[[["self"],["str"]],["sqlliteral"]]],[11,"walk_ast","","",13,[[["self"],["astpass"]],["queryresult"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["uncheckedbind"]]],[11,"sql","","Use literal SQL in the query builder",14,[[["self"],["str"]],["sqlliteral"]]],[11,"walk_ast","","",14,[[["self"],["astpass"]],["queryresult"]]],[8,"Expression","","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",15,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",16,N],[10,"as_expression","","Perform the conversion",16,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",17,[[["self"]],["asexprof"]]],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",17,[[["self"]],["asexprof"]]],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",18,N],[10,"as_expression_list","","Perform the conversion",18,N],[0,"expression_methods","diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"BoolExpressionMethods","diesel::expression_methods","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",19,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",19,[[["self"],["t"]],["grouped",["or"]]]],[8,"EscapeExpressionMethods","","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",20,[[["self"],["char"]],["escape",["asexprof"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",21,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",21,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",21,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",21,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",21,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",21,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",21,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",21,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",21,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",21,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",21,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",21,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",21,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",21,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",21,[[["self"]],["asc"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",22,[[["self"]],["nullable"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",23,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",23,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",23,[[["self"],["t"]],["notlike"]]],[0,"query_builder","diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[3,"AstPass","diesel::query_builder","The primary type used when walking a Diesel AST during query execution.",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[3,"InsertStatement","","A fully constructed insert statement.",N,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[11,"reborrow","","Call this method whenever you pass an instance of `AstPass` by value.",24,[[["self"]],["astpass"]]],[11,"unsafe_to_cache_prepared","","Mark the current query being constructed as unsafe to store in the prepared statement cache.",24,[[["self"]]]],[11,"push_sql","","Push the given SQL string on the end of the query being constructed.",24,[[["self"],["str"]]]],[11,"push_identifier","","Push the given SQL identifier on the end of the query being constructed.",24,[[["self"],["str"]],["queryresult"]]],[11,"push_bind_param","","Push a value onto the given query to be sent separate from the SQL",24,[[["self"],["u"]],["queryresult"]]],[0,"bind_collector","","Types related to managing bind parameters during query construction.",N,N],[3,"RawBytesBindCollector","diesel::query_builder::bind_collector","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",25,N],[12,"binds","","The serialized bytes for each bind parameter.",25,N],[8,"BindCollector","","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",26,N],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct an empty `RawBytesBindCollector`",25,[[],["self"]]],[11,"push_bound_value","","",25,N],[11,"fmt","diesel::query_builder","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"clone","","",28,[[["self"]],["deletestatement"]]],[11,"filter","","Adds the given predicate to the `WHERE` clause of the statement being constructed.",28,[[["self"],["predicate"]],["filter"]]],[11,"into_boxed","","Boxes the `WHERE` clause of this delete statement.",28,[[["self"]],["intoboxed"]]],[11,"filter","","",28,N],[11,"internal_into_boxed","","",28,N],[11,"walk_ast","","",28,[[["self"],["astpass"]],["queryresult"]]],[11,"as_query","","",28,N],[11,"returning","","Specify what expression is returned after execution of the `delete`.",28,[[["self"],["e"]],["deletestatement",["returningclause"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"clone","","",29,[[["self"]],["incompleteinsertstatement"]]],[11,"default_values","","Inserts `DEFAULT VALUES` into the targeted table.",29,[[["self"]],["insertstatement",["defaultvalues"]]]],[11,"values","","Inserts the given values into the table passed to `insert_into`.",29,[[["self"],["u"]],["insertstatement"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"clone","","",30,[[["self"]],["insertstatement"]]],[11,"into_columns","","Set the column list when inserting from a select statement",30,[[["self"],["c2"]],["insertstatement",["insertfromselect"]]]],[11,"walk_ast","","",30,[[["self"],["astpass"]],["queryresult"]]],[11,"execute","","",30,[[["self"],["sqliteconnection"]],["queryresult",["usize"]]]],[11,"execute","","",30,[[["self"],["sqliteconnection"]],["queryresult",["usize"]]]],[11,"execute","","",30,[[["self"],["sqliteconnection"]],["queryresult",["usize"]]]],[11,"as_query","","",30,N],[11,"returning","","Specify what expression is returned after execution of the `insert`. # Examples",30,[[["self"],["e"]],["insertstatement",["returningclause"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"clone","","",31,[[["self"]],["sqlquery"]]],[11,"bind","","Bind a value for use with this SQL query.",31,[[["self"],["value"]],["uncheckedbind"]]],[11,"walk_ast","","",31,[[["self"],["astpass"]],["queryresult"]]],[11,"internal_load","","",31,[[["self"],["conn"]],["queryresult",["vec"]]]],[11,"set","","Provides the `SET` clause of the `UPDATE` statement.",32,[[["self"],["v"]],["updatestatement"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"clone","","",32,[[["self"]],["updatestatement"]]],[11,"filter","","Adds the given predicate to the `WHERE` clause of the statement being constructed.",32,[[["self"],["predicate"]],["filter"]]],[11,"into_boxed","","Boxes the `WHERE` clause of this update statement.",32,[[["self"]],["intoboxed"]]],[11,"filter","","",32,N],[11,"internal_into_boxed","","",32,N],[11,"walk_ast","","",32,[[["self"],["astpass"]],["queryresult"]]],[11,"as_query","","",32,N],[11,"returning","","Specify what expression is returned after execution of the `update`. # Examples",32,[[["self"],["e"]],["updatestatement",["returningclause"]]]],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",33,N],[18,"HAS_STATIC_QUERY_ID","","Can the SQL generated by `Self` be uniquely identified by its type?",33,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",33,[[],["option",["typeid"]]]],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",34,N],[16,"Changeset","","The update statement this type represents",34,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",34,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",35,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",35,[[["self"]],["updatetarget"]]],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",36,[[["self"],["str"]]]],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",36,[[["self"],["str"]],["queryresult"]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",36,[[["self"]]]],[10,"finish","","Returns the constructed SQL query.",36,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",37,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",38,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",39,[[["self"],["astpass"]],["queryresult"]]],[11,"to_sql","","Converts this `QueryFragment` to its SQL representation.",39,N],[11,"collect_binds","","Serializes all bind parameters in this query.",39,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",39,[[["self"]],["queryresult",["bool"]]]],[8,"AsQuery","","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",40,N],[16,"Query","","What kind of query does this type represent?",40,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",40,N],[0,"query_dsl","diesel","Traits that construct SELECT statements",N,N],[0,"methods","diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"BoxedDsl","diesel::query_dsl::methods","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",41,N],[10,"internal_into_boxed","","See the trait documentation.",41,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",42,N],[10,"distinct","","See the trait documentation.",42,N],[8,"FilterDsl","","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",43,N],[10,"filter","","See the trait documentation.",43,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",44,N],[10,"find","","See the trait documentation.",44,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",45,N],[10,"or_filter","","See the trait documentation.",45,N],[8,"LimitDsl","","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",46,N],[10,"limit","","See the trait documentation",46,N],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",47,[[["self"],["conn"]],["queryresult",["usize"]]]],[8,"LoadQuery","","The `load` method",N,N],[10,"internal_load","","Load this query",48,[[["self"],["conn"]],["queryresult",["vec"]]]],[8,"ForUpdateDsl","","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",49,N],[10,"for_update","","See the trait level documentation",49,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",50,N],[10,"with_lock","","See the trait level documentation",50,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",51,N],[10,"modify_lock","","See the trait level documentation",51,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",52,N],[10,"offset","","See the trait documentation",52,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",53,N],[10,"order","","See the trait documentation.",53,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",54,N],[10,"then_order_by","","See the trait documentation.",54,N],[8,"SelectDsl","","The `select` method",N,N],[16,"Output","","The type returned by `.select`",55,N],[10,"select","","See the trait documentation",55,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",56,N],[10,"single_value","","See the trait documentation.",56,N],[8,"BelongingToDsl","diesel::query_dsl","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",57,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",57,N],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",58,[[["self"],["on"]],["onclausewrapper"]]],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",59,[[["self"],["conn"]],["queryresult"]]],[8,"QueryDsl","","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",60,[[["self"]],["distinct"]]],[11,"select","","Adds a `SELECT` clause to the query.",60,[[["self"],["selection"]],["select"]]],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",60,[[["self"]],["select",["countstar"]]]],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",60,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",60,N],[11,"left_join","","Alias for [`left_outer_join`].",60,N],[11,"filter","","Adds to the `WHERE` clause of a query.",60,[[["self"],["predicate"]],["filter"]]],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",60,[[["self"],["predicate"]],["orfilter"]]],[11,"find","","Attempts to find a single record from the given table by primary key.",60,[[["self"],["pk"]],["find"]]],[11,"order","","Sets the order clause of a query.",60,[[["self"],["expr"]],["order"]]],[11,"order_by","","Alias for `order`",60,[[["self"],["expr"]],["order"]]],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",60,[[["self"],["order"]],["thenorderby"]]],[11,"limit","","Sets the limit clause of the query.",60,[[["self"],["i64"]],["limit"]]],[11,"offset","","Sets the offset clause of the query.",60,[[["self"],["i64"]],["offset"]]],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",60,[[["self"]],["forupdate"]]],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",60,[[["self"]],["fornokeyupdate"]]],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",60,[[["self"]],["forshare"]]],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",60,[[["self"]],["forkeyshare"]]],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",60,[[["self"]],["skiplocked"]]],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",60,[[["self"]],["nowait"]]],[11,"into_boxed","","Boxes the pieces of a query into a single type.",60,[[["self"]],["intoboxed"]]],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",60,[[["self"]],["singlevalue"]]],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",61,[[["self"],["conn"]],["queryresult",["usize"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",61,[[["self"],["conn"]],["queryresult",["vec"]]]],[11,"get_result","","Runs the command, and returns the affected row.",61,[[["self"],["conn"]],["queryresult"]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",61,[[["self"],["conn"]],["queryresult",["vec"]]]],[11,"first","","Attempts to load a single record.",61,[[["self"],["conn"]],["queryresult"]]],[0,"query_source","diesel","Types related to describing schema, and interactions between tables.",N,N],[3,"Never","diesel::query_source","A table never appears in the from clause.",N,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",62,N],[8,"QuerySource","","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",63,N],[16,"DefaultSelection","","The type returned by `default_selection`",63,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",63,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",63,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",64,N],[18,"NAME","","The name of this column",64,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",65,N],[16,"AllColumns","","The type returned by `all_columns`",65,N],[10,"primary_key","","Returns the primary key of this table.",65,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",65,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",66,N],[0,"r2d2","diesel","Connection pooling via r2d2",N,N],[8,"ManageConnection","diesel::r2d2","A trait which provides connection-specific functionality.",N,N],[16,"Connection","","The connection type this manager deals with.",67,N],[16,"Error","","The error type returned by `Connection`s.",67,N],[10,"connect","","Attempts to create a new connection.",67,[[["self"]],["result"]]],[10,"is_valid","","Determines if the connection is still connected to the database.",67,N],[10,"has_broken","","Quickly determines if the connection is no longer usable.",67,N],[8,"HandleError","","A trait which handles errors reported by the `ManageConnection`.",N,N],[10,"handle_error","","Handles an error.",68,N],[3,"NopErrorHandler","","A `HandleError` implementation which does nothing.",N,N],[3,"LoggingErrorHandler","","A `HandleError` implementation which logs at the error level.",N,N],[8,"CustomizeConnection","","A trait which allows for customization of connections.",N,N],[11,"on_acquire","","Called with connections immediately after they are returned from `ManageConnection::connect`.",69,[[["self"],["c"]],["result"]]],[11,"on_release","","Called with connections when they are removed from the pool.",69,N],[3,"NopConnectionCustomizer","","A `CustomizeConnection` which does nothing.",N,N],[3,"Pool","","A generic connection pool.",N,N],[3,"Error","","The error type returned by methods in this crate.",N,N],[3,"State","","Information about the state of a `Pool`.",N,N],[12,"connections","","The number of connections currently being managed by the pool.",70,N],[12,"idle_connections","","The number of idle connections.",70,N],[3,"PooledConnection","","A smart pointer wrapping a connection.",N,N],[3,"Builder","","A builder for a connection pool.",N,N],[3,"ConnectionManager","","An r2d2 connection manager for use with Diesel.",N,N],[4,"Error","","The error used when managing connections with `r2d2`.",N,N],[13,"ConnectionError","","An error occurred establishing the connection",71,N],[13,"QueryError","","An error occurred pinging the database",71,N],[6,"PoolError","","A re-export of [`r2d2::Error`], which is only used by methods on [`r2d2::Pool`].",N,N],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"clone","","",72,[[["self"]],["connectionmanager"]]],[11,"new","","Returns a new connection manager, which establishes connections to the given database URL.",72,[[["s"]],["self"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"description","","",71,[[["self"]],["str"]]],[11,"connect","","",72,[[["self"]],["result",["error"]]]],[11,"is_valid","","",72,[[["self"],["t"]],["result",["error"]]]],[11,"has_broken","","",72,[[["self"],["t"]],["bool"]]],[11,"batch_execute","","",73,[[["self"],["str"]],["queryresult"]]],[11,"establish","","",73,[[["str"]],["connectionresult"]]],[11,"execute","","",73,[[["self"],["str"]],["queryresult",["usize"]]]],[11,"query_by_index","","",73,[[["self"],["t"]],["queryresult",["vec"]]]],[11,"query_by_name","","",73,[[["self"],["t"]],["queryresult",["vec"]]]],[11,"execute_returning_count","","",73,[[["self"],["t"]],["queryresult",["usize"]]]],[11,"transaction_manager","","",73,N],[0,"result","diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[3,"UnexpectedNullError","diesel::result","An unexpected `NULL` was encountered during deserialization",N,N],[4,"Error","","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",74,N],[13,"DatabaseError","","The database returned an error.",74,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",74,N],[13,"QueryBuilderError","","The query could not be constructed",74,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",74,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",74,N],[13,"RollbackTransaction","","Roll back the current transaction.",74,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",74,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",75,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",75,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",75,N],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",76,N],[13,"BadConnection","","The database returned an error.",76,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",76,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",76,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",77,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",77,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",77,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",77,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",77,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",77,[[["self"]],["option",["str"]]]],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",78,[[["self"]],["result",["option","error"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"clone","","",75,[[["self"]],["databaseerrorkind"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"eq","","",76,[[["self"],["connectionerror"]],["bool"]]],[11,"ne","","",76,[[["self"],["connectionerror"]],["bool"]]],[11,"optional","","",79,[[["self"]],["result",["option","error"]]]],[11,"from","","",76,[[["nulerror"]],["self"]]],[11,"from","","",74,[[["nulerror"]],["self"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"description","","",74,[[["self"]],["str"]]],[11,"cause","","",74,[[["self"]],["option",["stderror"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"description","","",76,[[["self"]],["str"]]],[11,"cause","","",76,[[["self"]],["option",["stderror"]]]],[11,"eq","","",74,[[["self"],["error"]],["bool"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"clone","","",80,[[["self"]],["unexpectednullerror"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"description","","",80,[[["self"]],["str"]]],[0,"serialize","diesel","Types and traits related to serializing values for the database",N,N],[3,"Output","diesel::serialize","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",81,N],[13,"No","","The value is not null",81,N],[6,"Result","","A specialized result type representing the result of serializing a value for the database.",N,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",82,[[["self"],["output"]],["result"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"clone","","",81,[[["self"]],["isnull"]]],[11,"eq","","",81,[[["self"],["isnull"]],["bool"]]],[11,"clone","","",83,[[["self"]],["output"]]],[11,"new","","Construct a new `Output`",83,N],[11,"with_buffer","","Create a new `Output` with the given buffer",83,[[["self"],["u"]],["output"]]],[11,"into_inner","","Return the raw buffer this type is wrapping",83,[[["self"]],["t"]]],[11,"metadata_lookup","","Returns the backend's mechanism for dynamically looking up type metadata at runtime, if relevant for the given backend.",83,N],[11,"write","","",83,N],[11,"flush","","",83,[[["self"]],["result"]]],[11,"write_all","","",83,N],[11,"write_fmt","","",83,[[["self"],["arguments"]],["result"]]],[11,"deref","","",83,N],[11,"deref_mut","","",83,N],[11,"eq","","",83,[[["self"],["u"]],["bool"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[0,"sql_types","diesel","Types which represent a SQL data type.",N,N],[3,"Bool","diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[3,"Integer","","The integer SQL type.",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[3,"Float","","The float SQL type.",N,N],[3,"Double","","The double precision float SQL type.",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[3,"Text","","The text SQL type.",N,N],[3,"Binary","","The binary SQL type.",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[0,"ops","","Represents the output of numeric operators in SQL",N,N],[8,"Add","diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",84,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",84,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",85,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",85,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",86,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",86,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",87,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",87,N],[6,"Decimal","diesel::sql_types","Alias for `Numeric`",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",88,N],[16,"Avg","","The SQL type of `avg(this_type)`",88,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",89,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",90,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",90,N],[8,"NotNull","","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",91,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"clone","","",92,[[["self"]],["bool"]]],[11,"default","","",92,[[],["bool"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"clone","","",93,[[["self"]],["tinyint"]]],[11,"default","","",93,[[],["tinyint"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"clone","","",94,[[["self"]],["smallint"]]],[11,"default","","",94,[[],["smallint"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"clone","","",95,[[["self"]],["integer"]]],[11,"default","","",95,[[],["integer"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"clone","","",96,[[["self"]],["bigint"]]],[11,"default","","",96,[[],["bigint"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"clone","","",97,[[["self"]],["float"]]],[11,"default","","",97,[[],["float"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"clone","","",98,[[["self"]],["double"]]],[11,"default","","",98,[[],["double"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"clone","","",99,[[["self"]],["numeric"]]],[11,"default","","",99,[[],["numeric"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"clone","","",100,[[["self"]],["text"]]],[11,"default","","",100,[[],["text"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"clone","","",101,[[["self"]],["binary"]]],[11,"default","","",101,[[],["binary"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"clone","","",102,[[["self"]],["date"]]],[11,"default","","",102,[[],["date"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"clone","","",103,[[["self"]],["interval"]]],[11,"default","","",103,[[],["interval"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"clone","","",104,[[["self"]],["time"]]],[11,"default","","",104,[[],["time"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"clone","","",105,[[["self"]],["timestamp"]]],[11,"default","","",105,[[],["timestamp"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"clone","","",106,[[["self"]],["nullable"]]],[11,"default","","",106,[[],["nullable"]]],[0,"migration","diesel","Representation of migrations",N,N],[4,"MigrationError","diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",107,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",107,N],[13,"IoError","","General system IO error",107,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",107,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",107,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",108,N],[13,"QueryError","","The provided migration included an invalid query",108,N],[13,"EmptyMigration","","The provided migration was empty",108,N],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"description","","",107,[[["self"]],["str"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",107,[[["self"],["self"]],["bool"]]],[11,"from","","",107,[[["error"]],["self"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"eq","","",108,[[["self"],["runmigrationserror"]],["bool"]]],[11,"ne","","",108,[[["self"],["runmigrationserror"]],["bool"]]],[11,"description","","",108,[[["self"]],["str"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",108,[[["migrationerror"]],["self"]]],[11,"from","","",108,[[["error"]],["self"]]],[11,"from","","",108,[[["error"]],["self"]]],[8,"Migration","","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",109,[[["self"]],["str"]]],[10,"run","","Apply this migration",109,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",109,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","","Get the migration file path",109,[[["self"]],["option",["path"]]]],[0,"row","diesel","Contains the `Row` trait",N,N],[8,"Row","diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",110,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",110,[[["self"],["usize"]],["bool"]]],[11,"advance","","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",110,[[["self"],["usize"]]]],[8,"NamedRow","","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","","Retrieve and deserialize a single value from the query",111,[[["self"],["str"]],["result"]]],[0,"types","diesel","",N,N],[6,"Bool","diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","diesel","Provides types and functions related to working with SQLite",N,N],[3,"Sqlite","diesel::sqlite","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[4,"SqliteType","","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",112,N],[13,"Text","","Bind using `sqlite3_bind_text`",112,N],[13,"Float","","`bytes` should contain an `f32`",112,N],[13,"Double","","`bytes` should contain an `f64`",112,N],[13,"SmallInt","","`bytes` should contain an `i16`",112,N],[13,"Integer","","`bytes` should contain an `i32`",112,N],[13,"Long","","`bytes` should contain an `i64`",112,N],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"clone","","",113,[[["self"]],["sqlite"]]],[11,"hash","","",113,N],[11,"eq","","",113,[[["self"],["sqlite"]],["bool"]]],[11,"hash","","",112,N],[11,"eq","","",112,[[["self"],["sqlitetype"]],["bool"]]],[11,"clone","","",112,[[["self"]],["sqlitetype"]]],[11,"batch_execute","","",114,[[["self"],["str"]],["queryresult"]]],[11,"establish","","",114,[[["str"]],["connectionresult"]]],[11,"immediate_transaction","","Run a transaction with `BEGIN IMMEDIATE`",114,[[["self"],["f"]],["result"]]],[11,"exclusive_transaction","","Run a transaction with `BEGIN EXCLUSIVE`",114,[[["self"],["f"]],["result"]]],[0,"query_builder","","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[11,"default","","",115,[[],["sqlitequerybuilder"]]],[11,"new","","Construct a new query builder with an empty query",115,[[],["self"]]],[11,"push_sql","","",115,[[["self"],["str"]]]],[11,"push_identifier","","",115,[[["self"],["str"]],["queryresult"]]],[11,"push_bind_param","","",115,[[["self"]]]],[11,"finish","","",115,[[["self"]],["string"]]],[0,"dsl","diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[3,"now","diesel::dsl","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"count","","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[5,"exists","","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[5,"sum","","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[5,"max","","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not"]]],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement"]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,[[["t"]],["select",["selectstatement"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[5,"update","","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement"]]],[6,"SqlTypeOf","","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[6,"not","","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"Order","","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[6,"count","","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[0,"helper_types","diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[6,"SqlTypeOf","diesel::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[6,"not","","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"Order","","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"prelude","diesel","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[3,"SqliteConnection","diesel::prelude","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",1,N],[8,"Insertable","","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",116,N],[10,"values","","Construct `Self::Values`",116,N],[11,"insert_into","","Insert `self` into a given table.",116,[[["self"],["t"]],["insertstatement"]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",57,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",57,N],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","diesel::query_dsl","See the trait documentation.",58,[[["self"],["on"]],["onclausewrapper"]]],[8,"SaveChangesDsl","diesel::prelude","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","diesel::query_dsl","See the trait documentation.",59,[[["self"],["conn"]],["queryresult"]]],[8,"JoinTo","diesel::prelude","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[14,"table","diesel","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[11,"from","diesel::connection","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"as_query","diesel::expression","",13,N],[11,"internal_load","","",13,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"execute","","",13,[[["t"],["conn"]],["result",["usize","error"]]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"as_expression","","",14,[[["self"]],["t"]]],[11,"as_query","","",14,N],[11,"internal_load","","",14,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"execute","","",14,[[["t"],["conn"]],["result",["usize","error"]]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"execute","diesel::dsl","",117,[[["t"],["conn"]],["result",["usize","error"]]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"clone","","",117,[[["self"]],["now"]]],[11,"walk_ast","","",117,[[["self"],["astpass"]],["queryresult"]]],[11,"add","","",117,N],[11,"sub","","",117,N],[11,"and","diesel::expression_methods","Creates a SQL `AND` expression",19,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",19,[[["self"],["t"]],["grouped",["or"]]]],[11,"escape","","See the trait documentation.",20,[[["self"],["char"]],["escape",["asexprof"]]]],[11,"eq","","Creates a SQL `=` expression.",21,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",21,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",21,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",21,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",21,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",21,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",21,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",21,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",21,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",21,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",21,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",21,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",21,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",21,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",21,[[["self"]],["asc"]]],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",22,[[["self"]],["nullable"]]],[11,"concat","","Concatenates two strings using the `||` operator.",23,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",23,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",23,[[["self"],["t"]],["notlike"]]],[11,"insert_into","diesel::prelude","Insert `self` into a given table.",116,[[["self"],["t"]],["insertstatement"]]],[11,"from","diesel::query_builder","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"to_string","","",27,[[["self"]],["string"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"as_query","","",28,N],[11,"internal_into_boxed","","",28,N],[11,"filter","","",28,N],[11,"internal_load","","",28,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"execute","","",28,[[["t"],["conn"]],["result",["usize","error"]]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"as_query","","",30,N],[11,"internal_load","","",30,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"execute","","",30,[[["t"],["conn"]],["result",["usize","error"]]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"internal_load","","",31,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"execute","","",31,[[["t"],["conn"]],["result",["usize","error"]]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"as_query","","",32,N],[11,"internal_into_boxed","","",32,N],[11,"filter","","",32,N],[11,"internal_load","","",32,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"execute","","",32,[[["t"],["conn"]],["result",["usize","error"]]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[18,"HAS_STATIC_QUERY_ID","","Can the SQL generated by `Self` be uniquely identified by its type?",33,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",33,[[],["option",["typeid"]]]],[11,"from","diesel::query_builder::bind_collector","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"on","diesel::query_dsl","See the trait documentation.",58,[[["self"],["on"]],["onclausewrapper"]]],[11,"save_changes","","See the trait documentation.",59,[[["self"],["conn"]],["queryresult"]]],[11,"from","diesel::query_source","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"deref","diesel::r2d2","",73,N],[11,"handle_error","","",121,N],[11,"handle_error","","",122,N],[11,"description","","",123,[[["self"]],["str"]]],[11,"drop","","",73,N],[11,"fmt","","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",126,[[["self"]],["pool"]]],[11,"clone","","",124,[[["self"]],["nopconnectioncustomizer"]]],[11,"clone","","",122,[[["self"]],["loggingerrorhandler"]]],[11,"clone","","",121,[[["self"]],["noperrorhandler"]]],[11,"deref_mut","","",73,N],[11,"default","","",125,[[],["builder"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,N],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"new","","Creates a new connection pool with a default configuration.",126,[[["m"]],["result",["pool","error"]]]],[11,"builder","","Returns a builder type to configure a new pool.",126,[[],["builder"]]],[11,"get","","Retrieves a connection from the pool.",126,[[["self"]],["result",["pooledconnection","error"]]]],[11,"try_get","","Attempts to retrieve a connection from the pool if there is one available.",126,[[["self"]],["option",["pooledconnection"]]]],[11,"state","","Returns information about the current state of the pool.",126,[[["self"]],["state"]]],[11,"max_size","","Returns the configured maximum pool size.",126,[[["self"]],["u32"]]],[11,"min_idle","","Returns the configured mimimum idle connection count.",126,[[["self"]],["option",["u32"]]]],[11,"test_on_check_out","","Returns if the pool is configured to test connections on check out.",126,[[["self"]],["bool"]]],[11,"max_lifetime","","Returns the configured maximum connection lifetime.",126,[[["self"]],["option",["duration"]]]],[11,"idle_timeout","","Returns the configured idle connection timeout.",126,[[["self"]],["option",["duration"]]]],[11,"connection_timeout","","Returns the configured connection timeout.",126,[[["self"]],["duration"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"to_string","","",123,[[["self"]],["string"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"new","","Constructs a new `Builder`.",125,[[],["builder"]]],[11,"max_size","","Sets the maximum number of connections managed by the pool.",125,[[["self"],["u32"]],["builder"]]],[11,"min_idle","","Sets the minimum idle connection count maintained by the pool.",125,[[["self"],["option",["u32"]]],["builder"]]],[11,"thread_pool","","Sets the thread pool used for asynchronous operations such as connection creation.",125,[[["self"],["arc",["scheduledthreadpool"]]],["builder"]]],[11,"test_on_check_out","","If true, the health of a connection will be verified via a call to `ConnectionManager::is_valid` before it is checked out of the pool.",125,[[["self"],["bool"]],["builder"]]],[11,"max_lifetime","","Sets the maximum lifetime of connections in the pool.",125,[[["self"],["option",["duration"]]],["builder"]]],[11,"idle_timeout","","Sets the idle timeout used by the pool.",125,[[["self"],["option",["duration"]]],["builder"]]],[11,"connection_timeout","","Sets the connection timeout used by the pool.",125,[[["self"],["duration"]],["builder"]]],[11,"error_handler","","Sets the handler for errors reported in the pool.",125,[[["self"],["box",["handleerror"]]],["builder"]]],[11,"connection_customizer","","Sets the connection customizer used by the pool.",125,[[["self"],["box",["customizeconnection"]]],["builder"]]],[11,"build","","Consumes the builder, returning a new, initialized pool.",125,[[["self"],["m"]],["result",["pool","error"]]]],[11,"build_unchecked","","Consumes the builder, returning a new pool.",125,[[["self"],["m"]],["pool"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"to_string","","",71,[[["self"]],["string"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"to_string","diesel::result","",80,[[["self"]],["string"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"to_string","","",74,[[["self"]],["string"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"to_string","","",76,[[["self"]],["string"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"from","diesel::serialize","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"from","diesel::sql_types","",92,[[["t"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,N],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,N],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,N],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,N],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,N],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,N],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"metadata","diesel::sqlite","",113,N],[11,"metadata","","",113,N],[11,"metadata","","",113,N],[11,"metadata","","",113,N],[11,"metadata","","",113,N],[11,"metadata","","",113,N],[11,"metadata","","",113,N],[11,"metadata","","",113,N],[11,"metadata","","",113,N],[11,"metadata","","",113,N],[11,"metadata","","",113,N],[11,"metadata","","",113,N],[11,"to_string","diesel::migration","",107,[[["self"]],["string"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"to_string","","",108,[[["self"]],["string"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"metadata","diesel::sqlite","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"metadata","","",113,N],[11,"row_metadata","","",113,N],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"from","diesel::sqlite::query_builder","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]]],"paths":[[8,"BelongsTo"],[8,"GroupedBy"],[8,"HasTable"],[8,"Identifiable"],[8,"Backend"],[3,"AnsiTransactionManager"],[8,"TransactionManager"],[8,"SimpleConnection"],[8,"Connection"],[8,"Queryable"],[8,"QueryableByName"],[8,"FromSql"],[8,"FromSqlRow"],[3,"SqlLiteral"],[3,"UncheckedBind"],[8,"Expression"],[8,"AsExpression"],[8,"IntoSql"],[8,"AsExpressionList"],[8,"BoolExpressionMethods"],[8,"EscapeExpressionMethods"],[8,"ExpressionMethods"],[8,"NullableExpressionMethods"],[8,"TextExpressionMethods"],[3,"AstPass"],[3,"RawBytesBindCollector"],[8,"BindCollector"],[3,"DebugQuery"],[3,"DeleteStatement"],[3,"IncompleteInsertStatement"],[3,"InsertStatement"],[3,"SqlQuery"],[3,"UpdateStatement"],[8,"QueryId"],[8,"AsChangeset"],[8,"IntoUpdateTarget"],[8,"QueryBuilder"],[8,"Query"],[8,"SelectQuery"],[8,"QueryFragment"],[8,"AsQuery"],[8,"BoxedDsl"],[8,"DistinctDsl"],[8,"FilterDsl"],[8,"FindDsl"],[8,"OrFilterDsl"],[8,"LimitDsl"],[8,"ExecuteDsl"],[8,"LoadQuery"],[8,"ForUpdateDsl"],[8,"LockingDsl"],[8,"ModifyLockDsl"],[8,"OffsetDsl"],[8,"OrderDsl"],[8,"ThenOrderDsl"],[8,"SelectDsl"],[8,"SingleValueDsl"],[8,"BelongingToDsl"],[8,"JoinOnDsl"],[8,"SaveChangesDsl"],[8,"QueryDsl"],[8,"RunQueryDsl"],[8,"Plus"],[8,"QuerySource"],[8,"Column"],[8,"Table"],[8,"AppearsInFromClause"],[8,"ManageConnection"],[8,"HandleError"],[8,"CustomizeConnection"],[3,"State"],[4,"Error"],[3,"ConnectionManager"],[3,"PooledConnection"],[4,"Error"],[4,"DatabaseErrorKind"],[4,"ConnectionError"],[8,"DatabaseErrorInformation"],[8,"OptionalExtension"],[6,"QueryResult"],[3,"UnexpectedNullError"],[4,"IsNull"],[8,"ToSql"],[3,"Output"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Foldable"],[8,"HasSqlType"],[8,"TypeMetadata"],[8,"IntoNullable"],[3,"Bool"],[3,"Tinyint"],[3,"SmallInt"],[3,"Integer"],[3,"BigInt"],[3,"Float"],[3,"Double"],[3,"Numeric"],[3,"Text"],[3,"Binary"],[3,"Date"],[3,"Interval"],[3,"Time"],[3,"Timestamp"],[3,"Nullable"],[4,"MigrationError"],[4,"RunMigrationsError"],[8,"Migration"],[8,"Row"],[8,"NamedRow"],[4,"SqliteType"],[3,"Sqlite"],[3,"SqliteConnection"],[3,"SqliteQueryBuilder"],[8,"Insertable"],[3,"now"],[3,"Never"],[3,"Once"],[3,"MoreThanOnce"],[3,"NopErrorHandler"],[3,"LoggingErrorHandler"],[3,"Error"],[3,"NopConnectionCustomizer"],[3,"Builder"],[3,"Pool"]]};
searchIndex["diesel_derives"]={"doc":"","items":[[5,"derive_as_changeset","diesel_derives","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_as_expression","","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_associations","","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_diesel_numeric_ops","","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_from_sql_row","","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_identifiable","","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_insertable","","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_query_id","","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_queryable","","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_queryable_by_name","","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_sql_type","","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["httparse"]={"doc":"httparse","items":[[3,"InvalidChunkSize","httparse","An error in parsing a chunk size.",N,N],[3,"Request","","A parsed Request.",N,N],[12,"method","","The request method, such as `GET`.",0,N],[12,"path","","The request path, such as `/about-us`.",0,N],[12,"version","","The request version, such as `HTTP/1.1`.",0,N],[12,"headers","","The request headers.",0,N],[3,"Response","","A parsed Response.",N,N],[12,"version","","The response version, such as `HTTP/1.1`.",1,N],[12,"code","","The response code, such as `200`.",1,N],[12,"reason","","The response reason-phrase, such as `OK`.",1,N],[12,"headers","","The response headers.",1,N],[3,"Header","","Represents a parsed header.",N,N],[12,"name","","The name portion of a header.",2,N],[12,"value","","The value portion of a header.",2,N],[4,"Error","","An error in parsing.",N,N],[13,"HeaderName","","Invalid byte in header name.",3,N],[13,"HeaderValue","","Invalid byte in header value.",3,N],[13,"NewLine","","Invalid byte in new line.",3,N],[13,"Status","","Invalid byte in Response status.",3,N],[13,"Token","","Invalid byte where token is required.",3,N],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,N],[13,"Version","","Invalid byte in HTTP version.",3,N],[4,"Status","","The result of a successful parse pass.",N,N],[13,"Complete","","The completed result.",4,N],[13,"Partial","","A partial result.",4,N],[5,"parse_headers","","Parse a buffer of bytes as headers.",N,N],[5,"parse_chunk_size","","Parse a buffer of bytes as a chunk size.",N,N],[6,"Result","","A Result of any parsing action.",N,N],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for parsing.",N,N],[11,"clone","","",3,[[["self"]],["error"]]],[11,"eq","","",3,[[["self"],["error"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["invalidchunksize"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["status"]]],[11,"eq","","",4,[[["self"],["status"]],["bool"]]],[11,"ne","","",4,[[["self"],["status"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"is_complete","","Convenience method to check if status is complete.",4,[[["self"]],["bool"]]],[11,"is_partial","","Convenience method to check if status is partial.",4,[[["self"]],["bool"]]],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is `Partial`.",4,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["request"]],["bool"]]],[11,"ne","","",0,[[["self"],["request"]],["bool"]]],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,N],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["response"]],["bool"]]],[11,"ne","","",1,[[["self"],["response"]],["bool"]]],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,N],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,N],[11,"clone","","",2,[[["self"]],["header"]]],[11,"eq","","",2,[[["self"],["header"]],["bool"]]],[11,"ne","","",2,[[["self"],["header"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"],[3,"InvalidChunkSize"]]};
searchIndex["hyper"]={"doc":"Hyper","items":[[3,"Url","hyper","A parsed URL record.",N,N],[3,"LanguageTag","","A language tag as described in BCP47.",N,N],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,N],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,N],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,N],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,N],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,N],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,N],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,N],[0,"client","","HTTP Client",N,N],[3,"Client","hyper::client","A Client to use additional features with Requests.",N,N],[3,"RequestBuilder","","Options for an individual Request.",N,N],[3,"ProxyConfig","","Proxy server configuration with a custom connector and TLS wrapper.",N,N],[4,"Body","","An enum of possible body types for a Request.",N,N],[13,"ChunkedBody","","A Reader does not necessarily know it's size, so it is chunked.",1,N],[13,"SizedBody","","For Readers that can know their size, like a `File`.",1,N],[13,"BufBody","","A String has a size, and uses Content-Length.",1,N],[4,"RedirectPolicy","","Behavior regarding how to handle redirects within a Client.",N,N],[13,"FollowNone","","Don't follow any redirects.",2,N],[13,"FollowAll","","Follow all redirects.",2,N],[13,"FollowIf","","Follow a redirect if the contained function returns true.",2,N],[0,"pool","","Client Connection Pooling",N,N],[3,"Pool","hyper::client::pool","The `NetworkConnector` that behaves as a connection pool used by hyper's `Client`.",N,N],[3,"Config","","Config options for the `Pool`.",N,N],[12,"max_idle","","The maximum idle connections per host.",3,N],[3,"PooledStream","","A Stream that will try to be returned to the Pool when dropped.",N,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["config"]]],[11,"new","","Creates a `Pool` with a `DefaultConnector`.",4,[[["config"]],["pool",["defaultconnector"]]]],[11,"with_connector","","Creates a `Pool` with a specified `NetworkConnector`.",4,[[["config"],["c"]],["pool"]]],[11,"set_idle_timeout","","Set a duration for how long an idle connection is still valid.",4,[[["self"],["option",["duration"]]]]],[11,"set_stale_check","","",4,[[["self"],["f"]]]],[11,"clear_idle","","Clear all idle connections from the Pool, closing them.",4,[[["self"]]]],[11,"connect","","",4,[[["self"],["str"],["u16"],["str"]],["result",["pooledstream"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Take the wrapped stream out of the pool completely.",5,[[["self"]],["s"]]],[11,"get_ref","","Gets a borrowed reference to the underlying stream.",5,[[["self"]],["s"]]],[11,"read","","",5,N],[11,"write","","",5,N],[11,"flush","","",5,[[["self"]],["result"]]],[11,"peer_addr","","",5,[[["self"]],["result",["socketaddr"]]]],[11,"set_read_timeout","","",5,[[["self"],["option",["duration"]]],["result"]]],[11,"set_write_timeout","","",5,[[["self"],["option",["duration"]]],["result"]]],[11,"close","","",5,[[["self"],["shutdown"]],["result"]]],[11,"set_previous_response_expected_no_content","","",5,[[["self"],["bool"]]]],[11,"previous_response_expected_no_content","","",5,[[["self"]],["bool"]]],[11,"drop","","",5,[[["self"]]]],[0,"request","hyper::client","Client Requests",N,N],[3,"Request","hyper::client::request","A client request to a remote server. The W type tracks the state of the request, Fresh vs Streaming.",N,N],[12,"url","","The target URI for this request.",6,N],[12,"version","","The HTTP version of this request.",6,N],[11,"headers","","Read the Request headers.",6,[[["self"]],["headers"]]],[11,"method","","Read the Request method.",6,[[["self"]],["method"]]],[11,"set_write_timeout","","Set the write timeout.",6,[[["self"],["option",["duration"]]],["result"]]],[11,"set_read_timeout","","Set the read timeout.",6,[[["self"],["option",["duration"]]],["result"]]],[11,"with_message","","Create a new `Request<Fresh>` that will use the given `HttpMessage` for its communication with the server. This implies that the given `HttpMessage` instance has already been properly initialized by the caller (e.g. a TCP connection's already established).",6,[[["method"],["url"],["box",["httpmessage"]]],["result",["request"]]]],[11,"new","","Create a new client request.",6,[[["method"],["url"]],["result",["request"]]]],[11,"with_connector","","Create a new client request with a specific underlying NetworkStream.",6,[[["method"],["url"],["c"]],["result",["request"]]]],[11,"start","","Consume a Fresh Request, writing the headers and method, returning a Streaming Request.",6,[[["self"]],["result",["request"]]]],[11,"headers_mut","","Get a mutable reference to the Request headers.",6,[[["self"]],["headers"]]],[11,"send","","Completes writing the request, and returns a response to read from.",6,[[["self"]],["result",["response"]]]],[11,"write","","",6,N],[11,"flush","","",6,[[["self"]],["result"]]],[0,"response","hyper::client","Client Responses",N,N],[3,"Response","hyper::client::response","A response for a client request to a remote server.",N,N],[12,"status","","The status from the server.",7,N],[12,"headers","","The headers from the server.",7,N],[12,"version","","The HTTP version of this response from the server.",7,N],[12,"url","","The final URL of this response.",7,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new response from a server.",7,[[["url"],["box",["networkstream"]]],["result",["response"]]]],[11,"with_message","","Creates a new response received from the server on the given `HttpMessage`.",7,[[["url"],["box",["httpmessage"]]],["result",["response"]]]],[11,"status_raw","","Get the raw status code and reason.",7,[[["self"]],["rawstatus"]]],[11,"get_ref","","Gets a borrowed reference to the underlying `HttpMessage`.",7,[[["self"]],["httpmessage"]]],[11,"read","","",7,N],[11,"drop","","",7,[[["self"]]]],[8,"IntoUrl","hyper::client","A helper trait to convert common objects into a Url.",N,N],[10,"into_url","","Consumes the object, trying to return a Url.",8,[[["self"]],["result",["url","urlerror"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new Client.",9,[[],["client"]]],[11,"with_pool_config","","Create a new Client with a configured Pool Config.",9,[[["config"]],["client"]]],[11,"with_http_proxy","","Create a Client with an HTTP proxy to a (host, port).",9,[[["h"],["u16"]],["client"]]],[11,"with_proxy_config","","Create a Client using a proxy with a custom connector and SSL client.",9,[[["proxyconfig"]],["client"]]],[11,"with_connector","","Create a new client with a specific connector.",9,[[["c"]],["client"]]],[11,"with_protocol","","Create a new client with a specific `Protocol`.",9,[[["p"]],["client"]]],[11,"set_redirect_policy","","Set the RedirectPolicy.",9,[[["self"],["redirectpolicy"]]]],[11,"set_read_timeout","","Set the read timeout value for all requests.",9,[[["self"],["option",["duration"]]]]],[11,"set_write_timeout","","Set the write timeout value for all requests.",9,[[["self"],["option",["duration"]]]]],[11,"get","","Build a Get request.",9,[[["self"],["u"]],["requestbuilder"]]],[11,"head","","Build a Head request.",9,[[["self"],["u"]],["requestbuilder"]]],[11,"patch","","Build a Patch request.",9,[[["self"],["u"]],["requestbuilder"]]],[11,"post","","Build a Post request.",9,[[["self"],["u"]],["requestbuilder"]]],[11,"put","","Build a Put request.",9,[[["self"],["u"]],["requestbuilder"]]],[11,"delete","","Build a Delete request.",9,[[["self"],["u"]],["requestbuilder"]]],[11,"request","","Build a new request using this Client.",9,[[["self"],["method"],["u"]],["requestbuilder"]]],[11,"default","","",9,[[],["client"]]],[11,"body","","Set a request body to be sent.",10,[[["self"],["b"]],["requestbuilder"]]],[11,"headers","","Add additional headers to the request.",10,[[["self"],["headers"]],["requestbuilder"]]],[11,"header","","Add an individual new header to the request.",10,[[["self"],["h"]],["requestbuilder"]]],[11,"send","","Execute this request and receive a Response back.",10,[[["self"]],["result",["response"]]]],[11,"read","","",1,N],[11,"from","","",1,[[["r"]],["body"]]],[11,"into_url","hyper","",11,[[["self"]],["result",["url","urlerror"]]]],[11,"new","hyper::client","Create a new `ProxyConfig`.",12,[[["str"],["h"],["u16"],["c"],["s"]],["proxyconfig"]]],[11,"set_pool_config","","Change the `pool::Config` for the proxy.",12,[[["self"],["option",["config"]]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["redirectpolicy"]]],[11,"default","","",2,[[],["redirectpolicy"]]],[0,"error","hyper","Error and Result module.",N,N],[4,"ParseError","hyper::error","Errors that can occur during parsing.",N,N],[13,"EmptyHost","","",13,N],[13,"IdnaError","","",13,N],[13,"InvalidPort","","",13,N],[13,"InvalidIpv4Address","","",13,N],[13,"InvalidIpv6Address","","",13,N],[13,"InvalidDomainCharacter","","",13,N],[13,"RelativeUrlWithoutBase","","",13,N],[13,"RelativeUrlWithCannotBeABaseBase","","",13,N],[13,"SetHostOnCannotBeABaseUrl","","",13,N],[13,"Overflow","","",13,N],[4,"Error","","A set of errors that can occur parsing HTTP streams.",N,N],[13,"Method","","An invalid `Method`, such as `GE,T`.",14,N],[13,"Uri","","An invalid `RequestUri`, such as `exam ple.domain`.",14,N],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",14,N],[13,"Header","","An invalid `Header`.",14,N],[13,"TooLarge","","A message head is too large to be reasonable.",14,N],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",14,N],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",14,N],[13,"Ssl","","An error from a SSL library.",14,N],[13,"Utf8","","Parsing a field as string failed",14,N],[6,"Result","","Result type often returned from methods that can have hyper `Error`s.",N,N],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"description","","",14,[[["self"]],["str"]]],[11,"cause","","",14,[[["self"]],["option",["stderror"]]]],[11,"from","","",14,[[["ioerror"]],["error"]]],[11,"from","","",14,[[["parseerror"]],["error"]]],[11,"from","","",14,[[["utf8error"]],["error"]]],[11,"from","","",14,[[["fromutf8error"]],["error"]]],[11,"from","","",14,[[["error"]],["error"]]],[0,"method","hyper","The HTTP request method",N,N],[4,"Method","hyper::method","The Request Method (VERB)",N,N],[13,"Options","","OPTIONS",15,N],[13,"Get","","GET",15,N],[13,"Post","","POST",15,N],[13,"Put","","PUT",15,N],[13,"Delete","","DELETE",15,N],[13,"Head","","HEAD",15,N],[13,"Trace","","TRACE",15,N],[13,"Connect","","CONNECT",15,N],[13,"Patch","","PATCH",15,N],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",15,N],[11,"clone","","",15,[[["self"]],["method"]]],[11,"eq","","",15,[[["self"],["method"]],["bool"]]],[11,"ne","","",15,[[["self"],["method"]],["bool"]]],[11,"hash","","",15,N],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",15,[[["self"]],["str"]]],[11,"safe","","Whether a method is considered \"safe\", meaning the request is essentially read-only.",15,[[["self"]],["bool"]]],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result is executed multiple times.",15,[[["self"]],["bool"]]],[11,"from_str","","",15,[[["str"]],["result",["method","error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[0,"header","hyper","Headers container, and common header fields.",N,N],[3,"EntityTag","hyper::header","An entity tag, defined in RFC7232",N,N],[12,"weak","","Weakness indicator for the tag",16,N],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",N,N],[12,"0","","",17,N],[3,"Quality","","Represents a quality used in quality values.",N,N],[12,"0","","",18,N],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",N,N],[12,"item","","The actual contents of the field.",19,N],[12,"quality","","The quality (client or server preference) for the value.",19,N],[3,"Accept","","`Accept` header, defined in RFC7231",N,N],[12,"0","","",20,N],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",N,N],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",N,N],[12,"0","","",21,N],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",N,N],[12,"0","","",22,N],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",N,N],[12,"0","","",23,N],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",N,N],[12,"0","","",24,N],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",N,N],[12,"0","","",25,N],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",N,N],[12,"0","","",26,N],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",N,N],[12,"0","","",27,N],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",N,N],[12,"0","","",28,N],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",N,N],[12,"0","","",29,N],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",N,N],[12,"0","","",30,N],[3,"Allow","","`Allow` header, defined in RFC7231",N,N],[12,"0","","",31,N],[3,"Authorization","","`Authorization` header, defined in RFC7235",N,N],[12,"0","","",32,N],[3,"Basic","","Credential holder for Basic Authentication",N,N],[12,"username","","The username as a possibly empty string",33,N],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input.",33,N],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",N,N],[12,"token","","Actual bearer token as a string",34,N],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",N,N],[12,"0","","",35,N],[3,"Connection","","`Connection` header, defined in RFC7230",N,N],[12,"0","","",36,N],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266",N,N],[12,"disposition","","The disposition",37,N],[12,"parameters","","Disposition parameters",37,N],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",N,N],[12,"0","","",38,N],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",N,N],[12,"0","","",39,N],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",N,N],[12,"0","","",40,N],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",N,N],[12,"0","","",41,N],[3,"ContentType","","`Content-Type` header, defined in RFC7231",N,N],[12,"0","","",42,N],[3,"Cookie","","`Cookie` header, defined in RFC6265",N,N],[12,"0","","",43,N],[3,"Date","","`Date` header, defined in RFC7231",N,N],[12,"0","","",44,N],[3,"ETag","","`ETag` header, defined in RFC7232",N,N],[12,"0","","",45,N],[3,"Expires","","`Expires` header, defined in RFC7234",N,N],[12,"0","","",46,N],[3,"From","","`From` header, defined in RFC7231",N,N],[12,"0","","",47,N],[3,"Host","","The `Host` header.",N,N],[12,"hostname","","The hostname, such a example.domain.",48,N],[12,"port","","An optional port number.",48,N],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",N,N],[12,"0","","",49,N],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",N,N],[12,"0","","",50,N],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",N,N],[12,"0","","",51,N],[3,"Location","","`Location` header, defined in RFC7231",N,N],[12,"0","","",52,N],[3,"Origin","","The `Origin` header.",N,N],[12,"scheme","","The scheme, such as http or https",53,N],[12,"host","","The host, such as Host{hostname: \"hyper.rs\".to_owned(), port: None}",53,N],[3,"Prefer","","`Prefer` header, defined in RFC7240",N,N],[12,"0","","",54,N],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",N,N],[12,"0","","",55,N],[3,"Referer","","`Referer` header, defined in RFC7231",N,N],[12,"0","","",56,N],[3,"Server","","`Server` header, defined in RFC7231",N,N],[12,"0","","",57,N],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",N,N],[12,"0","","",58,N],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",N,N],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",59,N],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",59,N],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",N,N],[12,"0","","",60,N],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",N,N],[12,"0","","",61,N],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",N,N],[12,"name","","The protocol identifier",62,N],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",62,N],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",N,N],[12,"0","","",63,N],[3,"Link","","The `Link` header, defined in RFC5988",N,N],[3,"LinkValue","","A single `link-value` of a `Link` header, based on: RFC5988",N,N],[3,"Headers","","A map of header fields on requests and responses.",N,N],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",N,N],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",N,N],[3,"HeaderFormatter","","A wrapper around any Header with a Display impl that calls fmt_header.",N,N],[12,"0","","",64,N],[4,"Charset","","A Mime charset.",N,N],[13,"Us_Ascii","","US ASCII",65,N],[13,"Iso_8859_1","","ISO-8859-1",65,N],[13,"Iso_8859_2","","ISO-8859-2",65,N],[13,"Iso_8859_3","","ISO-8859-3",65,N],[13,"Iso_8859_4","","ISO-8859-4",65,N],[13,"Iso_8859_5","","ISO-8859-5",65,N],[13,"Iso_8859_6","","ISO-8859-6",65,N],[13,"Iso_8859_7","","ISO-8859-7",65,N],[13,"Iso_8859_8","","ISO-8859-8",65,N],[13,"Iso_8859_9","","ISO-8859-9",65,N],[13,"Iso_8859_10","","ISO-8859-10",65,N],[13,"Shift_Jis","","Shift_JIS",65,N],[13,"Euc_Jp","","EUC-JP",65,N],[13,"Iso_2022_Kr","","ISO-2022-KR",65,N],[13,"Euc_Kr","","EUC-KR",65,N],[13,"Iso_2022_Jp","","ISO-2022-JP",65,N],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",65,N],[13,"Iso_8859_6_E","","ISO-8859-6-E",65,N],[13,"Iso_8859_6_I","","ISO-8859-6-I",65,N],[13,"Iso_8859_8_E","","ISO-8859-8-E",65,N],[13,"Iso_8859_8_I","","ISO-8859-8-I",65,N],[13,"Gb2312","","GB2312",65,N],[13,"Big5","","Big5",65,N],[13,"Koi8_R","","KOI8-R",65,N],[13,"Ext","","An arbitrary charset specified as a string",65,N],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",N,N],[13,"Chunked","","The `chunked` encoding.",66,N],[13,"Gzip","","The `gzip` encoding.",66,N],[13,"Deflate","","The `deflate` encoding.",66,N],[13,"Compress","","The `compress` encoding.",66,N],[13,"Identity","","The `identity` encoding.",66,N],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",66,N],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",N,N],[13,"Any","","Allow all origins",67,N],[13,"Null","","A hidden origin",67,N],[13,"Value","","Allow one particular origin",67,N],[4,"RangeUnit","","Range Units, described in RFC7233",N,N],[13,"Bytes","","Indicating byte-range requests are supported.",68,N],[13,"None","","Reserved as keyword, indicating no ranges are supported.",68,N],[13,"Unregistered","","The given range unit is not registered at IANA.",68,N],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",N,N],[13,"NoCache","","\"no-cache\"",69,N],[13,"NoStore","","\"no-store\"",69,N],[13,"NoTransform","","\"no-transform\"",69,N],[13,"OnlyIfCached","","\"only-if-cached\"",69,N],[13,"MaxAge","","\"max-age=delta\"",69,N],[13,"MaxStale","","\"max-stale=delta\"",69,N],[13,"MinFresh","","\"min-fresh=delta\"",69,N],[13,"MustRevalidate","","\"must-revalidate\"",69,N],[13,"Public","","\"public\"",69,N],[13,"Private","","\"private\"",69,N],[13,"ProxyRevalidate","","\"proxy-revalidate\"",69,N],[13,"SMaxAge","","\"s-maxage=delta\"",69,N],[13,"Extension","","Extension directives. Optionally include an argument.",69,N],[4,"ConnectionOption","","Values that can be in the `Connection` header.",N,N],[13,"KeepAlive","","The `keep-alive` connection value.",70,N],[13,"Close","","The `close` connection value.",70,N],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",70,N],[4,"DispositionType","","The implied disposition of the content of the HTTP body",N,N],[13,"Inline","","Inline implies default processing",71,N],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",71,N],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",71,N],[4,"DispositionParam","","A parameter to the disposition type",N,N],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",72,N],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",72,N],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",N,N],[13,"Bytes","","Byte range",73,N],[12,"range","hyper::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",73,N],[12,"instance_length","","Total length of the instance, can be omitted if unknown",73,N],[13,"Unregistered","hyper::header","Custom range, with unit not registered at IANA",73,N],[12,"unit","hyper::header::ContentRangeSpec","other-range-unit",73,N],[12,"resp","","other-range-resp",73,N],[4,"Expect","hyper::header","The `Expect` header.",N,N],[13,"Continue","","The value `100-continue`.",74,N],[4,"IfMatch","","`If-Match` header, defined in RFC7232",N,N],[13,"Any","","Any value is a match",75,N],[13,"Items","","Only the listed items are a match",75,N],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",N,N],[13,"Any","","Any value is a match",76,N],[13,"Items","","Only the listed items are a match",76,N],[4,"IfRange","","`If-Range` header, defined in RFC7233",N,N],[13,"EntityTag","","The entity-tag the client has of the resource",77,N],[13,"Date","","The date when the client retrieved the resource",77,N],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",N,N],[13,"NoCache","","Corresponds to the `no-cache` value.",78,N],[13,"Ext","","Every value other than `no-cache`.",78,N],[4,"Preference","","Prefer contains a list of these preferences.",N,N],[13,"RespondAsync","","\"respond-async\"",79,N],[13,"ReturnRepresentation","","\"return=representation\"",79,N],[13,"ReturnMinimal","","\"return=minimal\"",79,N],[13,"HandlingStrict","","\"handling=strict\"",79,N],[13,"HandlingLeniant","","\"handling=leniant\"",79,N],[13,"Wait","","\"wait=delta\"",79,N],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",79,N],[4,"Range","","`Range` header, defined in RFC7233",N,N],[13,"Bytes","","Byte range",80,N],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",80,N],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",N,N],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",81,N],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",81,N],[13,"Last","","Get last x bytes (\"-x\")",81,N],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",N,N],[13,"NoReferrer","","`no-referrer`",82,N],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",82,N],[13,"SameOrigin","","`same-origin`",82,N],[13,"Origin","","`origin`",82,N],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",82,N],[13,"UnsafeUrl","","`unsafe-url`",82,N],[13,"StrictOrigin","","`strict-origin`",82,N],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",82,N],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive except for the `WebSocket` value.",N,N],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",83,N],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",83,N],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",83,N],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",83,N],[13,"Unregistered","","Any other protocol name not known to hyper",83,N],[4,"Vary","","`Vary` header, defined in RFC7231",N,N],[13,"Any","","Any value is a match",84,N],[13,"Items","","Only the listed items are a match",84,N],[4,"RelationType","","A Link Relation Type Enum based on: RFC5988",N,N],[13,"Alternate","","alternate.",85,N],[13,"Appendix","","appendix.",85,N],[13,"Bookmark","","bookmark.",85,N],[13,"Chapter","","chapter.",85,N],[13,"Contents","","contents.",85,N],[13,"Copyright","","copyright.",85,N],[13,"Current","","current.",85,N],[13,"DescribedBy","","describedby.",85,N],[13,"Edit","","edit.",85,N],[13,"EditMedia","","edit-media.",85,N],[13,"Enclosure","","enclosure.",85,N],[13,"First","","first.",85,N],[13,"Glossary","","glossary.",85,N],[13,"Help","","help.",85,N],[13,"Hub","","hub.",85,N],[13,"Index","","index.",85,N],[13,"Last","","last.",85,N],[13,"LatestVersion","","latest-version.",85,N],[13,"License","","license.",85,N],[13,"Next","","next.",85,N],[13,"NextArchive","","next-archive.",85,N],[13,"Payment","","payment.",85,N],[13,"Prev","","prev.",85,N],[13,"PredecessorVersion","","predecessor-version.",85,N],[13,"Previous","","previous.",85,N],[13,"PrevArchive","","prev-archive.",85,N],[13,"Related","","related.",85,N],[13,"Replies","","replies.",85,N],[13,"Section","","section.",85,N],[13,"RelationTypeSelf","","self.",85,N],[13,"Service","","service.",85,N],[13,"Start","","start.",85,N],[13,"Stylesheet","","stylesheet.",85,N],[13,"Subsection","","subsection.",85,N],[13,"SuccessorVersion","","successor-version.",85,N],[13,"Up","","up.",85,N],[13,"VersionHistory","","versionHistory.",85,N],[13,"Via","","via.",85,N],[13,"WorkingCopy","","working-copy.",85,N],[13,"WorkingCopyOf","","working-copy-of.",85,N],[13,"ExtRelType","","ext-rel-type.",85,N],[4,"MediaDesc","","A Media Descriptors Enum based on: https://www.w3.org/TR/html401/types.html#h-6.13",N,N],[13,"Screen","","screen.",86,N],[13,"Tty","","tty.",86,N],[13,"Tv","","tv.",86,N],[13,"Projection","","projection.",86,N],[13,"Handheld","","handheld.",86,N],[13,"Print","","print.",86,N],[13,"Braille","","braille.",86,N],[13,"Aural","","aural.",86,N],[13,"All","","all.",86,N],[13,"Extension","","Unrecognized media descriptor extension.",86,N],[5,"qitem","","Convinience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",N,[[["t"]],["qualityitem"]]],[5,"q","","Convenience function to create a `Quality` from a float.",N,[[["f32"]],["quality"]]],[11,"clone","","",20,[[["self"]],["accept"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["accept"]],["bool"]]],[11,"ne","","",20,[[["self"],["accept"]],["bool"]]],[11,"deref","","",20,[[["self"]],["vec"]]],[11,"deref_mut","","",20,[[["self"]],["vec"]]],[11,"header_name","","",20,[[],["str"]]],[11,"parse_header","","",20,N],[11,"fmt_header","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"star","","A constructor to easily create `Accept: */*`.",20,[[],["accept"]]],[11,"json","","A constructor to easily create `Accept: application/json`.",20,[[],["accept"]]],[11,"text","","A constructor to easily create `Accept: text/*`.",20,[[],["accept"]]],[11,"image","","A constructor to easily create `Accept: image/*`.",20,[[],["accept"]]],[11,"clone","","",87,[[["self"]],["accesscontrolallowcredentials"]]],[11,"eq","","",87,[[["self"],["accesscontrolallowcredentials"]],["bool"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"header_name","","",87,[[],["str"]]],[11,"parse_header","","",87,N],[11,"fmt_header","","",87,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["accesscontrolallowheaders"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"ne","","",21,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"deref","","",21,[[["self"]],["vec"]]],[11,"deref_mut","","",21,[[["self"]],["vec"]]],[11,"header_name","","",21,[[],["str"]]],[11,"parse_header","","",21,N],[11,"fmt_header","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["accesscontrolallowmethods"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["accesscontrolallowmethods"]],["bool"]]],[11,"ne","","",22,[[["self"],["accesscontrolallowmethods"]],["bool"]]],[11,"deref","","",22,[[["self"]],["vec"]]],[11,"deref_mut","","",22,[[["self"]],["vec"]]],[11,"header_name","","",22,[[],["str"]]],[11,"parse_header","","",22,N],[11,"fmt_header","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",67,[[["self"]],["accesscontrolalloworigin"]]],[11,"eq","","",67,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"ne","","",67,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"header_name","","",67,[[],["str"]]],[11,"parse_header","","",67,N],[11,"fmt_header","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["accesscontrolexposeheaders"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["accesscontrolexposeheaders"]],["bool"]]],[11,"ne","","",23,[[["self"],["accesscontrolexposeheaders"]],["bool"]]],[11,"deref","","",23,[[["self"]],["vec"]]],[11,"deref_mut","","",23,[[["self"]],["vec"]]],[11,"header_name","","",23,[[],["str"]]],[11,"parse_header","","",23,N],[11,"fmt_header","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",24,[[["self"]],["accesscontrolmaxage"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["accesscontrolmaxage"]],["bool"]]],[11,"ne","","",24,[[["self"],["accesscontrolmaxage"]],["bool"]]],[11,"deref","","",24,[[["self"]],["u32"]]],[11,"deref_mut","","",24,[[["self"]],["u32"]]],[11,"header_name","","",24,[[],["str"]]],[11,"parse_header","","",24,N],[11,"fmt_header","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",25,[[["self"]],["accesscontrolrequestheaders"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["accesscontrolrequestheaders"]],["bool"]]],[11,"ne","","",25,[[["self"],["accesscontrolrequestheaders"]],["bool"]]],[11,"deref","","",25,[[["self"]],["vec"]]],[11,"deref_mut","","",25,[[["self"]],["vec"]]],[11,"header_name","","",25,[[],["str"]]],[11,"parse_header","","",25,N],[11,"fmt_header","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["accesscontrolrequestmethod"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["accesscontrolrequestmethod"]],["bool"]]],[11,"ne","","",26,[[["self"],["accesscontrolrequestmethod"]],["bool"]]],[11,"deref","","",26,[[["self"]],["method"]]],[11,"deref_mut","","",26,[[["self"]],["method"]]],[11,"header_name","","",26,[[],["str"]]],[11,"parse_header","","",26,N],[11,"fmt_header","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["acceptcharset"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["acceptcharset"]],["bool"]]],[11,"ne","","",27,[[["self"],["acceptcharset"]],["bool"]]],[11,"deref","","",27,[[["self"]],["vec"]]],[11,"deref_mut","","",27,[[["self"]],["vec"]]],[11,"header_name","","",27,[[],["str"]]],[11,"parse_header","","",27,N],[11,"fmt_header","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",28,[[["self"]],["acceptencoding"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["acceptencoding"]],["bool"]]],[11,"ne","","",28,[[["self"],["acceptencoding"]],["bool"]]],[11,"deref","","",28,[[["self"]],["vec"]]],[11,"deref_mut","","",28,[[["self"]],["vec"]]],[11,"header_name","","",28,[[],["str"]]],[11,"parse_header","","",28,N],[11,"fmt_header","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"clone","","",29,[[["self"]],["acceptlanguage"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["acceptlanguage"]],["bool"]]],[11,"ne","","",29,[[["self"],["acceptlanguage"]],["bool"]]],[11,"deref","","",29,[[["self"]],["vec"]]],[11,"deref_mut","","",29,[[["self"]],["vec"]]],[11,"header_name","","",29,[[],["str"]]],[11,"parse_header","","",29,N],[11,"fmt_header","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"clone","","",30,[[["self"]],["acceptranges"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["acceptranges"]],["bool"]]],[11,"ne","","",30,[[["self"],["acceptranges"]],["bool"]]],[11,"deref","","",30,[[["self"]],["vec"]]],[11,"deref_mut","","",30,[[["self"]],["vec"]]],[11,"header_name","","",30,[[],["str"]]],[11,"parse_header","","",30,N],[11,"fmt_header","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"clone","","",68,[[["self"]],["rangeunit"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"eq","","",68,[[["self"],["rangeunit"]],["bool"]]],[11,"ne","","",68,[[["self"],["rangeunit"]],["bool"]]],[11,"from_str","","",68,[[["str"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"clone","","",31,[[["self"]],["allow"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["allow"]],["bool"]]],[11,"ne","","",31,[[["self"],["allow"]],["bool"]]],[11,"deref","","",31,[[["self"]],["vec"]]],[11,"deref_mut","","",31,[[["self"]],["vec"]]],[11,"header_name","","",31,[[],["str"]]],[11,"parse_header","","",31,N],[11,"fmt_header","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"clone","","",32,[[["self"]],["authorization"]]],[11,"eq","","",32,[[["self"],["authorization"]],["bool"]]],[11,"ne","","",32,[[["self"],["authorization"]],["bool"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"deref","","",32,[[["self"]],["s"]]],[11,"deref_mut","","",32,[[["self"]],["s"]]],[11,"header_name","","",32,[[],["str"]]],[11,"parse_header","","",32,N],[11,"fmt_header","","",32,[[["self"],["formatter"]],["result"]]],[11,"clone","","",33,[[["self"]],["basic"]]],[11,"eq","","",33,[[["self"],["basic"]],["bool"]]],[11,"ne","","",33,[[["self"],["basic"]],["bool"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"scheme","","",33,[[],["option",["str"]]]],[11,"fmt_scheme","","",33,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",33,[[["str"]],["result",["basic"]]]],[11,"clone","","",34,[[["self"]],["bearer"]]],[11,"eq","","",34,[[["self"],["bearer"]],["bool"]]],[11,"ne","","",34,[[["self"],["bearer"]],["bool"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"scheme","","",34,[[],["option",["str"]]]],[11,"fmt_scheme","","",34,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",34,[[["str"]],["result",["bearer"]]]],[11,"eq","","",35,[[["self"],["cachecontrol"]],["bool"]]],[11,"ne","","",35,[[["self"],["cachecontrol"]],["bool"]]],[11,"clone","","",35,[[["self"]],["cachecontrol"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"deref","","",35,[[["self"]],["vec"]]],[11,"deref_mut","","",35,[[["self"]],["vec"]]],[11,"header_name","","",35,[[],["str"]]],[11,"parse_header","","",35,N],[11,"fmt_header","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",69,[[["self"],["cachedirective"]],["bool"]]],[11,"ne","","",69,[[["self"],["cachedirective"]],["bool"]]],[11,"clone","","",69,[[["self"]],["cachedirective"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",69,[[["str"]],["result",["cachedirective","option"]]]],[11,"clone","","",43,[[["self"]],["cookie"]]],[11,"eq","","",43,[[["self"],["cookie"]],["bool"]]],[11,"ne","","",43,[[["self"],["cookie"]],["bool"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"deref","","",43,[[["self"]],["vec"]]],[11,"deref_mut","","",43,[[["self"]],["vec"]]],[11,"header_name","","",43,[[],["str"]]],[11,"parse_header","","",43,N],[11,"fmt_header","","",43,[[["self"],["formatter"]],["result"]]],[11,"clone","","",70,[[["self"]],["connectionoption"]]],[11,"eq","","",70,[[["self"],["connectionoption"]],["bool"]]],[11,"ne","","",70,[[["self"],["connectionoption"]],["bool"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",70,[[["str"]],["result",["connectionoption"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"clone","","",36,[[["self"]],["connection"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",36,[[["self"],["connection"]],["bool"]]],[11,"ne","","",36,[[["self"],["connection"]],["bool"]]],[11,"deref","","",36,[[["self"]],["vec"]]],[11,"deref_mut","","",36,[[["self"]],["vec"]]],[11,"header_name","","",36,[[],["str"]]],[11,"parse_header","","",36,N],[11,"fmt_header","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"close","","A constructor to easily create a `Connection: close` header.",36,[[],["connection"]]],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",36,[[],["connection"]]],[11,"clone","","",71,[[["self"]],["dispositiontype"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"eq","","",71,[[["self"],["dispositiontype"]],["bool"]]],[11,"ne","","",71,[[["self"],["dispositiontype"]],["bool"]]],[11,"clone","","",72,[[["self"]],["dispositionparam"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"eq","","",72,[[["self"],["dispositionparam"]],["bool"]]],[11,"ne","","",72,[[["self"],["dispositionparam"]],["bool"]]],[11,"clone","","",37,[[["self"]],["contentdisposition"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["contentdisposition"]],["bool"]]],[11,"ne","","",37,[[["self"],["contentdisposition"]],["bool"]]],[11,"header_name","","",37,[[],["str"]]],[11,"parse_header","","",37,N],[11,"fmt_header","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"clone","","",39,[[["self"]],["contentencoding"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["contentencoding"]],["bool"]]],[11,"ne","","",39,[[["self"],["contentencoding"]],["bool"]]],[11,"deref","","",39,[[["self"]],["vec"]]],[11,"deref_mut","","",39,[[["self"]],["vec"]]],[11,"header_name","","",39,[[],["str"]]],[11,"parse_header","","",39,N],[11,"fmt_header","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"clone","","",40,[[["self"]],["contentlanguage"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["contentlanguage"]],["bool"]]],[11,"ne","","",40,[[["self"],["contentlanguage"]],["bool"]]],[11,"deref","","",40,[[["self"]],["vec"]]],[11,"deref_mut","","",40,[[["self"]],["vec"]]],[11,"header_name","","",40,[[],["str"]]],[11,"parse_header","","",40,N],[11,"fmt_header","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"clone","","",38,[[["self"]],["contentlength"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["contentlength"]],["bool"]]],[11,"ne","","",38,[[["self"],["contentlength"]],["bool"]]],[11,"header_name","","",38,[[],["str"]]],[11,"parse_header","","",38,N],[11,"fmt_header","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"deref","","",38,[[["self"]],["u64"]]],[11,"deref_mut","","",38,[[["self"]],["u64"]]],[11,"clone","","",41,[[["self"]],["contentrange"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["contentrange"]],["bool"]]],[11,"ne","","",41,[[["self"],["contentrange"]],["bool"]]],[11,"deref","","",41,[[["self"]],["contentrangespec"]]],[11,"deref_mut","","",41,[[["self"]],["contentrangespec"]]],[11,"header_name","","",41,[[],["str"]]],[11,"parse_header","","",41,N],[11,"fmt_header","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",73,[[["self"],["contentrangespec"]],["bool"]]],[11,"ne","","",73,[[["self"],["contentrangespec"]],["bool"]]],[11,"clone","","",73,[[["self"]],["contentrangespec"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",73,[[["str"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"clone","","",42,[[["self"]],["contenttype"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"eq","","",42,[[["self"],["contenttype"]],["bool"]]],[11,"ne","","",42,[[["self"],["contenttype"]],["bool"]]],[11,"deref","","",42,[[["self"]],["mime"]]],[11,"deref_mut","","",42,[[["self"]],["mime"]]],[11,"header_name","","",42,[[],["str"]]],[11,"parse_header","","",42,N],[11,"fmt_header","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",42,[[],["contenttype"]]],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",42,[[],["contenttype"]]],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",42,[[],["contenttype"]]],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",42,[[],["contenttype"]]],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",42,[[],["contenttype"]]],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",42,[[],["contenttype"]]],[11,"clone","","",44,[[["self"]],["date"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"eq","","",44,[[["self"],["date"]],["bool"]]],[11,"ne","","",44,[[["self"],["date"]],["bool"]]],[11,"deref","","",44,[[["self"]],["httpdate"]]],[11,"deref_mut","","",44,[[["self"]],["httpdate"]]],[11,"header_name","","",44,[[],["str"]]],[11,"parse_header","","",44,N],[11,"fmt_header","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"clone","","",45,[[["self"]],["etag"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"eq","","",45,[[["self"],["etag"]],["bool"]]],[11,"ne","","",45,[[["self"],["etag"]],["bool"]]],[11,"deref","","",45,[[["self"]],["entitytag"]]],[11,"deref_mut","","",45,[[["self"]],["entitytag"]]],[11,"header_name","","",45,[[],["str"]]],[11,"parse_header","","",45,N],[11,"fmt_header","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"clone","","",74,[[["self"]],["expect"]]],[11,"eq","","",74,[[["self"],["expect"]],["bool"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"header_name","","",74,[[],["str"]]],[11,"parse_header","","",74,N],[11,"fmt_header","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"clone","","",46,[[["self"]],["expires"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["expires"]],["bool"]]],[11,"ne","","",46,[[["self"],["expires"]],["bool"]]],[11,"deref","","",46,[[["self"]],["httpdate"]]],[11,"deref_mut","","",46,[[["self"]],["httpdate"]]],[11,"header_name","","",46,[[],["str"]]],[11,"parse_header","","",46,N],[11,"fmt_header","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"clone","","",47,[[["self"]],["from"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["from"]],["bool"]]],[11,"ne","","",47,[[["self"],["from"]],["bool"]]],[11,"deref","","",47,[[["self"]],["string"]]],[11,"deref_mut","","",47,[[["self"]],["string"]]],[11,"header_name","","",47,[[],["str"]]],[11,"parse_header","","",47,N],[11,"fmt_header","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"clone","","",48,[[["self"]],["host"]]],[11,"eq","","",48,[[["self"],["host"]],["bool"]]],[11,"ne","","",48,[[["self"],["host"]],["bool"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"header_name","","",48,[[],["str"]]],[11,"parse_header","","",48,N],[11,"fmt_header","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",48,[[["str"]],["result",["host"]]]],[11,"clone","","",75,[[["self"]],["ifmatch"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"eq","","",75,[[["self"],["ifmatch"]],["bool"]]],[11,"ne","","",75,[[["self"],["ifmatch"]],["bool"]]],[11,"header_name","","",75,[[],["str"]]],[11,"parse_header","","",75,N],[11,"fmt_header","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"clone","","",49,[[["self"]],["ifmodifiedsince"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"eq","","",49,[[["self"],["ifmodifiedsince"]],["bool"]]],[11,"ne","","",49,[[["self"],["ifmodifiedsince"]],["bool"]]],[11,"deref","","",49,[[["self"]],["httpdate"]]],[11,"deref_mut","","",49,[[["self"]],["httpdate"]]],[11,"header_name","","",49,[[],["str"]]],[11,"parse_header","","",49,N],[11,"fmt_header","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",76,[[["self"]],["ifnonematch"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"eq","","",76,[[["self"],["ifnonematch"]],["bool"]]],[11,"ne","","",76,[[["self"],["ifnonematch"]],["bool"]]],[11,"header_name","","",76,[[],["str"]]],[11,"parse_header","","",76,N],[11,"fmt_header","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"clone","","",77,[[["self"]],["ifrange"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"eq","","",77,[[["self"],["ifrange"]],["bool"]]],[11,"ne","","",77,[[["self"],["ifrange"]],["bool"]]],[11,"header_name","","",77,[[],["str"]]],[11,"parse_header","","",77,N],[11,"fmt_header","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"clone","","",50,[[["self"]],["ifunmodifiedsince"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"eq","","",50,[[["self"],["ifunmodifiedsince"]],["bool"]]],[11,"ne","","",50,[[["self"],["ifunmodifiedsince"]],["bool"]]],[11,"deref","","",50,[[["self"]],["httpdate"]]],[11,"deref_mut","","",50,[[["self"]],["httpdate"]]],[11,"header_name","","",50,[[],["str"]]],[11,"parse_header","","",50,N],[11,"fmt_header","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"clone","","",51,[[["self"]],["lastmodified"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"eq","","",51,[[["self"],["lastmodified"]],["bool"]]],[11,"ne","","",51,[[["self"],["lastmodified"]],["bool"]]],[11,"deref","","",51,[[["self"]],["httpdate"]]],[11,"deref_mut","","",51,[[["self"]],["httpdate"]]],[11,"header_name","","",51,[[],["str"]]],[11,"parse_header","","",51,N],[11,"fmt_header","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"clone","","",52,[[["self"]],["location"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"eq","","",52,[[["self"],["location"]],["bool"]]],[11,"ne","","",52,[[["self"],["location"]],["bool"]]],[11,"deref","","",52,[[["self"]],["string"]]],[11,"deref_mut","","",52,[[["self"]],["string"]]],[11,"header_name","","",52,[[],["str"]]],[11,"parse_header","","",52,N],[11,"fmt_header","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"clone","","",53,[[["self"]],["origin"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `Origin` header.",53,[[["s"],["h"],["option",["u16"]]],["origin"]]],[11,"header_name","","",53,[[],["str"]]],[11,"parse_header","","",53,N],[11,"from_str","","",53,[[["str"]],["result",["origin"]]]],[11,"fmt_header","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"eq","","",53,[[["self"],["origin"]],["bool"]]],[11,"clone","","",78,[[["self"]],["pragma"]]],[11,"eq","","",78,[[["self"],["pragma"]],["bool"]]],[11,"ne","","",78,[[["self"],["pragma"]],["bool"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"header_name","","",78,[[],["str"]]],[11,"parse_header","","",78,N],[11,"fmt_header","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"eq","","",54,[[["self"],["prefer"]],["bool"]]],[11,"ne","","",54,[[["self"],["prefer"]],["bool"]]],[11,"clone","","",54,[[["self"]],["prefer"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"deref","","",54,[[["self"]],["vec"]]],[11,"deref_mut","","",54,[[["self"]],["vec"]]],[11,"header_name","","",54,[[],["str"]]],[11,"parse_header","","",54,N],[11,"fmt_header","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"eq","","",79,[[["self"],["preference"]],["bool"]]],[11,"ne","","",79,[[["self"],["preference"]],["bool"]]],[11,"clone","","",79,[[["self"]],["preference"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",79,[[["str"]],["result",["preference","option"]]]],[11,"eq","","",55,[[["self"],["preferenceapplied"]],["bool"]]],[11,"ne","","",55,[[["self"],["preferenceapplied"]],["bool"]]],[11,"clone","","",55,[[["self"]],["preferenceapplied"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"deref","","",55,[[["self"]],["vec"]]],[11,"deref_mut","","",55,[[["self"]],["vec"]]],[11,"header_name","","",55,[[],["str"]]],[11,"parse_header","","",55,N],[11,"fmt_header","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"eq","","",80,[[["self"],["range"]],["bool"]]],[11,"ne","","",80,[[["self"],["range"]],["bool"]]],[11,"clone","","",80,[[["self"]],["range"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"eq","","",81,[[["self"],["byterangespec"]],["bool"]]],[11,"ne","","",81,[[["self"],["byterangespec"]],["bool"]]],[11,"clone","","",81,[[["self"]],["byterangespec"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",80,[[["u64"],["u64"]],["range"]]],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",80,[[["vec"]],["range"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",80,[[["str"]],["result",["range"]]]],[11,"from_str","","",81,[[["str"]],["result",["byterangespec"]]]],[11,"header_name","","",80,[[],["str"]]],[11,"parse_header","","",80,N],[11,"fmt_header","","",80,[[["self"],["formatter"]],["result"]]],[11,"clone","","",56,[[["self"]],["referer"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"eq","","",56,[[["self"],["referer"]],["bool"]]],[11,"ne","","",56,[[["self"],["referer"]],["bool"]]],[11,"deref","","",56,[[["self"]],["string"]]],[11,"deref_mut","","",56,[[["self"]],["string"]]],[11,"header_name","","",56,[[],["str"]]],[11,"parse_header","","",56,N],[11,"fmt_header","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"clone","","",82,[[["self"]],["referrerpolicy"]]],[11,"eq","","",82,[[["self"],["referrerpolicy"]],["bool"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"header_name","","",82,[[],["str"]]],[11,"parse_header","","",82,N],[11,"fmt_header","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"clone","","",57,[[["self"]],["server"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"eq","","",57,[[["self"],["server"]],["bool"]]],[11,"ne","","",57,[[["self"],["server"]],["bool"]]],[11,"deref","","",57,[[["self"]],["string"]]],[11,"deref_mut","","",57,[[["self"]],["string"]]],[11,"header_name","","",57,[[],["str"]]],[11,"parse_header","","",57,N],[11,"fmt_header","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"clone","","",58,[[["self"]],["setcookie"]]],[11,"eq","","",58,[[["self"],["setcookie"]],["bool"]]],[11,"ne","","",58,[[["self"],["setcookie"]],["bool"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"deref","","",58,[[["self"]],["vec"]]],[11,"deref_mut","","",58,[[["self"]],["vec"]]],[11,"header_name","","",58,[[],["str"]]],[11,"parse_header","","",58,N],[11,"fmt_header","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt_multi_header","","",58,[[["self"],["multilineformatter"]],["result"]]],[11,"clone","","",59,[[["self"]],["stricttransportsecurity"]]],[11,"eq","","",59,[[["self"],["stricttransportsecurity"]],["bool"]]],[11,"ne","","",59,[[["self"],["stricttransportsecurity"]],["bool"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"including_subdomains","","Create an STS header that includes subdomains",59,[[["u64"]],["stricttransportsecurity"]]],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",59,[[["u64"]],["stricttransportsecurity"]]],[11,"from_str","","",59,[[["str"]],["result",["stricttransportsecurity"]]]],[11,"header_name","","",59,[[],["str"]]],[11,"parse_header","","",59,N],[11,"fmt_header","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"clone","","",60,[[["self"]],["transferencoding"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"eq","","",60,[[["self"],["transferencoding"]],["bool"]]],[11,"ne","","",60,[[["self"],["transferencoding"]],["bool"]]],[11,"deref","","",60,[[["self"]],["vec"]]],[11,"deref_mut","","",60,[[["self"]],["vec"]]],[11,"header_name","","",60,[[],["str"]]],[11,"parse_header","","",60,N],[11,"fmt_header","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"clone","","",61,[[["self"]],["upgrade"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"eq","","",61,[[["self"],["upgrade"]],["bool"]]],[11,"ne","","",61,[[["self"],["upgrade"]],["bool"]]],[11,"deref","","",61,[[["self"]],["vec"]]],[11,"deref_mut","","",61,[[["self"]],["vec"]]],[11,"header_name","","",61,[[],["str"]]],[11,"parse_header","","",61,N],[11,"fmt_header","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"clone","","",83,[[["self"]],["protocolname"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"eq","","",83,[[["self"],["protocolname"]],["bool"]]],[11,"ne","","",83,[[["self"],["protocolname"]],["bool"]]],[11,"from_str","","",83,[[["str"]],["result",["protocolname"]]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"clone","","",62,[[["self"]],["protocol"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"eq","","",62,[[["self"],["protocol"]],["bool"]]],[11,"ne","","",62,[[["self"],["protocol"]],["bool"]]],[11,"new","","Creates a new Protocol with the given name and version",62,[[["protocolname"],["option",["string"]]],["protocol"]]],[11,"from_str","","",62,[[["str"]],["result",["protocol"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"clone","","",63,[[["self"]],["useragent"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"eq","","",63,[[["self"],["useragent"]],["bool"]]],[11,"ne","","",63,[[["self"],["useragent"]],["bool"]]],[11,"deref","","",63,[[["self"]],["string"]]],[11,"deref_mut","","",63,[[["self"]],["string"]]],[11,"header_name","","",63,[[],["str"]]],[11,"parse_header","","",63,N],[11,"fmt_header","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"clone","","",84,[[["self"]],["vary"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"eq","","",84,[[["self"],["vary"]],["bool"]]],[11,"ne","","",84,[[["self"],["vary"]],["bool"]]],[11,"header_name","","",84,[[],["str"]]],[11,"parse_header","","",84,N],[11,"fmt_header","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"clone","","",88,[[["self"]],["link"]]],[11,"eq","","",88,[[["self"],["link"]],["bool"]]],[11,"ne","","",88,[[["self"],["link"]],["bool"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"clone","","",89,[[["self"]],["linkvalue"]]],[11,"eq","","",89,[[["self"],["linkvalue"]],["bool"]]],[11,"ne","","",89,[[["self"],["linkvalue"]],["bool"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"clone","","",86,[[["self"]],["mediadesc"]]],[11,"eq","","",86,[[["self"],["mediadesc"]],["bool"]]],[11,"ne","","",86,[[["self"],["mediadesc"]],["bool"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"clone","","",85,[[["self"]],["relationtype"]]],[11,"eq","","",85,[[["self"],["relationtype"]],["bool"]]],[11,"ne","","",85,[[["self"],["relationtype"]],["bool"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"new","","Create `Link` from a `Vec<LinkValue>`.",88,[[["vec",["linkvalue"]]],["link"]]],[11,"values","","Get the `Link` header's `LinkValue`s.",88,N],[11,"push_value","","Add a `LinkValue` instance to the `Link` header's values.",88,[[["self"],["linkvalue"]]]],[11,"new","","Create `LinkValue` from URI-Reference.",89,[[["t"]],["linkvalue"]]],[11,"link","","Get the `LinkValue`'s value.",89,[[["self"]],["str"]]],[11,"rel","","Get the `LinkValue`'s `rel` parameter(s).",89,[[["self"]],["option"]]],[11,"anchor","","Get the `LinkValue`'s `anchor` parameter.",89,[[["self"]],["option",["str"]]]],[11,"rev","","Get the `LinkValue`'s `rev` parameter(s).",89,[[["self"]],["option"]]],[11,"href_lang","","Get the `LinkValue`'s `hreflang` parameter(s).",89,[[["self"]],["option"]]],[11,"media_desc","","Get the `LinkValue`'s `media` parameter(s).",89,[[["self"]],["option"]]],[11,"title","","Get the `LinkValue`'s `title` parameter.",89,[[["self"]],["option",["str"]]]],[11,"title_star","","Get the `LinkValue`'s `title*` parameter.",89,[[["self"]],["option",["str"]]]],[11,"media_type","","Get the `LinkValue`'s `type` parameter.",89,[[["self"]],["option",["mime"]]]],[11,"push_rel","","Add a `RelationType` to the `LinkValue`'s `rel` parameter.",89,[[["self"],["relationtype"]],["linkvalue"]]],[11,"set_anchor","","Set `LinkValue`'s `anchor` parameter.",89,[[["self"],["t"]],["linkvalue"]]],[11,"push_rev","","Add a `RelationType` to the `LinkValue`'s `rev` parameter.",89,[[["self"],["relationtype"]],["linkvalue"]]],[11,"push_href_lang","","Add a `LanguageTag` to the `LinkValue`'s `hreflang` parameter.",89,[[["self"],["languagetag"]],["linkvalue"]]],[11,"push_media_desc","","Add a `MediaDesc` to the `LinkValue`'s `media_desc` parameter.",89,[[["self"],["mediadesc"]],["linkvalue"]]],[11,"set_title","","Set `LinkValue`'s `title` parameter.",89,[[["self"],["t"]],["linkvalue"]]],[11,"set_title_star","","Set `LinkValue`'s `title*` parameter.",89,[[["self"],["t"]],["linkvalue"]]],[11,"set_media_type","","Set `LinkValue`'s `type` parameter.",89,[[["self"],["mime"]],["linkvalue"]]],[11,"header_name","","",88,[[],["str"]]],[11,"parse_header","","",88,N],[11,"fmt_header","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",88,[[["str"]],["result",["link"]]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",86,[[["str"]],["result",["mediadesc"]]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",85,[[["str"]],["result",["relationtype"]]]],[11,"clone","","",65,[[["self"]],["charset"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"eq","","",65,[[["self"],["charset"]],["bool"]]],[11,"ne","","",65,[[["self"],["charset"]],["bool"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",65,[[["str"]],["result",["charset"]]]],[11,"clone","","",66,[[["self"]],["encoding"]]],[11,"eq","","",66,[[["self"],["encoding"]],["bool"]]],[11,"ne","","",66,[[["self"],["encoding"]],["bool"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",66,[[["str"]],["result",["encoding"]]]],[11,"clone","","",16,[[["self"]],["entitytag"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["entitytag"]],["bool"]]],[11,"ne","","",16,[[["self"],["entitytag"]],["bool"]]],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",16,[[["bool"],["string"]],["entitytag"]]],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",16,[[["string"]],["entitytag"]]],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",16,[[["string"]],["entitytag"]]],[11,"tag","","Get the tag.",16,[[["self"]],["str"]]],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",16,[[["self"],["string"]]]],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",16,[[["self"],["entitytag"]],["bool"]]],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",16,[[["self"],["entitytag"]],["bool"]]],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",16,[[["self"],["entitytag"]],["bool"]]],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",16,[[["self"],["entitytag"]],["bool"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",16,[[["str"]],["result",["entitytag"]]]],[11,"clone","","",17,[[["self"]],["httpdate"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["httpdate"]],["bool"]]],[11,"ne","","",17,[[["self"],["httpdate"]],["bool"]]],[11,"partial_cmp","","",17,[[["self"],["httpdate"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["httpdate"]],["bool"]]],[11,"le","","",17,[[["self"],["httpdate"]],["bool"]]],[11,"gt","","",17,[[["self"],["httpdate"]],["bool"]]],[11,"ge","","",17,[[["self"],["httpdate"]],["bool"]]],[11,"cmp","","",17,[[["self"],["httpdate"]],["ordering"]]],[11,"from_str","","",17,[[["str"]],["result",["httpdate"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["quality"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",18,[[["self"],["quality"]],["ordering"]]],[11,"eq","","",18,[[["self"],["quality"]],["bool"]]],[11,"ne","","",18,[[["self"],["quality"]],["bool"]]],[11,"partial_cmp","","",18,[[["self"],["quality"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["quality"]],["bool"]]],[11,"le","","",18,[[["self"],["quality"]],["bool"]]],[11,"gt","","",18,[[["self"],["quality"]],["bool"]]],[11,"ge","","",18,[[["self"],["quality"]],["bool"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"default","","",18,[[],["quality"]]],[11,"clone","","",19,[[["self"]],["qualityitem"]]],[11,"eq","","",19,[[["self"],["qualityitem"]],["bool"]]],[11,"ne","","",19,[[["self"],["qualityitem"]],["bool"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",19,[[["t"],["quality"]],["qualityitem"]]],[11,"partial_cmp","","",19,[[["self"],["qualityitem"]],["option",["ordering"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",19,[[["str"]],["result",["qualityitem"]]]],[0,"parsing","","Utility functions for Header implementations.",N,N],[3,"ExtendedValue","hyper::header::parsing","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",N,N],[12,"charset","","The character set that is used to encode the `value` to a string.",90,N],[12,"language_tag","","The human language details of the `value`, if available.",90,N],[12,"value","","The parameter value, as expressed in octets.",90,N],[3,"HTTP_VALUE","","This encode set is used for HTTP header values and is defined at https://tools.ietf.org/html/rfc5987#section-3.2",N,N],[5,"from_one_raw_str","","Reads a single raw string when parsing a header.",N,N],[5,"from_raw_str","","Reads a raw string into a value.",N,N],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",N,N],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",N,N],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",N,[[["str"]],["result",["extendedvalue"]]]],[11,"clone","","",90,[[["self"]],["extendedvalue"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"eq","","",90,[[["self"],["extendedvalue"]],["bool"]]],[11,"ne","","",90,[[["self"],["extendedvalue"]],["bool"]]],[11,"clone","","",91,[[["self"]],["http_value"]]],[11,"contains","","",91,[[["self"],["u8"]],["bool"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[8,"Scheme","hyper::header","An Authorization scheme to be used in the header.",N,N],[10,"scheme","","An optional Scheme name.",92,[[],["option",["str"]]]],[10,"fmt_scheme","","Format the Scheme data into a header value.",92,[[["self"],["formatter"]],["result"]]],[8,"Header","","A trait for any object that will represent a header field and value.",N,N],[10,"header_name","","Returns the name of the header field this belongs to.",93,[[],["str"]]],[10,"parse_header","","Parse a header from a raw stream of bytes.",93,N],[8,"HeaderFormat","","A trait for any object that will represent a header field and value.",N,N],[10,"fmt_header","","Format a header to be output into a TcpStream.",94,[[["self"],["formatter"]],["result"]]],[8,"HeaderClone","","Internal implementation detail.",N,N],[11,"clone","","",95,[[["self"]],["headers"]]],[11,"new","","Creates a new, empty headers map.",95,[[],["headers"]]],[11,"set","","Set a header field to the corresponding value.",95,[[["self"],["h"]]]],[11,"get_raw","","Access the raw value of a header.",95,[[["self"],["str"]],["option"]]],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",95,[[["self"],["k"],["vec",["vec"]]]]],[11,"append_raw","","Append a value to raw value of this header.",95,[[["self"],["k"],["vec",["u8"]]]]],[11,"remove_raw","","Remove a header set by set_raw",95,[[["self"],["str"]]]],[11,"get","","Get a reference to the header field's value, if it exists.",95,[[["self"]],["option"]]],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",95,[[["self"]],["option"]]],[11,"has","","Returns a boolean of whether a certain header is in the map.",95,[[["self"]],["bool"]]],[11,"remove","","Removes a header from the map, if one existed. Returns true if a header has been removed.",95,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the header fields.",95,[[["self"]],["headersitems"]]],[11,"len","","Returns the number of headers in the map.",95,[[["self"]],["usize"]]],[11,"clear","","Remove all headers from the map.",95,[[["self"]]]],[11,"eq","","",95,[[["self"],["headers"]],["bool"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"next","","",96,[[["self"]],["option",["headerview"]]]],[11,"is","","Check if a HeaderView is a certain Header.",97,[[["self"]],["bool"]]],[11,"name","","Get the Header name as a slice.",97,[[["self"]],["str"]]],[11,"value","","Cast the value to a certain Header type.",97,[[["self"]],["option"]]],[11,"value_string","","Get just the header value as a String.",97,[[["self"]],["string"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"extend","","",95,[[["self"],["i"]]]],[11,"from_iter","","",95,[[["i"]],["headers"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[0,"http","hyper","Pieces pertaining to the HTTP message protocol.",N,N],[3,"RawStatus","hyper::http","The raw status code and reason-phrase.",N,N],[12,"0","","",98,N],[12,"1","","",98,N],[5,"should_keep_alive","","Checks if a connection should be kept alive.",N,[[["httpversion"],["headers"]],["bool"]]],[0,"h1","","Adapts the HTTP/1.1 implementation into the `HttpMessage` API.",N,N],[3,"Http11Message","hyper::http::h1","An implementation of the `HttpMessage` trait for HTTP/1.1.",N,N],[3,"Http11Protocol","","The `Protocol` implementation provides HTTP/1.1 messages.",N,N],[3,"EndError","","",N,N],[3,"Incoming","","An Incoming Message head. Includes request/status line, and headers.",N,N],[12,"version","","HTTP version of the message.",99,N],[12,"subject","","Subject (request line or status line) of Incoming message.",99,N],[12,"headers","","Headers of the Incoming message.",99,N],[4,"HttpReader","","Readers to handle different Transfer-Encodings.",N,N],[13,"SizedReader","","A Reader used when a Content-Length header is passed with a positive integer.",100,N],[13,"ChunkedReader","","A Reader used when Transfer-Encoding is `chunked`.",100,N],[13,"EofReader","","A Reader used for responses that don't indicate a length or chunked.",100,N],[13,"EmptyReader","","A Reader used for messages that should never have a body.",100,N],[4,"HttpWriter","","Writers to handle different Transfer-Encodings.",N,N],[13,"ThroughWriter","","A no-op Writer, used initially before Transfer-Encoding is determined.",101,N],[13,"ChunkedWriter","","A Writer for when Transfer-Encoding includes `chunked`.",101,N],[13,"SizedWriter","","A Writer for when Content-Length is set.",101,N],[13,"EmptyWriter","","A writer that should not write any body.",101,N],[5,"parse_request","","Parses a request into an Incoming message head.",N,[[["bufreader"]],["result",["incoming"]]]],[5,"parse_response","","Parses a response into an Incoming message head.",N,[[["bufreader"]],["result",["incoming"]]]],[17,"CR","","The `\\r` byte.",N,N],[17,"LF","","The `\\n` byte.",N,N],[17,"LINE_ENDING","","The bytes `\\r\\n`.",N,N],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"write","","",102,N],[11,"flush","","",102,[[["self"]],["result"]]],[11,"read","","",102,N],[11,"set_outgoing","","",102,[[["self"],["requesthead"]],["result",["requesthead"]]]],[11,"get_incoming","","",102,[[["self"]],["result",["responsehead"]]]],[11,"has_body","","",102,[[["self"]],["bool"]]],[11,"set_read_timeout","","",102,[[["self"],["option",["duration"]]],["result"]]],[11,"set_write_timeout","","",102,[[["self"],["option",["duration"]]],["result"]]],[11,"close_connection","","",102,[[["self"]],["result"]]],[11,"set_proxied","","",102,[[["self"],["bool"]]]],[11,"into_inner","","Consumes the `Http11Message` and returns the underlying `NetworkStream`.",102,[[["self"]],["box",["networkstream"]]]],[11,"get_ref","","Gets a borrowed reference to the underlying `NetworkStream`, regardless of the state of the `Http11Message`.",102,[[["self"]],["networkstream"]]],[11,"get_mut","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the `Http11Message`.",102,[[["self"]],["networkstream"]]],[11,"with_stream","","Creates a new `Http11Message` that will use the given `NetworkStream` for communicating to the peer.",102,[[["box",["networkstream"]]],["http11message"]]],[11,"flush_outgoing","","Flushes the current outgoing content and moves the stream into the `stream` property.",102,[[["self"]],["result"]]],[11,"new_message","","",103,[[["self"],["str"],["u16"],["str"]],["result",["box"]]]],[11,"with_connector","","Creates a new `Http11Protocol` instance that will use the given `NetworkConnector` for establishing HTTP connections.",103,[[["c"]],["http11protocol"]]],[11,"into_inner","","Unwraps this HttpReader and returns the underlying Reader.",100,[[["self"]],["r"]]],[11,"get_ref","","Gets a borrowed reference to the underlying Reader.",100,[[["self"]],["r"]]],[11,"get_mut","","Gets a mutable reference to the underlying Reader.",100,[[["self"]],["r"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"read","","",100,N],[11,"into_inner","","Unwraps the HttpWriter and returns the underlying Writer.",101,[[["self"]],["w"]]],[11,"get_ref","","Access the inner Writer.",101,[[["self"]],["w"]]],[11,"get_mut","","Access the inner Writer mutably.",101,[[["self"]],["w"]]],[11,"end","","Ends the HttpWriter, and returns the underlying Writer.",101,[[["self"]],["result",["enderror"]]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"write","","",101,N],[11,"flush","","",101,[[["self"]],["result"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[0,"message","hyper::http","Defines the `HttpMessage` trait that serves to encapsulate the operations of a single request-response cycle on any HTTP connection.",N,N],[3,"RequestHead","hyper::http::message","Describes a request.",N,N],[12,"headers","","The headers of the request",105,N],[12,"method","","The method of the request",105,N],[12,"url","","The URL of the request",105,N],[3,"ResponseHead","","Describes a response.",N,N],[12,"headers","","The headers of the reponse",106,N],[12,"raw_status","","The raw status line of the response",106,N],[12,"version","","The HTTP/2 version which generated the response",106,N],[8,"Protocol","","The trait provides an API for creating new `HttpMessage`s depending on the underlying HTTP protocol.",N,N],[10,"new_message","","Creates a fresh `HttpMessage` bound to the given host, based on the given protocol scheme.",107,[[["self"],["str"],["u16"],["str"]],["result",["box"]]]],[8,"HttpMessage","","The trait provides an API for sending an receiving HTTP messages.",N,N],[10,"set_outgoing","","Initiates a new outgoing request.",108,[[["self"],["requesthead"]],["result",["requesthead"]]]],[10,"get_incoming","","Obtains the incoming response and returns its head (i.e. the `ResponseHead` struct)",108,[[["self"]],["result",["responsehead"]]]],[10,"set_read_timeout","","Set the read timeout duration for this message.",108,[[["self"],["option",["duration"]]],["result"]]],[10,"set_write_timeout","","Set the write timeout duration for this message.",108,[[["self"],["option",["duration"]]],["result"]]],[10,"close_connection","","Closes the underlying HTTP connection.",108,[[["self"]],["result"]]],[10,"has_body","","Returns whether the incoming message has a body.",108,[[["self"]],["bool"]]],[11,"set_proxied","","Called when the Client wishes to use a Proxy.",108,[[["self"],["bool"]]]],[11,"clone","","",105,[[["self"]],["requesthead"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"clone","","",106,[[["self"]],["responsehead"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"is","","Is the underlying type in this trait object a T?",108,[[["self"]],["bool"]]],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",108,[[["self"]],["option"]]],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained data.",108,[[["self"]],["option"]]],[11,"downcast","","If the underlying type is T, extract it.",108,[[["box",["httpmessage"]]],["result",["box","box"]]]],[11,"clone","hyper::http","",98,[[["self"]],["rawstatus"]]],[11,"eq","","",98,[[["self"],["rawstatus"]],["bool"]]],[11,"ne","","",98,[[["self"],["rawstatus"]],["bool"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[0,"net","hyper","A collection of traits abstracting over Listeners and Streams.",N,N],[3,"NetworkConnections","hyper::net","An iterator wrapper over a `NetworkAcceptor`.",N,N],[3,"HttpListener","","A `NetworkListener` for `HttpStream`s.",N,N],[3,"HttpStream","","A wrapper around a `TcpStream`.",N,N],[12,"0","","",109,N],[3,"HttpConnector","","A connector that will produce HttpStreams.",N,N],[3,"HttpsListener","","A Http Listener over SSL.",N,N],[3,"HttpsConnector","","A connector that can protect HTTP streams using SSL.",N,N],[4,"Fresh","","The write-status indicating headers have not been written.",N,N],[4,"Streaming","","The write-status indicating headers have been written.",N,N],[4,"HttpsStream","","A stream over the HTTP protocol, possibly protected by SSL.",N,N],[13,"Http","","A plain text stream.",110,N],[13,"Https","","A stream protected by SSL.",110,N],[8,"NetworkListener","","An abstraction to listen for connections on a certain port.",N,N],[16,"Stream","","The stream produced for each connection.",111,N],[10,"accept","","Returns an iterator of streams.",111,[[["self"]],["result"]]],[10,"local_addr","","Get the address this Listener ended up listening on.",111,[[["self"]],["result",["socketaddr"]]]],[11,"incoming","","Returns an iterator over incoming connections.",111,[[["self"]],["networkconnections"]]],[11,"set_read_timeout","","Sets the read timeout for all streams that are accepted",111,[[["self"],["option",["duration"]]]]],[11,"set_write_timeout","","Sets the write timeout for all streams that are accepted",111,[[["self"],["option",["duration"]]]]],[8,"NetworkStream","","An abstraction over streams that a `Server` can utilize.",N,N],[10,"peer_addr","","Get the remote address of the underlying connection.",112,[[["self"]],["result",["socketaddr"]]]],[10,"set_read_timeout","","Set the maximum time to wait for a read to complete.",112,[[["self"],["option",["duration"]]],["result"]]],[10,"set_write_timeout","","Set the maximum time to wait for a write to complete.",112,[[["self"],["option",["duration"]]],["result"]]],[11,"close","","This will be called when Stream should no longer be kept alive.",112,[[["self"],["shutdown"]],["result"]]],[8,"NetworkConnector","","A connector creates a NetworkStream.",N,N],[16,"Stream","","Type of `Stream` to create",113,N],[10,"connect","","Connect to a remote address.",113,[[["self"],["str"],["u16"],["str"]],["result"]]],[8,"SslClient","","An abstraction to allow any SSL implementation to be used with client-side HttpsStreams.",N,N],[16,"Stream","","The protected stream.",114,N],[10,"wrap_client","","Wrap a client stream with SSL.",114,[[["self"],["t"],["str"]],["result"]]],[8,"SslServer","","An abstraction to allow any SSL implementation to be used with server-side HttpsStreams.",N,N],[16,"Stream","","The protected stream.",115,N],[10,"wrap_server","","Wrap a server stream with SSL.",115,[[["self"],["t"]],["result"]]],[11,"next","","",116,[[["self"]],["option",["result"]]]],[11,"is","","Is the underlying type in this trait object a `T`?",112,[[["self"]],["bool"]]],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",112,[[["self"]],["option"]]],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained data.",112,[[["self"]],["option"]]],[11,"downcast","","If the underlying type is `T`, extract it.",112,[[["box",["networkstream"]]],["result",["box","box"]]]],[11,"is","","Is the underlying type in this trait object a `T`?",112,[[["self"]],["bool"]]],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",112,[[["self"]],["option"]]],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained data.",112,[[["self"]],["option"]]],[11,"downcast","","If the underlying type is `T`, extract it.",112,[[["box",["networkstream"]]],["result",["box","box"]]]],[11,"clone","","",117,[[["self"]],["httplistener"]]],[11,"from","","",117,[[["tcplistener"]],["httplistener"]]],[11,"new","","Start listening to an address over HTTP.",117,[[["to"]],["result",["httplistener"]]]],[11,"accept","","",117,[[["self"]],["result",["httpstream"]]]],[11,"local_addr","","",117,[[["self"]],["result",["socketaddr"]]]],[11,"set_read_timeout","","",117,[[["self"],["option",["duration"]]]]],[11,"set_write_timeout","","",117,[[["self"],["option",["duration"]]]]],[11,"as_raw_fd","","",117,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","",117,[[["rawfd"]],["httplistener"]]],[11,"clone","","",109,[[["self"]],["httpstream"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"read","","",109,N],[11,"write","","",109,N],[11,"flush","","",109,[[["self"]],["result"]]],[11,"as_raw_fd","","",109,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","",109,[[["rawfd"]],["httpstream"]]],[11,"peer_addr","","",109,[[["self"]],["result",["socketaddr"]]]],[11,"set_read_timeout","","",109,[[["self"],["option",["duration"]]],["result"]]],[11,"set_write_timeout","","",109,[[["self"],["option",["duration"]]],["result"]]],[11,"close","","",109,[[["self"],["shutdown"]],["result"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"clone","","",118,[[["self"]],["httpconnector"]]],[11,"default","","",118,[[],["httpconnector"]]],[11,"connect","","",118,[[["self"],["str"],["u16"],["str"]],["result",["httpstream"]]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"clone","","",110,[[["self"]],["httpsstream"]]],[11,"read","","",110,N],[11,"write","","",110,N],[11,"flush","","",110,[[["self"]],["result"]]],[11,"peer_addr","","",110,[[["self"]],["result",["socketaddr"]]]],[11,"set_read_timeout","","",110,[[["self"],["option",["duration"]]],["result"]]],[11,"set_write_timeout","","",110,[[["self"],["option",["duration"]]],["result"]]],[11,"close","","",110,[[["self"],["shutdown"]],["result"]]],[11,"clone","","",119,[[["self"]],["httpslistener"]]],[11,"new","","Start listening to an address over HTTPS.",119,[[["to"],["s"]],["result",["httpslistener"]]]],[11,"with_listener","","Construct an HttpsListener from a bound `TcpListener`.",119,[[["httplistener"],["s"]],["httpslistener"]]],[11,"accept","","",119,[[["self"]],["result"]]],[11,"local_addr","","",119,[[["self"]],["result",["socketaddr"]]]],[11,"set_read_timeout","","",119,[[["self"],["option",["duration"]]]]],[11,"set_write_timeout","","",119,[[["self"],["option",["duration"]]]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"default","","",120,[[],["httpsconnector"]]],[11,"new","","Create a new connector using the provided SSL implementation.",120,[[["s"]],["httpsconnector",["httpconnector"]]]],[11,"with_connector","","Create a new connector using the provided SSL implementation.",120,[[["s"],["c"]],["httpsconnector"]]],[11,"connect","","",120,[[["self"],["str"],["u16"],["str"]],["result"]]],[0,"server","hyper","HTTP Server",N,N],[3,"Server","hyper::server","A server can listen on a TCP socket.",N,N],[3,"Listening","","A listening server, which can later be closed.",N,N],[12,"socket","","The socket addresses that the server is bound to.",121,N],[0,"request","","Server Requests",N,N],[3,"Request","hyper::server::request","A request bundles several parts of an incoming `NetworkStream`, given to a `Handler`.",N,N],[12,"remote_addr","","The IP address of the remote connection.",122,N],[12,"method","","The `Method`, such as `Get`, `Post`, etc.",122,N],[12,"headers","","The headers of the incoming request.",122,N],[12,"uri","","The target request-uri for this request.",122,N],[12,"version","","The version of HTTP for this request.",122,N],[11,"new","","Create a new Request, reading the StartLine and Headers so they are immediately useful.",122,[[["bufreader"],["socketaddr"]],["result",["request"]]]],[11,"set_read_timeout","","Set the read timeout of the underlying NetworkStream.",122,[[["self"],["option",["duration"]]],["result"]]],[11,"downcast_ref","","Get a reference to the underlying `NetworkStream`.",122,[[["self"]],["option"]]],[11,"ssl","","Get a reference to the underlying Ssl stream, if connected over HTTPS.",122,[[["self"]],["option"]]],[11,"deconstruct","","Deconstruct a Request into its constituent parts.",122,N],[11,"read","","",122,N],[0,"response","hyper::server","Server Responses",N,N],[3,"Response","hyper::server::response","The outgoing half for a Tcp connection, created by a `Server` and given to a `Handler`.",N,N],[12,"version","","The HTTP version of this response.",123,N],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"status","","The status of this response.",123,[[["self"]],["statuscode"]]],[11,"headers","","The headers of this response.",123,[[["self"]],["headers"]]],[11,"construct","","Construct a Response from its constituent parts.",123,[[["httpversion"],["httpwriter",["write"]],["statuscode"],["headers"]],["response",["fresh"]]]],[11,"deconstruct","","Deconstruct this Response into its constituent parts.",123,N],[11,"new","","Creates a new Response that can be used to write to a network stream.",123,[[["write"],["headers"]],["response",["fresh"]]]],[11,"send","","Writes the body and ends the response.",123,N],[11,"start","","Consume this Response, writing the Headers and Status and creating a Response",123,[[["self"]],["result",["response"]]]],[11,"status_mut","","Get a mutable reference to the status.",123,[[["self"]],["statuscode"]]],[11,"headers_mut","","Get a mutable reference to the Headers.",123,[[["self"]],["headers"]]],[11,"end","","Flushes all writing of a response to the client.",123,[[["self"]],["result"]]],[11,"write","","",123,N],[11,"flush","","",123,[[["self"]],["result"]]],[11,"drop","","",123,[[["self"]]]],[8,"Handler","hyper::server","A handler that can handle incoming requests for a server.",N,N],[10,"handle","","Receives a `Request`/`Response` pair, and should perform some action on them.",124,[[["self"],["request"],["response",["fresh"]]]]],[11,"check_continue","","Called when a Request includes a `Expect: 100-continue` header.",124,N],[11,"on_connection_start","","This is run after a connection is received, on a per-connection basis (not a per-request basis, as a connection with keep-alive may handle multiple requests)",124,[[["self"]]]],[11,"on_connection_end","","This is run before a connection is closed, on a per-connection basis (not a per-request basis, as a connection with keep-alive may handle multiple requests)",124,[[["self"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new server with the provided handler.",125,[[["l"]],["server"]]],[11,"keep_alive","","Controls keep-alive for this server.",125,[[["self"],["option",["duration"]]]]],[11,"set_read_timeout","","Sets the read timeout for all Request reads.",125,[[["self"],["option",["duration"]]]]],[11,"set_write_timeout","","Sets the write timeout for all Response writes.",125,[[["self"],["option",["duration"]]]]],[11,"local_addr","","Get the address that the server is listening on.",125,[[["self"]],["result",["socketaddr"]]]],[11,"http","","Creates a new server that will handle `HttpStream`s.",125,[[["to"]],["result",["server"]]]],[11,"https","","Creates a new server that will handle `HttpStream`s over SSL.",125,[[["a"],["s"]],["result",["server"]]]],[11,"handle","","Binds to a socket and starts handling connections.",125,[[["self"],["h"]],["result",["listening"]]]],[11,"handle_threads","","Binds to a socket and starts handling connections with the provided number of threads.",125,[[["self"],["h"],["usize"]],["result",["listening"]]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"drop","","",121,[[["self"]]]],[11,"close","","Warning: This function doesn't work. The server remains listening after you called it. See https://github.com/hyperium/hyper/issues/338 for more details.",121,[[["self"]],["result"]]],[0,"status","hyper","HTTP status codes",N,N],[4,"StatusCode","hyper::status","An HTTP status code (`status-code` in RFC 7230 et al.).",N,N],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",126,N],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",126,N],[13,"Processing","","102 Processing [RFC2518]",126,N],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",126,N],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",126,N],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",126,N],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",126,N],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",126,N],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",126,N],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",126,N],[13,"MultiStatus","","207 Multi-Status [RFC4918]",126,N],[13,"AlreadyReported","","208 Already Reported [RFC5842]",126,N],[13,"ImUsed","","226 IM Used [RFC3229]",126,N],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",126,N],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",126,N],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",126,N],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",126,N],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",126,N],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",126,N],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",126,N],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",126,N],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",126,N],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",126,N],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",126,N],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",126,N],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",126,N],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",126,N],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",126,N],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",126,N],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",126,N],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",126,N],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",126,N],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",126,N],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",126,N],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",126,N],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",126,N],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",126,N],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",126,N],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",126,N],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",126,N],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",126,N],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",126,N],[13,"Locked","","423 Locked [RFC4918]",126,N],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",126,N],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",126,N],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",126,N],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",126,N],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",126,N],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",126,N],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",126,N],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",126,N],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",126,N],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",126,N],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",126,N],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",126,N],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",126,N],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",126,N],[13,"LoopDetected","","508 Loop Detected [RFC5842]",126,N],[13,"NotExtended","","510 Not Extended [RFC2774]",126,N],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",126,N],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",126,N],[4,"StatusClass","","The class of an HTTP `status-code`.",N,N],[13,"Informational","","1xx (Informational): The request was received, continuing process",127,N],[13,"Success","","2xx (Success): The request was successfully received, understood, and accepted",127,N],[13,"Redirection","","3xx (Redirection): Further action needs to be taken in order to complete the request",127,N],[13,"ClientError","","4xx (Client Error): The request contains bad syntax or cannot be fulfilled",127,N],[13,"ServerError","","5xx (Server Error): The server failed to fulfill an apparently valid request",127,N],[13,"NoClass","","A status code lower than 100 or higher than 599. These codes do no belong to any class.",127,N],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"hash","","",126,N],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",126,[[["self"]],["option",["str"]]]],[11,"class","","Determine the class of a status code, based on its first digit.",126,[[["self"]],["statusclass"]]],[11,"is_informational","","Check if class is Informational.",126,[[["self"]],["bool"]]],[11,"is_success","","Check if class is Success.",126,[[["self"]],["bool"]]],[11,"is_redirection","","Check if class is Redirection.",126,[[["self"]],["bool"]]],[11,"is_client_error","","Check if class is ClientError.",126,[[["self"]],["bool"]]],[11,"is_server_error","","Check if class is ServerError.",126,[[["self"]],["bool"]]],[11,"is_strange_status","","Check if class is NoClass",126,[[["self"]],["bool"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"eq","","",126,[[["self"],["statuscode"]],["bool"]]],[11,"clone","","",126,[[["self"]],["statuscode"]]],[11,"partial_cmp","","",126,[[["self"],["statuscode"]],["option",["ordering"]]]],[11,"cmp","","",126,[[["self"],["statuscode"]],["ordering"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"clone","","",127,[[["self"]],["statusclass"]]],[11,"eq","","",127,[[["self"],["statusclass"]],["bool"]]],[11,"partial_cmp","","",127,[[["self"],["statusclass"]],["option",["ordering"]]]],[11,"cmp","","",127,[[["self"],["statusclass"]],["ordering"]]],[11,"default_code","","Get the default status code for the class.",127,[[["self"]],["statuscode"]]],[0,"uri","hyper","HTTP RequestUris",N,N],[4,"RequestUri","hyper::uri","The Request-URI of a Request's StartLine.",N,N],[13,"AbsolutePath","","The most common request target, an absolute path and optional query.",128,N],[13,"AbsoluteUri","","An absolute URI. Used in conjunction with proxies.",128,N],[13,"Authority","","The authority form is only for use with `CONNECT` requests.",128,N],[13,"Star","","The star is used to target the entire server, instead of a specific resource.",128,N],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"eq","","",128,[[["self"],["requesturi"]],["bool"]]],[11,"ne","","",128,[[["self"],["requesturi"]],["bool"]]],[11,"clone","","",128,[[["self"]],["requesturi"]]],[11,"from_str","","",128,[[["str"]],["result",["requesturi","error"]]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[0,"version","hyper","HTTP Versions enum",N,N],[4,"HttpVersion","hyper::version","Represents a version of the HTTP spec.",N,N],[13,"Http09","","`HTTP/0.9`",129,N],[13,"Http10","","`HTTP/1.0`",129,N],[13,"Http11","","`HTTP/1.1`",129,N],[13,"Http20","","`HTTP/2.0`",129,N],[11,"eq","","",129,[[["self"],["httpversion"]],["bool"]]],[11,"partial_cmp","","",129,[[["self"],["httpversion"]],["option",["ordering"]]]],[11,"clone","","",129,[[["self"]],["httpversion"]]],[11,"cmp","","",129,[[["self"],["httpversion"]],["ordering"]]],[11,"hash","","",129,N],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",129,[[["self"]],["str"]]],[11,"from_str","","",129,[[["str"]],["result"]]],[0,"mime","hyper","Re-exporting the mime crate, for convenience.",N,N],[3,"Mime","hyper::mime","Mime, or Media Type. Encapsulates common registers types.",N,N],[12,"0","","",130,N],[12,"1","","",130,N],[12,"2","","",130,N],[4,"TopLevel","","",N,N],[13,"Star","","",131,N],[13,"Text","","",131,N],[13,"Image","","",131,N],[13,"Audio","","",131,N],[13,"Video","","",131,N],[13,"Application","","",131,N],[13,"Multipart","","",131,N],[13,"Message","","",131,N],[13,"Model","","",131,N],[13,"Ext","","",131,N],[4,"SubLevel","","",N,N],[13,"Star","","",132,N],[13,"Plain","","",132,N],[13,"Html","","",132,N],[13,"Xml","","",132,N],[13,"Javascript","","",132,N],[13,"Css","","",132,N],[13,"EventStream","","",132,N],[13,"Json","","",132,N],[13,"WwwFormUrlEncoded","","",132,N],[13,"Msgpack","","",132,N],[13,"OctetStream","","",132,N],[13,"FormData","","",132,N],[13,"Png","","",132,N],[13,"Gif","","",132,N],[13,"Bmp","","",132,N],[13,"Jpeg","","",132,N],[13,"Mpeg","","",132,N],[13,"Mp4","","",132,N],[13,"Ogg","","",132,N],[13,"Ext","","",132,N],[4,"Attr","","",N,N],[13,"Charset","","",133,N],[13,"Boundary","","",133,N],[13,"Q","","",133,N],[13,"Ext","","",133,N],[4,"Value","","",N,N],[13,"Utf8","","",134,N],[13,"Ext","","",134,N],[6,"Param","","",N,N],[14,"mime","","Easily create a Mime without having to import so many enums.",N,N],[14,"header","hyper","",N,N],[11,"parse","","Parse an absolute URL from a string.",11,[[["str"]],["result",["url","parseerror"]]]],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",11,[[["str"],["i"]],["result",["url","parseerror"]]]],[11,"join","","Parse a string as an URL, with this URL as the base URL.",11,[[["self"],["str"]],["result",["url","parseerror"]]]],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",11,[[],["parseoptions"]]],[11,"as_str","","Return the serialization of this URL.",11,[[["self"]],["str"]]],[11,"into_string","","Return the serialization of this URL.",11,[[["self"]],["string"]]],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",11,[[["self"]],["origin"]]],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",11,[[["self"]],["str"]]],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",11,[[["self"]],["bool"]]],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",11,[[["self"]],["bool"]]],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",11,[[["self"]],["str"]]],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",11,[[["self"]],["option",["str"]]]],[11,"has_host","","Equivalent to `url.host().is_some()`.",11,[[["self"]],["bool"]]],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",11,[[["self"]],["option",["str"]]]],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",11,[[["self"]],["option",["host"]]]],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",11,[[["self"]],["option",["str"]]]],[11,"port","","Return the port number for this URL, if any.",11,[[["self"]],["option",["u16"]]]],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",11,[[["self"]],["option",["u16"]]]],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",11,[[["self"],["f"]],["result",["hostandport","error"]]]],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",11,[[["self"]],["str"]]],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",11,[[["self"]],["option",["split"]]]],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",11,[[["self"]],["option",["str"]]]],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",11,[[["self"]],["parse"]]],[11,"fragment","","Return this URL’s fragment identifier, if any.",11,[[["self"]],["option",["str"]]]],[11,"set_fragment","","Change this URL’s fragment identifier.",11,N],[11,"set_query","","Change this URL’s query string.",11,N],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",11,[[["self"]],["serializer",["urlquery"]]]],[11,"set_path","","Change this URL’s path.",11,N],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",11,[[["self"]],["result",["pathsegmentsmut"]]]],[11,"set_port","","Change this URL’s port number.",11,[[["self"],["option",["u16"]]],["result"]]],[11,"set_host","","Change this URL’s host.",11,[[["self"],["option",["str"]]],["result",["parseerror"]]]],[11,"set_ip_host","","Change this URL’s host to the given IP address.",11,[[["self"],["ipaddr"]],["result"]]],[11,"set_password","","Change this URL’s password.",11,[[["self"],["option",["str"]]],["result"]]],[11,"set_username","","Change this URL’s username.",11,[[["self"],["str"]],["result"]]],[11,"set_scheme","","Change this URL’s scheme.",11,[[["self"],["str"]],["result"]]],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",11,[[["p"]],["result",["url"]]]],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",11,[[["p"]],["result",["url"]]]],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",11,[[["self"]],["result",["pathbuf"]]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"eq","","",11,[[["self"],["url"]],["bool"]]],[11,"eq","hyper::error","",13,[[["self"],["parseerror"]],["bool"]]],[11,"description","","",13,[[["self"]],["str"]]],[11,"as_ref","hyper","",11,[[["self"]],["str"]]],[11,"to_socket_addrs","","",11,[[["self"]],["result",["error"]]]],[11,"from","hyper::error","",13,[[["errors"]],["parseerror"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",11,[[["self"],["url"]],["option",["ordering"]]]],[11,"fmt","hyper::error","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",11,[[["self"]],["url"]]],[11,"clone","hyper::error","",13,[[["self"]],["parseerror"]]],[11,"hash","hyper","",11,N],[11,"from_str","","",11,[[["str"]],["result",["url","parseerror"]]]],[11,"index","","",11,[[["self"],["rangefull"]],["str"]]],[11,"index","","",11,[[["self"],["range",["position"]]],["str"]]],[11,"index","","",11,[[["self"],["rangeto",["position"]]],["str"]]],[11,"index","","",11,[[["self"],["rangefrom",["position"]]],["str"]]],[11,"cmp","","",11,[[["self"],["url"]],["ordering"]]],[11,"eq","","",0,[[["self"],["languagetag"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",0,[[["self"]],["languagetag"]]],[11,"default","","",0,[[],["languagetag"]]],[11,"from_str","","",0,[[["str"]],["result",["languagetag","error"]]]],[11,"eq","hyper::mime","",132,[[["self"],["string"]],["bool"]]],[11,"eq","","",131,[[["self"],["string"]],["bool"]]],[11,"eq","","",132,[[["self"],["sublevel"]],["bool"]]],[11,"eq","","",134,[[["self"],["value"]],["bool"]]],[11,"eq","","",134,[[["self"],["str"]],["bool"]]],[11,"eq","","",134,[[["self"],["str"]],["bool"]]],[11,"eq","","",131,[[["self"],["str"]],["bool"]]],[11,"eq","","",133,[[["self"],["string"]],["bool"]]],[11,"eq","","",132,[[["self"],["str"]],["bool"]]],[11,"eq","","",132,[[["self"],["str"]],["bool"]]],[11,"eq","","",134,[[["self"],["string"]],["bool"]]],[11,"eq","","",131,[[["self"],["str"]],["bool"]]],[11,"eq","","",131,[[["self"],["toplevel"]],["bool"]]],[11,"eq","","",133,[[["self"],["str"]],["bool"]]],[11,"eq","","",133,[[["self"],["str"]],["bool"]]],[11,"eq","","",130,[[["self"],["mime"]],["bool"]]],[11,"eq","","",133,[[["self"],["attr"]],["bool"]]],[11,"deref","","",131,[[["self"]],["str"]]],[11,"deref","","",132,[[["self"]],["str"]]],[11,"deref","","",134,[[["self"]],["str"]]],[11,"deref","","",133,[[["self"]],["str"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",134,[[["self"],["value"]],["option",["ordering"]]]],[11,"lt","","",134,[[["self"],["value"]],["bool"]]],[11,"le","","",134,[[["self"],["value"]],["bool"]]],[11,"gt","","",134,[[["self"],["value"]],["bool"]]],[11,"ge","","",134,[[["self"],["value"]],["bool"]]],[11,"partial_cmp","","",130,[[["self"],["mime"]],["option",["ordering"]]]],[11,"lt","","",130,[[["self"],["mime"]],["bool"]]],[11,"le","","",130,[[["self"],["mime"]],["bool"]]],[11,"gt","","",130,[[["self"],["mime"]],["bool"]]],[11,"ge","","",130,[[["self"],["mime"]],["bool"]]],[11,"partial_cmp","","",131,[[["self"],["toplevel"]],["option",["ordering"]]]],[11,"lt","","",131,[[["self"],["toplevel"]],["bool"]]],[11,"le","","",131,[[["self"],["toplevel"]],["bool"]]],[11,"gt","","",131,[[["self"],["toplevel"]],["bool"]]],[11,"ge","","",131,[[["self"],["toplevel"]],["bool"]]],[11,"partial_cmp","","",133,[[["self"],["attr"]],["option",["ordering"]]]],[11,"lt","","",133,[[["self"],["attr"]],["bool"]]],[11,"le","","",133,[[["self"],["attr"]],["bool"]]],[11,"gt","","",133,[[["self"],["attr"]],["bool"]]],[11,"ge","","",133,[[["self"],["attr"]],["bool"]]],[11,"partial_cmp","","",132,[[["self"],["sublevel"]],["option",["ordering"]]]],[11,"lt","","",132,[[["self"],["sublevel"]],["bool"]]],[11,"le","","",132,[[["self"],["sublevel"]],["bool"]]],[11,"gt","","",132,[[["self"],["sublevel"]],["bool"]]],[11,"ge","","",132,[[["self"],["sublevel"]],["bool"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",134,[[["self"]],["value"]]],[11,"clone","","",132,[[["self"]],["sublevel"]]],[11,"clone","","",133,[[["self"]],["attr"]]],[11,"clone","","",131,[[["self"]],["toplevel"]]],[11,"clone","","",130,[[["self"]],["mime"]]],[11,"hash","","",130,N],[11,"hash","","",131,N],[11,"hash","","",133,N],[11,"hash","","",134,N],[11,"hash","","",132,N],[11,"from_str","","",133,[[["str"]],["result",["attr"]]]],[11,"from_str","","",130,[[["str"]],["result",["mime"]]]],[11,"from_str","","",132,[[["str"]],["result",["sublevel"]]]],[11,"from_str","","",131,[[["str"]],["result",["toplevel"]]]],[11,"from_str","","",134,[[["str"]],["result",["value"]]]],[11,"cmp","","",133,[[["self"],["attr"]],["ordering"]]],[11,"cmp","","",131,[[["self"],["toplevel"]],["ordering"]]],[11,"cmp","","",132,[[["self"],["sublevel"]],["ordering"]]],[11,"cmp","","",130,[[["self"],["mime"]],["ordering"]]],[11,"cmp","","",134,[[["self"],["value"]],["ordering"]]],[11,"matches","hyper","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,[[["self"],["languagetag"]],["bool"]]],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,[[["self"]],["bool"]]],[11,"canonicalize","","Returns the canonical version of the language tag.",0,[[["self"]],["languagetag"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","hyper::client","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"connect","hyper::client::pool","",4,[[["self"],["str"],["u16"],["str"]],["result",["httpstream","error"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","hyper::client::request","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","hyper::client::response","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"to_string","hyper::error","",13,[[["self"]],["string"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"to_string","hyper::method","",15,[[["self"]],["string"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"to_string","hyper::header","",16,[[["self"]],["string"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"to_string","","",17,[[["self"]],["string"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"to_string","","",18,[[["self"]],["string"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"to_string","","",20,[[["self"]],["string"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"to_string","","",87,[[["self"]],["string"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"to_string","","",21,[[["self"]],["string"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"to_string","","",24,[[["self"]],["string"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"to_string","","",25,[[["self"]],["string"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"to_string","","",26,[[["self"]],["string"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"to_string","","",27,[[["self"]],["string"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"to_string","","",28,[[["self"]],["string"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"to_string","","",30,[[["self"]],["string"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"to_string","","",31,[[["self"]],["string"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"to_string","","",35,[[["self"]],["string"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"to_string","","",36,[[["self"]],["string"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"to_string","","",37,[[["self"]],["string"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"to_string","","",38,[[["self"]],["string"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"to_string","","",39,[[["self"]],["string"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"to_string","","",41,[[["self"]],["string"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"to_string","","",42,[[["self"]],["string"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"to_string","","",44,[[["self"]],["string"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"to_string","","",45,[[["self"]],["string"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"to_string","","",46,[[["self"]],["string"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"to_string","","",47,[[["self"]],["string"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"to_string","","",48,[[["self"]],["string"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"to_string","","",49,[[["self"]],["string"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"to_string","","",50,[[["self"]],["string"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"to_string","","",51,[[["self"]],["string"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"to_string","","",52,[[["self"]],["string"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"to_string","","",53,[[["self"]],["string"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"to_string","","",54,[[["self"]],["string"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"to_string","","",55,[[["self"]],["string"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"to_string","","",56,[[["self"]],["string"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"to_string","","",57,[[["self"]],["string"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"to_string","","",59,[[["self"]],["string"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"to_string","","",60,[[["self"]],["string"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"to_string","","",61,[[["self"]],["string"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"to_string","","",62,[[["self"]],["string"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"to_string","","",63,[[["self"]],["string"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"to_string","","",88,[[["self"]],["string"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,N],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"to_string","","",89,[[["self"]],["string"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"to_string","","",95,[[["self"]],["string"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into_iter","","",96,[[["self"]],["i"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"to_string","","",97,[[["self"]],["string"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"to_string","","",64,[[["self"]],["string"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"to_string","","",65,[[["self"]],["string"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"to_string","","",66,[[["self"]],["string"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"to_string","","",67,[[["self"]],["string"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"to_string","","",68,[[["self"]],["string"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"to_string","","",69,[[["self"]],["string"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"to_string","","",70,[[["self"]],["string"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"to_string","","",73,[[["self"]],["string"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"to_string","","",74,[[["self"]],["string"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"to_string","","",75,[[["self"]],["string"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"to_string","","",76,[[["self"]],["string"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"to_string","","",77,[[["self"]],["string"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"to_string","","",78,[[["self"]],["string"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"to_string","","",79,[[["self"]],["string"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"to_string","","",80,[[["self"]],["string"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"to_string","","",81,[[["self"]],["string"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"to_string","","",82,[[["self"]],["string"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"to_string","","",83,[[["self"]],["string"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"to_string","","",84,[[["self"]],["string"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"to_string","","",85,[[["self"]],["string"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"to_string","","",86,[[["self"]],["string"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"get_param","hyper::mime","",130,[[["self"],["a"]],["option",["value"]]]],[11,"to_string","hyper::header::parsing","",90,[[["self"]],["string"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"from","hyper::http","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"from","hyper::http::h1","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"from","hyper::http::message","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,N],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,N],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"from","hyper::net","",116,[[["t"]],["t"]]],[11,"into_iter","","",116,[[["self"]],["i"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,N],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"connect","","",118,[[["self"],["str"],["u16"],["str"]],["result",["httpstream","error"]]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"connect","","",120,[[["self"],["str"],["u16"],["str"]],["result",["httpstream","error"]]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,N],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"from","hyper::server","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"from","hyper::server::request","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"from","hyper::server::response","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"to_string","hyper::status","",126,[[["self"]],["string"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"to_string","hyper::uri","",128,[[["self"]],["string"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"to_string","hyper::version","",129,[[["self"]],["string"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"to_string","hyper::mime","",130,[[["self"]],["string"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"as_str","","",131,[[["self"]],["str"]]],[11,"to_string","","",131,[[["self"]],["string"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,N],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"as_str","","",132,[[["self"]],["str"]]],[11,"to_string","","",132,[[["self"]],["string"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,N],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"as_str","","",133,[[["self"]],["str"]]],[11,"to_string","","",133,[[["self"]],["string"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,N],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"as_str","","",134,[[["self"]],["str"]]],[11,"to_string","","",134,[[["self"]],["string"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,N],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]]],"paths":[[3,"LanguageTag"],[4,"Body"],[4,"RedirectPolicy"],[3,"Config"],[3,"Pool"],[3,"PooledStream"],[3,"Request"],[3,"Response"],[8,"IntoUrl"],[3,"Client"],[3,"RequestBuilder"],[3,"Url"],[3,"ProxyConfig"],[4,"ParseError"],[4,"Error"],[4,"Method"],[3,"EntityTag"],[3,"HttpDate"],[3,"Quality"],[3,"QualityItem"],[3,"Accept"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[3,"AccessControlExposeHeaders"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[3,"Allow"],[3,"Authorization"],[3,"Basic"],[3,"Bearer"],[3,"CacheControl"],[3,"Connection"],[3,"ContentDisposition"],[3,"ContentLength"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentRange"],[3,"ContentType"],[3,"Cookie"],[3,"Date"],[3,"ETag"],[3,"Expires"],[3,"From"],[3,"Host"],[3,"IfModifiedSince"],[3,"IfUnmodifiedSince"],[3,"LastModified"],[3,"Location"],[3,"Origin"],[3,"Prefer"],[3,"PreferenceApplied"],[3,"Referer"],[3,"Server"],[3,"SetCookie"],[3,"StrictTransportSecurity"],[3,"TransferEncoding"],[3,"Upgrade"],[3,"Protocol"],[3,"UserAgent"],[3,"HeaderFormatter"],[4,"Charset"],[4,"Encoding"],[4,"AccessControlAllowOrigin"],[4,"RangeUnit"],[4,"CacheDirective"],[4,"ConnectionOption"],[4,"DispositionType"],[4,"DispositionParam"],[4,"ContentRangeSpec"],[4,"Expect"],[4,"IfMatch"],[4,"IfNoneMatch"],[4,"IfRange"],[4,"Pragma"],[4,"Preference"],[4,"Range"],[4,"ByteRangeSpec"],[4,"ReferrerPolicy"],[4,"ProtocolName"],[4,"Vary"],[4,"RelationType"],[4,"MediaDesc"],[3,"AccessControlAllowCredentials"],[3,"Link"],[3,"LinkValue"],[3,"ExtendedValue"],[3,"HTTP_VALUE"],[8,"Scheme"],[8,"Header"],[8,"HeaderFormat"],[3,"Headers"],[3,"HeadersItems"],[3,"HeaderView"],[3,"RawStatus"],[3,"Incoming"],[4,"HttpReader"],[4,"HttpWriter"],[3,"Http11Message"],[3,"Http11Protocol"],[3,"EndError"],[3,"RequestHead"],[3,"ResponseHead"],[8,"Protocol"],[8,"HttpMessage"],[3,"HttpStream"],[4,"HttpsStream"],[8,"NetworkListener"],[8,"NetworkStream"],[8,"NetworkConnector"],[8,"SslClient"],[8,"SslServer"],[3,"NetworkConnections"],[3,"HttpListener"],[3,"HttpConnector"],[3,"HttpsListener"],[3,"HttpsConnector"],[3,"Listening"],[3,"Request"],[3,"Response"],[8,"Handler"],[3,"Server"],[4,"StatusCode"],[4,"StatusClass"],[4,"RequestUri"],[4,"HttpVersion"],[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"],[4,"Fresh"],[4,"Streaming"]]};
searchIndex["idna"]={"doc":"This Rust crate implements IDNA per the WHATWG URL Standard.","items":[[5,"domain_to_ascii","idna","The domain to ASCII algorithm.",N,[[["str"]],["result",["string","errors"]]]],[5,"domain_to_unicode","","The domain to Unicode algorithm.",N,N],[0,"punycode","","Punycode (RFC 3492) implementation.",N,N],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",N,[[["str"]],["option",["string"]]]],[5,"decode","","Convert Punycode to Unicode.",N,[[["str"]],["option",["vec"]]]],[5,"encode_str","","Convert an Unicode `str` to Punycode.",N,[[["str"]],["option",["string"]]]],[5,"encode","","Convert Unicode to Punycode.",N,N],[0,"uts46","idna","Unicode IDNA Compatibility Processing (Unicode Technical Standard #46)",N,N],[3,"Flags","idna::uts46","",N,N],[12,"use_std3_ascii_rules","","",0,N],[12,"transitional_processing","","",0,N],[12,"verify_dns_length","","",0,N],[3,"Errors","","Errors recorded during UTS #46 processing.",N,N],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",N,[[["str"],["flags"]],["result",["string","errors"]]]],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",N,N],[7,"PUNYCODE_PREFIX","","",N,N],[11,"clone","","",0,[[["self"]],["flags"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["isatty"]={"doc":"This crate provides the following three functions:","items":[[5,"stdin_isatty","isatty","",N,[[],["bool"]]],[5,"stdout_isatty","","",N,[[],["bool"]]],[5,"stderr_isatty","","",N,[[],["bool"]]]],"paths":[]};
searchIndex["itoa"]={"doc":"","items":[[5,"write","itoa","Write integer to an `io::Write`.",N,[[["w"],["v"]],["result",["usize"]]]],[5,"fmt","","Write integer to an `fmt::Write`.",N,[[["w"],["v"]],["result"]]],[8,"Integer","","An integer that can be formatted by `itoa::write` and `itoa::fmt`.",N,N]],"paths":[]};
searchIndex["language_tags"]={"doc":"Language tags can be used identify human languages, scripts e.g. Latin script, countries and other regions.","items":[[3,"LanguageTag","language_tags","A language tag as described in BCP47.",N,N],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,N],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,N],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,N],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,N],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,N],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,N],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,N],[4,"Error","","Defines an Error type for langtags.",N,N],[13,"DuplicateExtension","","The same extension subtag is only allowed once in a tag before the private use part.",1,N],[13,"EmptyExtension","","If an extension subtag is present, it must not be empty.",1,N],[13,"EmptyPrivateUse","","If the `x` subtag is present, it must not be empty.",1,N],[13,"ForbiddenChar","","The langtag contains a char that is not A-Z, a-z, 0-9 or the dash.",1,N],[13,"InvalidSubtag","","A subtag fails to parse, it does not match any other subtags.",1,N],[13,"InvalidLanguage","","The given language subtag is invalid.",1,N],[13,"SubtagTooLong","","A subtag may be eight characters in length at maximum.",1,N],[13,"TooManyExtlangs","","At maximum three extlangs are allowed, but zero to one extlangs are preferred.",1,N],[6,"Result","","Result type used for this library.",N,N],[17,"GRANDFATHERED","","Contains all grandfathered tags.",N,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["languagetag"]]],[11,"clone","","",0,[[["self"]],["languagetag"]]],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,[[["self"],["languagetag"]],["bool"]]],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,[[["self"]],["bool"]]],[11,"canonicalize","","Returns the canonical version of the language tag.",0,[[["self"]],["languagetag"]]],[11,"eq","","",0,[[["self"],["languagetag"]],["bool"]]],[11,"from_str","","",0,[[["str"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[14,"langtag","","Utility for creating simple language tags.",N,N],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[3,"LanguageTag"],[4,"Error"]]};
searchIndex["lazy_static"]={"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",N,[[["t"]]]],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",N,N],[14,"lazy_static","","",N,N]],"paths":[]};
searchIndex["libc"]={"doc":"Crate docs","items":[[3,"group","libc","",N,N],[12,"gr_name","","",0,N],[12,"gr_passwd","","",0,N],[12,"gr_gid","","",0,N],[12,"gr_mem","","",0,N],[3,"utimbuf","","",N,N],[12,"actime","","",1,N],[12,"modtime","","",1,N],[3,"timeval","","",N,N],[12,"tv_sec","","",2,N],[12,"tv_usec","","",2,N],[3,"timespec","","",N,N],[12,"tv_sec","","",3,N],[12,"tv_nsec","","",3,N],[3,"rlimit","","",N,N],[12,"rlim_cur","","",4,N],[12,"rlim_max","","",4,N],[3,"rusage","","",N,N],[12,"ru_utime","","",5,N],[12,"ru_stime","","",5,N],[12,"ru_maxrss","","",5,N],[12,"ru_ixrss","","",5,N],[12,"ru_idrss","","",5,N],[12,"ru_isrss","","",5,N],[12,"ru_minflt","","",5,N],[12,"ru_majflt","","",5,N],[12,"ru_nswap","","",5,N],[12,"ru_inblock","","",5,N],[12,"ru_oublock","","",5,N],[12,"ru_msgsnd","","",5,N],[12,"ru_msgrcv","","",5,N],[12,"ru_nsignals","","",5,N],[12,"ru_nvcsw","","",5,N],[12,"ru_nivcsw","","",5,N],[3,"in_addr","","",N,N],[12,"s_addr","","",6,N],[3,"in6_addr","","",N,N],[12,"s6_addr","","",7,N],[3,"ip_mreq","","",N,N],[12,"imr_multiaddr","","",8,N],[12,"imr_interface","","",8,N],[3,"ipv6_mreq","","",N,N],[12,"ipv6mr_multiaddr","","",9,N],[12,"ipv6mr_interface","","",9,N],[3,"hostent","","",N,N],[12,"h_name","","",10,N],[12,"h_aliases","","",10,N],[12,"h_addrtype","","",10,N],[12,"h_length","","",10,N],[12,"h_addr_list","","",10,N],[3,"iovec","","",N,N],[12,"iov_base","","",11,N],[12,"iov_len","","",11,N],[3,"pollfd","","",N,N],[12,"fd","","",12,N],[12,"events","","",12,N],[12,"revents","","",12,N],[3,"winsize","","",N,N],[12,"ws_row","","",13,N],[12,"ws_col","","",13,N],[12,"ws_xpixel","","",13,N],[12,"ws_ypixel","","",13,N],[3,"linger","","",N,N],[12,"l_onoff","","",14,N],[12,"l_linger","","",14,N],[3,"sigval","","",N,N],[12,"sival_ptr","","",15,N],[3,"itimerval","","",N,N],[12,"it_interval","","",16,N],[12,"it_value","","",16,N],[3,"tms","","",N,N],[12,"tms_utime","","",17,N],[12,"tms_stime","","",17,N],[12,"tms_cutime","","",17,N],[12,"tms_cstime","","",17,N],[3,"servent","","",N,N],[12,"s_name","","",18,N],[12,"s_aliases","","",18,N],[12,"s_port","","",18,N],[12,"s_proto","","",18,N],[3,"protoent","","",N,N],[12,"p_name","","",19,N],[12,"p_aliases","","",19,N],[12,"p_proto","","",19,N],[3,"sockaddr","","",N,N],[12,"sa_family","","",20,N],[12,"sa_data","","",20,N],[3,"sockaddr_in","","",N,N],[12,"sin_family","","",21,N],[12,"sin_port","","",21,N],[12,"sin_addr","","",21,N],[12,"sin_zero","","",21,N],[3,"sockaddr_in6","","",N,N],[12,"sin6_family","","",22,N],[12,"sin6_port","","",22,N],[12,"sin6_flowinfo","","",22,N],[12,"sin6_addr","","",22,N],[12,"sin6_scope_id","","",22,N],[3,"sockaddr_un","","",N,N],[12,"sun_family","","",23,N],[12,"sun_path","","",23,N],[3,"sockaddr_storage","","",N,N],[12,"ss_family","","",24,N],[3,"addrinfo","","",N,N],[12,"ai_flags","","",25,N],[12,"ai_family","","",25,N],[12,"ai_socktype","","",25,N],[12,"ai_protocol","","",25,N],[12,"ai_addrlen","","",25,N],[12,"ai_addr","","",25,N],[12,"ai_canonname","","",25,N],[12,"ai_next","","",25,N],[3,"sockaddr_nl","","",N,N],[12,"nl_family","","",26,N],[12,"nl_pid","","",26,N],[12,"nl_groups","","",26,N],[3,"sockaddr_ll","","",N,N],[12,"sll_family","","",27,N],[12,"sll_protocol","","",27,N],[12,"sll_ifindex","","",27,N],[12,"sll_hatype","","",27,N],[12,"sll_pkttype","","",27,N],[12,"sll_halen","","",27,N],[12,"sll_addr","","",27,N],[3,"fd_set","","",N,N],[3,"tm","","",N,N],[12,"tm_sec","","",28,N],[12,"tm_min","","",28,N],[12,"tm_hour","","",28,N],[12,"tm_mday","","",28,N],[12,"tm_mon","","",28,N],[12,"tm_year","","",28,N],[12,"tm_wday","","",28,N],[12,"tm_yday","","",28,N],[12,"tm_isdst","","",28,N],[12,"tm_gmtoff","","",28,N],[12,"tm_zone","","",28,N],[3,"sched_param","","",N,N],[12,"sched_priority","","",29,N],[3,"Dl_info","","",N,N],[12,"dli_fname","","",30,N],[12,"dli_fbase","","",30,N],[12,"dli_sname","","",30,N],[12,"dli_saddr","","",30,N],[3,"epoll_event","","",N,N],[12,"events","","",31,N],[12,"u64","","",31,N],[3,"utsname","","",N,N],[12,"sysname","","",32,N],[12,"nodename","","",32,N],[12,"release","","",32,N],[12,"version","","",32,N],[12,"machine","","",32,N],[12,"domainname","","",32,N],[3,"lconv","","",N,N],[12,"decimal_point","","",33,N],[12,"thousands_sep","","",33,N],[12,"grouping","","",33,N],[12,"int_curr_symbol","","",33,N],[12,"currency_symbol","","",33,N],[12,"mon_decimal_point","","",33,N],[12,"mon_thousands_sep","","",33,N],[12,"mon_grouping","","",33,N],[12,"positive_sign","","",33,N],[12,"negative_sign","","",33,N],[12,"int_frac_digits","","",33,N],[12,"frac_digits","","",33,N],[12,"p_cs_precedes","","",33,N],[12,"p_sep_by_space","","",33,N],[12,"n_cs_precedes","","",33,N],[12,"n_sep_by_space","","",33,N],[12,"p_sign_posn","","",33,N],[12,"n_sign_posn","","",33,N],[12,"int_p_cs_precedes","","",33,N],[12,"int_p_sep_by_space","","",33,N],[12,"int_n_cs_precedes","","",33,N],[12,"int_n_sep_by_space","","",33,N],[12,"int_p_sign_posn","","",33,N],[12,"int_n_sign_posn","","",33,N],[3,"sigevent","","",N,N],[12,"sigev_value","","",34,N],[12,"sigev_signo","","",34,N],[12,"sigev_notify","","",34,N],[12,"sigev_notify_thread_id","","",34,N],[3,"in_pktinfo","","",N,N],[12,"ipi_ifindex","","",35,N],[12,"ipi_spec_dst","","",35,N],[12,"ipi_addr","","",35,N],[3,"ifaddrs","","",N,N],[12,"ifa_next","","",36,N],[12,"ifa_name","","",36,N],[12,"ifa_flags","","",36,N],[12,"ifa_addr","","",36,N],[12,"ifa_netmask","","",36,N],[12,"ifa_ifu","","",36,N],[12,"ifa_data","","",36,N],[3,"in6_rtmsg","","",N,N],[3,"arpreq","","",N,N],[12,"arp_pa","","",37,N],[12,"arp_ha","","",37,N],[12,"arp_flags","","",37,N],[12,"arp_netmask","","",37,N],[12,"arp_dev","","",37,N],[3,"arpreq_old","","",N,N],[12,"arp_pa","","",38,N],[12,"arp_ha","","",38,N],[12,"arp_flags","","",38,N],[12,"arp_netmask","","",38,N],[3,"arphdr","","",N,N],[12,"ar_hrd","","",39,N],[12,"ar_pro","","",39,N],[12,"ar_hln","","",39,N],[12,"ar_pln","","",39,N],[12,"ar_op","","",39,N],[3,"dirent","","",N,N],[12,"d_ino","","",40,N],[12,"d_off","","",40,N],[12,"d_reclen","","",40,N],[12,"d_type","","",40,N],[12,"d_name","","",40,N],[3,"dirent64","","",N,N],[12,"d_ino","","",41,N],[12,"d_off","","",41,N],[12,"d_reclen","","",41,N],[12,"d_type","","",41,N],[12,"d_name","","",41,N],[3,"rlimit64","","",N,N],[12,"rlim_cur","","",42,N],[12,"rlim_max","","",42,N],[3,"glob_t","","",N,N],[12,"gl_pathc","","",43,N],[12,"gl_pathv","","",43,N],[12,"gl_offs","","",43,N],[12,"gl_flags","","",43,N],[3,"pthread_mutex_t","","",N,N],[3,"pthread_rwlock_t","","",N,N],[3,"pthread_mutexattr_t","","",N,N],[3,"pthread_rwlockattr_t","","",N,N],[3,"pthread_cond_t","","",N,N],[3,"pthread_condattr_t","","",N,N],[3,"passwd","","",N,N],[12,"pw_name","","",44,N],[12,"pw_passwd","","",44,N],[12,"pw_uid","","",44,N],[12,"pw_gid","","",44,N],[12,"pw_gecos","","",44,N],[12,"pw_dir","","",44,N],[12,"pw_shell","","",44,N],[3,"spwd","","",N,N],[12,"sp_namp","","",45,N],[12,"sp_pwdp","","",45,N],[12,"sp_lstchg","","",45,N],[12,"sp_min","","",45,N],[12,"sp_max","","",45,N],[12,"sp_warn","","",45,N],[12,"sp_inact","","",45,N],[12,"sp_expire","","",45,N],[12,"sp_flag","","",45,N],[3,"dqblk","","",N,N],[12,"dqb_bhardlimit","","",46,N],[12,"dqb_bsoftlimit","","",46,N],[12,"dqb_curspace","","",46,N],[12,"dqb_ihardlimit","","",46,N],[12,"dqb_isoftlimit","","",46,N],[12,"dqb_curinodes","","",46,N],[12,"dqb_btime","","",46,N],[12,"dqb_itime","","",46,N],[12,"dqb_valid","","",46,N],[3,"signalfd_siginfo","","",N,N],[12,"ssi_signo","","",47,N],[12,"ssi_errno","","",47,N],[12,"ssi_code","","",47,N],[12,"ssi_pid","","",47,N],[12,"ssi_uid","","",47,N],[12,"ssi_fd","","",47,N],[12,"ssi_tid","","",47,N],[12,"ssi_band","","",47,N],[12,"ssi_overrun","","",47,N],[12,"ssi_trapno","","",47,N],[12,"ssi_status","","",47,N],[12,"ssi_int","","",47,N],[12,"ssi_ptr","","",47,N],[12,"ssi_utime","","",47,N],[12,"ssi_stime","","",47,N],[12,"ssi_addr","","",47,N],[3,"itimerspec","","",N,N],[12,"it_interval","","",48,N],[12,"it_value","","",48,N],[3,"fsid_t","","",N,N],[3,"mq_attr","","",N,N],[12,"mq_flags","","",49,N],[12,"mq_maxmsg","","",49,N],[12,"mq_msgsize","","",49,N],[12,"mq_curmsgs","","",49,N],[3,"packet_mreq","","",N,N],[12,"mr_ifindex","","",50,N],[12,"mr_type","","",50,N],[12,"mr_alen","","",50,N],[12,"mr_address","","",50,N],[3,"cpu_set_t","","",N,N],[3,"if_nameindex","","",N,N],[12,"if_index","","",51,N],[12,"if_name","","",51,N],[3,"msginfo","","",N,N],[12,"msgpool","","",52,N],[12,"msgmap","","",52,N],[12,"msgmax","","",52,N],[12,"msgmnb","","",52,N],[12,"msgmni","","",52,N],[12,"msgssz","","",52,N],[12,"msgtql","","",52,N],[12,"msgseg","","",52,N],[3,"mmsghdr","","",N,N],[12,"msg_hdr","","",53,N],[12,"msg_len","","",53,N],[3,"sembuf","","",N,N],[12,"sem_num","","",54,N],[12,"sem_op","","",54,N],[12,"sem_flg","","",54,N],[3,"input_event","","",N,N],[12,"time","","",55,N],[12,"type_","","",55,N],[12,"code","","",55,N],[12,"value","","",55,N],[3,"input_id","","",N,N],[12,"bustype","","",56,N],[12,"vendor","","",56,N],[12,"product","","",56,N],[12,"version","","",56,N],[3,"input_absinfo","","",N,N],[12,"value","","",57,N],[12,"minimum","","",57,N],[12,"maximum","","",57,N],[12,"fuzz","","",57,N],[12,"flat","","",57,N],[12,"resolution","","",57,N],[3,"input_keymap_entry","","",N,N],[12,"flags","","",58,N],[12,"len","","",58,N],[12,"index","","",58,N],[12,"keycode","","",58,N],[12,"scancode","","",58,N],[3,"input_mask","","",N,N],[12,"type_","","",59,N],[12,"codes_size","","",59,N],[12,"codes_ptr","","",59,N],[3,"ff_replay","","",N,N],[12,"length","","",60,N],[12,"delay","","",60,N],[3,"ff_trigger","","",N,N],[12,"button","","",61,N],[12,"interval","","",61,N],[3,"ff_envelope","","",N,N],[12,"attack_length","","",62,N],[12,"attack_level","","",62,N],[12,"fade_length","","",62,N],[12,"fade_level","","",62,N],[3,"ff_constant_effect","","",N,N],[12,"level","","",63,N],[12,"envelope","","",63,N],[3,"ff_ramp_effect","","",N,N],[12,"start_level","","",64,N],[12,"end_level","","",64,N],[12,"envelope","","",64,N],[3,"ff_condition_effect","","",N,N],[12,"right_saturation","","",65,N],[12,"left_saturation","","",65,N],[12,"right_coeff","","",65,N],[12,"left_coeff","","",65,N],[12,"deadband","","",65,N],[12,"center","","",65,N],[3,"ff_periodic_effect","","",N,N],[12,"waveform","","",66,N],[12,"period","","",66,N],[12,"magnitude","","",66,N],[12,"offset","","",66,N],[12,"phase","","",66,N],[12,"envelope","","",66,N],[12,"custom_len","","",66,N],[12,"custom_data","","",66,N],[3,"ff_rumble_effect","","",N,N],[12,"strong_magnitude","","",67,N],[12,"weak_magnitude","","",67,N],[3,"ff_effect","","",N,N],[12,"type_","","",68,N],[12,"id","","",68,N],[12,"direction","","",68,N],[12,"trigger","","",68,N],[12,"replay","","",68,N],[12,"u","","",68,N],[3,"dl_phdr_info","","",N,N],[12,"dlpi_addr","","",69,N],[12,"dlpi_name","","",69,N],[12,"dlpi_phdr","","",69,N],[12,"dlpi_phnum","","",69,N],[12,"dlpi_adds","","",69,N],[12,"dlpi_subs","","",69,N],[12,"dlpi_tls_modid","","",69,N],[12,"dlpi_tls_data","","",69,N],[3,"Elf32_Phdr","","",N,N],[12,"p_type","","",70,N],[12,"p_offset","","",70,N],[12,"p_vaddr","","",70,N],[12,"p_paddr","","",70,N],[12,"p_filesz","","",70,N],[12,"p_memsz","","",70,N],[12,"p_flags","","",70,N],[12,"p_align","","",70,N],[3,"Elf64_Phdr","","",N,N],[12,"p_type","","",71,N],[12,"p_flags","","",71,N],[12,"p_offset","","",71,N],[12,"p_vaddr","","",71,N],[12,"p_paddr","","",71,N],[12,"p_filesz","","",71,N],[12,"p_memsz","","",71,N],[12,"p_align","","",71,N],[3,"ucred","","",N,N],[12,"pid","","",72,N],[12,"uid","","",72,N],[12,"gid","","",72,N],[3,"mntent","","",N,N],[12,"mnt_fsname","","",73,N],[12,"mnt_dir","","",73,N],[12,"mnt_type","","",73,N],[12,"mnt_opts","","",73,N],[12,"mnt_freq","","",73,N],[12,"mnt_passno","","",73,N],[3,"posix_spawn_file_actions_t","","",N,N],[3,"posix_spawnattr_t","","",N,N],[3,"genlmsghdr","","",N,N],[12,"cmd","","",74,N],[12,"version","","",74,N],[12,"reserved","","",74,N],[3,"in6_pktinfo","","",N,N],[12,"ipi6_addr","","",75,N],[12,"ipi6_ifindex","","",75,N],[3,"arpd_request","","",N,N],[12,"req","","",76,N],[12,"ip","","",76,N],[12,"dev","","",76,N],[12,"stamp","","",76,N],[12,"updated","","",76,N],[12,"ha","","",76,N],[3,"aiocb","","",N,N],[12,"aio_fildes","","",77,N],[12,"aio_lio_opcode","","",77,N],[12,"aio_reqprio","","",77,N],[12,"aio_buf","","",77,N],[12,"aio_nbytes","","",77,N],[12,"aio_sigevent","","",77,N],[12,"aio_offset","","",77,N],[3,"__exit_status","","",N,N],[12,"e_termination","","",78,N],[12,"e_exit","","",78,N],[3,"__timeval","","",N,N],[12,"tv_sec","","",79,N],[12,"tv_usec","","",79,N],[3,"utmpx","","",N,N],[12,"ut_type","","",80,N],[12,"ut_pid","","",80,N],[12,"ut_line","","",80,N],[12,"ut_id","","",80,N],[12,"ut_user","","",80,N],[12,"ut_host","","",80,N],[12,"ut_exit","","",80,N],[12,"ut_session","","",80,N],[12,"ut_tv","","",80,N],[12,"ut_addr_v6","","",80,N],[3,"sigaction","","",N,N],[12,"sa_sigaction","","",81,N],[12,"sa_mask","","",81,N],[12,"sa_flags","","",81,N],[12,"sa_restorer","","",81,N],[3,"stack_t","","",N,N],[12,"ss_sp","","",82,N],[12,"ss_flags","","",82,N],[12,"ss_size","","",82,N],[3,"siginfo_t","","",N,N],[12,"si_signo","","",83,N],[12,"si_errno","","",83,N],[12,"si_code","","",83,N],[12,"_pad","","",83,N],[3,"glob64_t","","",N,N],[12,"gl_pathc","","",84,N],[12,"gl_pathv","","",84,N],[12,"gl_offs","","",84,N],[12,"gl_flags","","",84,N],[3,"statfs","","",N,N],[12,"f_type","","",85,N],[12,"f_bsize","","",85,N],[12,"f_blocks","","",85,N],[12,"f_bfree","","",85,N],[12,"f_bavail","","",85,N],[12,"f_files","","",85,N],[12,"f_ffree","","",85,N],[12,"f_fsid","","",85,N],[12,"f_namelen","","",85,N],[12,"f_frsize","","",85,N],[3,"msghdr","","",N,N],[12,"msg_name","","",86,N],[12,"msg_namelen","","",86,N],[12,"msg_iov","","",86,N],[12,"msg_iovlen","","",86,N],[12,"msg_control","","",86,N],[12,"msg_controllen","","",86,N],[12,"msg_flags","","",86,N],[3,"cmsghdr","","",N,N],[12,"cmsg_len","","",87,N],[12,"cmsg_level","","",87,N],[12,"cmsg_type","","",87,N],[3,"termios","","",N,N],[12,"c_iflag","","",88,N],[12,"c_oflag","","",88,N],[12,"c_cflag","","",88,N],[12,"c_lflag","","",88,N],[12,"c_line","","",88,N],[12,"c_cc","","",88,N],[12,"c_ispeed","","",88,N],[12,"c_ospeed","","",88,N],[3,"flock","","",N,N],[12,"l_type","","",89,N],[12,"l_whence","","",89,N],[12,"l_start","","",89,N],[12,"l_len","","",89,N],[12,"l_pid","","",89,N],[3,"sem_t","","",N,N],[3,"mallinfo","","",N,N],[12,"arena","","",90,N],[12,"ordblks","","",90,N],[12,"smblks","","",90,N],[12,"hblks","","",90,N],[12,"hblkhd","","",90,N],[12,"usmblks","","",90,N],[12,"fsmblks","","",90,N],[12,"uordblks","","",90,N],[12,"fordblks","","",90,N],[12,"keepcost","","",90,N],[3,"nlmsghdr","","",N,N],[12,"nlmsg_len","","",91,N],[12,"nlmsg_type","","",91,N],[12,"nlmsg_flags","","",91,N],[12,"nlmsg_seq","","",91,N],[12,"nlmsg_pid","","",91,N],[3,"nlmsgerr","","",N,N],[12,"error","","",92,N],[12,"msg","","",92,N],[3,"nl_pktinfo","","",N,N],[12,"group","","",93,N],[3,"nl_mmap_req","","",N,N],[12,"nm_block_size","","",94,N],[12,"nm_block_nr","","",94,N],[12,"nm_frame_size","","",94,N],[12,"nm_frame_nr","","",94,N],[3,"nl_mmap_hdr","","",N,N],[12,"nm_status","","",95,N],[12,"nm_len","","",95,N],[12,"nm_group","","",95,N],[12,"nm_pid","","",95,N],[12,"nm_uid","","",95,N],[12,"nm_gid","","",95,N],[3,"nlattr","","",N,N],[12,"nla_len","","",96,N],[12,"nla_type","","",96,N],[3,"rtentry","","",N,N],[12,"rt_pad1","","",97,N],[12,"rt_dst","","",97,N],[12,"rt_gateway","","",97,N],[12,"rt_genmask","","",97,N],[12,"rt_flags","","",97,N],[12,"rt_pad2","","",97,N],[12,"rt_pad3","","",97,N],[12,"rt_tos","","",97,N],[12,"rt_class","","",97,N],[12,"rt_pad4","","",97,N],[12,"rt_metric","","",97,N],[12,"rt_dev","","",97,N],[12,"rt_mtu","","",97,N],[12,"rt_window","","",97,N],[12,"rt_irtt","","",97,N],[3,"sigset_t","","",N,N],[3,"sysinfo","","",N,N],[12,"uptime","","",98,N],[12,"loads","","",98,N],[12,"totalram","","",98,N],[12,"freeram","","",98,N],[12,"sharedram","","",98,N],[12,"bufferram","","",98,N],[12,"totalswap","","",98,N],[12,"freeswap","","",98,N],[12,"procs","","",98,N],[12,"pad","","",98,N],[12,"totalhigh","","",98,N],[12,"freehigh","","",98,N],[12,"mem_unit","","",98,N],[12,"_f","","",98,N],[3,"msqid_ds","","",N,N],[12,"msg_perm","","",99,N],[12,"msg_stime","","",99,N],[12,"msg_rtime","","",99,N],[12,"msg_ctime","","",99,N],[12,"msg_qnum","","",99,N],[12,"msg_qbytes","","",99,N],[12,"msg_lspid","","",99,N],[12,"msg_lrpid","","",99,N],[3,"stat","","",N,N],[12,"st_dev","","",100,N],[12,"st_ino","","",100,N],[12,"st_nlink","","",100,N],[12,"st_mode","","",100,N],[12,"st_uid","","",100,N],[12,"st_gid","","",100,N],[12,"st_rdev","","",100,N],[12,"st_size","","",100,N],[12,"st_blksize","","",100,N],[12,"st_blocks","","",100,N],[12,"st_atime","","",100,N],[12,"st_atime_nsec","","",100,N],[12,"st_mtime","","",100,N],[12,"st_mtime_nsec","","",100,N],[12,"st_ctime","","",100,N],[12,"st_ctime_nsec","","",100,N],[3,"stat64","","",N,N],[12,"st_dev","","",101,N],[12,"st_ino","","",101,N],[12,"st_nlink","","",101,N],[12,"st_mode","","",101,N],[12,"st_uid","","",101,N],[12,"st_gid","","",101,N],[12,"st_rdev","","",101,N],[12,"st_size","","",101,N],[12,"st_blksize","","",101,N],[12,"st_blocks","","",101,N],[12,"st_atime","","",101,N],[12,"st_atime_nsec","","",101,N],[12,"st_mtime","","",101,N],[12,"st_mtime_nsec","","",101,N],[12,"st_ctime","","",101,N],[12,"st_ctime_nsec","","",101,N],[3,"statfs64","","",N,N],[12,"f_type","","",102,N],[12,"f_bsize","","",102,N],[12,"f_blocks","","",102,N],[12,"f_bfree","","",102,N],[12,"f_bavail","","",102,N],[12,"f_files","","",102,N],[12,"f_ffree","","",102,N],[12,"f_fsid","","",102,N],[12,"f_namelen","","",102,N],[12,"f_frsize","","",102,N],[12,"f_flags","","",102,N],[12,"f_spare","","",102,N],[3,"statvfs64","","",N,N],[12,"f_bsize","","",103,N],[12,"f_frsize","","",103,N],[12,"f_blocks","","",103,N],[12,"f_bfree","","",103,N],[12,"f_bavail","","",103,N],[12,"f_files","","",103,N],[12,"f_ffree","","",103,N],[12,"f_favail","","",103,N],[12,"f_fsid","","",103,N],[12,"f_flag","","",103,N],[12,"f_namemax","","",103,N],[3,"pthread_attr_t","","",N,N],[3,"_libc_fpxreg","","",N,N],[12,"significand","","",104,N],[12,"exponent","","",104,N],[3,"_libc_xmmreg","","",N,N],[12,"element","","",105,N],[3,"_libc_fpstate","","",N,N],[12,"cwd","","",106,N],[12,"swd","","",106,N],[12,"ftw","","",106,N],[12,"fop","","",106,N],[12,"rip","","",106,N],[12,"rdp","","",106,N],[12,"mxcsr","","",106,N],[12,"mxcr_mask","","",106,N],[12,"_st","","",106,N],[12,"_xmm","","",106,N],[3,"user_fpregs_struct","","",N,N],[12,"cwd","","",107,N],[12,"swd","","",107,N],[12,"ftw","","",107,N],[12,"fop","","",107,N],[12,"rip","","",107,N],[12,"rdp","","",107,N],[12,"mxcsr","","",107,N],[12,"mxcr_mask","","",107,N],[12,"st_space","","",107,N],[12,"xmm_space","","",107,N],[3,"user_regs_struct","","",N,N],[12,"r15","","",108,N],[12,"r14","","",108,N],[12,"r13","","",108,N],[12,"r12","","",108,N],[12,"rbp","","",108,N],[12,"rbx","","",108,N],[12,"r11","","",108,N],[12,"r10","","",108,N],[12,"r9","","",108,N],[12,"r8","","",108,N],[12,"rax","","",108,N],[12,"rcx","","",108,N],[12,"rdx","","",108,N],[12,"rsi","","",108,N],[12,"rdi","","",108,N],[12,"orig_rax","","",108,N],[12,"rip","","",108,N],[12,"cs","","",108,N],[12,"eflags","","",108,N],[12,"rsp","","",108,N],[12,"ss","","",108,N],[12,"fs_base","","",108,N],[12,"gs_base","","",108,N],[12,"ds","","",108,N],[12,"es","","",108,N],[12,"fs","","",108,N],[12,"gs","","",108,N],[3,"user","","",N,N],[12,"regs","","",109,N],[12,"u_fpvalid","","",109,N],[12,"i387","","",109,N],[12,"u_tsize","","",109,N],[12,"u_dsize","","",109,N],[12,"u_ssize","","",109,N],[12,"start_code","","",109,N],[12,"start_stack","","",109,N],[12,"signal","","",109,N],[12,"u_ar0","","",109,N],[12,"u_fpstate","","",109,N],[12,"magic","","",109,N],[12,"u_comm","","",109,N],[12,"u_debugreg","","",109,N],[3,"mcontext_t","","",N,N],[12,"gregs","","",110,N],[12,"fpregs","","",110,N],[3,"ucontext_t","","",N,N],[12,"uc_flags","","",111,N],[12,"uc_link","","",111,N],[12,"uc_stack","","",111,N],[12,"uc_mcontext","","",111,N],[12,"uc_sigmask","","",111,N],[3,"ipc_perm","","",N,N],[12,"__key","","",112,N],[12,"uid","","",112,N],[12,"gid","","",112,N],[12,"cuid","","",112,N],[12,"cgid","","",112,N],[12,"mode","","",112,N],[12,"__seq","","",112,N],[3,"shmid_ds","","",N,N],[12,"shm_perm","","",113,N],[12,"shm_segsz","","",113,N],[12,"shm_atime","","",113,N],[12,"shm_dtime","","",113,N],[12,"shm_ctime","","",113,N],[12,"shm_cpid","","",113,N],[12,"shm_lpid","","",113,N],[12,"shm_nattch","","",113,N],[3,"termios2","","",N,N],[12,"c_iflag","","",114,N],[12,"c_oflag","","",114,N],[12,"c_cflag","","",114,N],[12,"c_lflag","","",114,N],[12,"c_line","","",114,N],[12,"c_cc","","",114,N],[12,"c_ispeed","","",114,N],[12,"c_ospeed","","",114,N],[3,"statvfs","","",N,N],[12,"f_bsize","","",115,N],[12,"f_frsize","","",115,N],[12,"f_blocks","","",115,N],[12,"f_bfree","","",115,N],[12,"f_bavail","","",115,N],[12,"f_files","","",115,N],[12,"f_ffree","","",115,N],[12,"f_favail","","",115,N],[12,"f_fsid","","",115,N],[12,"f_flag","","",115,N],[12,"f_namemax","","",115,N],[4,"c_void","","",N,N],[4,"FILE","","",N,N],[4,"fpos_t","","",N,N],[4,"DIR","","",N,N],[4,"locale_t","","",N,N],[4,"timezone","","",N,N],[4,"fpos64_t","","",N,N],[5,"FD_CLR","","",N,N],[5,"FD_ISSET","","",N,N],[5,"FD_SET","","",N,N],[5,"FD_ZERO","","",N,N],[5,"WIFSTOPPED","","",N,[[["c_int"]],["bool"]]],[5,"WSTOPSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFCONTINUED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSIGNALED","","",N,[[["c_int"]],["bool"]]],[5,"WTERMSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFEXITED","","",N,[[["c_int"]],["bool"]]],[5,"WEXITSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WCOREDUMP","","",N,[[["c_int"]],["bool"]]],[5,"QCMD","","",N,[[["c_int"],["c_int"]],["c_int"]]],[5,"IPOPT_COPIED","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_CLASS","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_NUMBER","","",N,[[["u8"]],["u8"]]],[5,"CPU_ZERO","","",N,N],[5,"CPU_SET","","",N,N],[5,"CPU_CLR","","",N,N],[5,"CPU_ISSET","","",N,[[["usize"],["cpu_set_t"]],["bool"]]],[5,"CPU_EQUAL","","",N,[[["cpu_set_t"],["cpu_set_t"]],["bool"]]],[5,"major","","",N,[[["dev_t"]],["c_uint"]]],[5,"minor","","",N,[[["dev_t"]],["c_uint"]]],[5,"makedev","","",N,[[["c_uint"],["c_uint"]],["dev_t"]]],[5,"IPTOS_TOS","","",N,[[["u8"]],["u8"]]],[5,"IPTOS_PREC","","",N,[[["u8"]],["u8"]]],[5,"RT_TOS","","",N,[[["u8"]],["u8"]]],[5,"RT_ADDRCLASS","","",N,[[["u32"]],["u32"]]],[5,"RT_LOCALADDR","","",N,[[["u32"]],["bool"]]],[5,"NLA_ALIGN","","",N,[[["c_int"]],["c_int"]]],[5,"isalnum","","",N,N],[5,"isalpha","","",N,N],[5,"iscntrl","","",N,N],[5,"isdigit","","",N,N],[5,"isgraph","","",N,N],[5,"islower","","",N,N],[5,"isprint","","",N,N],[5,"ispunct","","",N,N],[5,"isspace","","",N,N],[5,"isupper","","",N,N],[5,"isxdigit","","",N,N],[5,"tolower","","",N,N],[5,"toupper","","",N,N],[5,"fopen","","",N,N],[5,"freopen","","",N,N],[5,"fflush","","",N,N],[5,"fclose","","",N,N],[5,"remove","","",N,N],[5,"rename","","",N,N],[5,"tmpfile","","",N,N],[5,"setvbuf","","",N,N],[5,"setbuf","","",N,N],[5,"getchar","","",N,N],[5,"putchar","","",N,N],[5,"fgetc","","",N,N],[5,"fgets","","",N,N],[5,"fputc","","",N,N],[5,"fputs","","",N,N],[5,"puts","","",N,N],[5,"ungetc","","",N,N],[5,"fread","","",N,N],[5,"fwrite","","",N,N],[5,"fseek","","",N,N],[5,"ftell","","",N,N],[5,"rewind","","",N,N],[5,"fgetpos","","",N,N],[5,"fsetpos","","",N,N],[5,"feof","","",N,N],[5,"ferror","","",N,N],[5,"perror","","",N,N],[5,"atoi","","",N,N],[5,"strtod","","",N,N],[5,"strtol","","",N,N],[5,"strtoul","","",N,N],[5,"calloc","","",N,N],[5,"malloc","","",N,N],[5,"realloc","","",N,N],[5,"free","","",N,N],[5,"abort","","",N,N],[5,"exit","","",N,N],[5,"_exit","","",N,N],[5,"atexit","","",N,N],[5,"system","","",N,N],[5,"getenv","","",N,N],[5,"strcpy","","",N,N],[5,"strncpy","","",N,N],[5,"strcat","","",N,N],[5,"strncat","","",N,N],[5,"strcmp","","",N,N],[5,"strncmp","","",N,N],[5,"strcoll","","",N,N],[5,"strchr","","",N,N],[5,"strrchr","","",N,N],[5,"strspn","","",N,N],[5,"strcspn","","",N,N],[5,"strdup","","",N,N],[5,"strpbrk","","",N,N],[5,"strstr","","",N,N],[5,"strlen","","",N,N],[5,"strnlen","","",N,N],[5,"strerror","","",N,N],[5,"strtok","","",N,N],[5,"strxfrm","","",N,N],[5,"wcslen","","",N,N],[5,"wcstombs","","",N,N],[5,"memchr","","",N,N],[5,"memcmp","","",N,N],[5,"memcpy","","",N,N],[5,"memmove","","",N,N],[5,"memset","","",N,N],[5,"abs","","",N,N],[5,"atof","","",N,N],[5,"labs","","",N,N],[5,"rand","","",N,N],[5,"srand","","",N,N],[5,"getpwnam","","",N,N],[5,"getpwuid","","",N,N],[5,"fprintf","","",N,N],[5,"printf","","",N,N],[5,"snprintf","","",N,N],[5,"sprintf","","",N,N],[5,"fscanf","","",N,N],[5,"scanf","","",N,N],[5,"sscanf","","",N,N],[5,"getchar_unlocked","","",N,N],[5,"putchar_unlocked","","",N,N],[5,"socket","","",N,N],[5,"connect","","",N,N],[5,"listen","","",N,N],[5,"accept","","",N,N],[5,"getpeername","","",N,N],[5,"getsockname","","",N,N],[5,"setsockopt","","",N,N],[5,"socketpair","","",N,N],[5,"sendto","","",N,N],[5,"shutdown","","",N,N],[5,"chmod","","",N,N],[5,"fchmod","","",N,N],[5,"fstat","","",N,N],[5,"mkdir","","",N,N],[5,"stat","","",N,N],[5,"pclose","","",N,N],[5,"fdopen","","",N,N],[5,"fileno","","",N,N],[5,"open","","",N,N],[5,"creat","","",N,N],[5,"fcntl","","",N,N],[5,"opendir","","",N,N],[5,"fdopendir","","",N,N],[5,"readdir","","",N,N],[5,"readdir_r","","",N,N],[5,"closedir","","",N,N],[5,"rewinddir","","",N,N],[5,"openat","","",N,N],[5,"fchmodat","","",N,N],[5,"fchown","","",N,N],[5,"fchownat","","",N,N],[5,"fstatat","","",N,N],[5,"linkat","","",N,N],[5,"mkdirat","","",N,N],[5,"readlinkat","","",N,N],[5,"renameat","","",N,N],[5,"symlinkat","","",N,N],[5,"unlinkat","","",N,N],[5,"access","","",N,N],[5,"alarm","","",N,N],[5,"chdir","","",N,N],[5,"fchdir","","",N,N],[5,"chown","","",N,N],[5,"lchown","","",N,N],[5,"close","","",N,N],[5,"dup","","",N,N],[5,"dup2","","",N,N],[5,"execl","","",N,N],[5,"execle","","",N,N],[5,"execlp","","",N,N],[5,"execv","","",N,N],[5,"execve","","",N,N],[5,"execvp","","",N,N],[5,"fork","","",N,N],[5,"fpathconf","","",N,N],[5,"getcwd","","",N,N],[5,"getegid","","",N,N],[5,"geteuid","","",N,N],[5,"getgid","","",N,N],[5,"getgroups","","",N,N],[5,"getlogin","","",N,N],[5,"getopt","","",N,N],[5,"getpgid","","",N,N],[5,"getpgrp","","",N,N],[5,"getpid","","",N,N],[5,"getppid","","",N,N],[5,"getuid","","",N,N],[5,"isatty","","",N,N],[5,"link","","",N,N],[5,"lseek","","",N,N],[5,"pathconf","","",N,N],[5,"pause","","",N,N],[5,"pipe","","",N,N],[5,"posix_memalign","","",N,N],[5,"read","","",N,N],[5,"rmdir","","",N,N],[5,"seteuid","","",N,N],[5,"setgid","","",N,N],[5,"setpgid","","",N,N],[5,"setsid","","",N,N],[5,"setuid","","",N,N],[5,"sleep","","",N,N],[5,"nanosleep","","",N,N],[5,"tcgetpgrp","","",N,N],[5,"tcsetpgrp","","",N,N],[5,"ttyname","","",N,N],[5,"unlink","","",N,N],[5,"wait","","",N,N],[5,"waitpid","","",N,N],[5,"write","","",N,N],[5,"pread","","",N,N],[5,"pwrite","","",N,N],[5,"umask","","",N,N],[5,"utime","","",N,N],[5,"kill","","",N,N],[5,"killpg","","",N,N],[5,"mlock","","",N,N],[5,"munlock","","",N,N],[5,"mlockall","","",N,N],[5,"munlockall","","",N,N],[5,"mmap","","",N,N],[5,"munmap","","",N,N],[5,"if_nametoindex","","",N,N],[5,"if_indextoname","","",N,N],[5,"lstat","","",N,N],[5,"fsync","","",N,N],[5,"setenv","","",N,N],[5,"unsetenv","","",N,N],[5,"symlink","","",N,N],[5,"ftruncate","","",N,N],[5,"signal","","",N,N],[5,"getrlimit","","",N,N],[5,"setrlimit","","",N,N],[5,"getrusage","","",N,N],[5,"realpath","","",N,N],[5,"flock","","",N,N],[5,"gettimeofday","","",N,N],[5,"times","","",N,N],[5,"pthread_self","","",N,N],[5,"pthread_join","","",N,N],[5,"pthread_exit","","",N,N],[5,"pthread_attr_init","","",N,N],[5,"pthread_attr_destroy","","",N,N],[5,"pthread_attr_setstacksize","","",N,N],[5,"pthread_attr_setdetachstate","","",N,N],[5,"pthread_detach","","",N,N],[5,"sched_yield","","",N,N],[5,"pthread_key_create","","",N,N],[5,"pthread_key_delete","","",N,N],[5,"pthread_getspecific","","",N,N],[5,"pthread_setspecific","","",N,N],[5,"pthread_mutex_init","","",N,N],[5,"pthread_mutex_destroy","","",N,N],[5,"pthread_mutex_lock","","",N,N],[5,"pthread_mutex_trylock","","",N,N],[5,"pthread_mutex_unlock","","",N,N],[5,"pthread_mutexattr_init","","",N,N],[5,"pthread_mutexattr_destroy","","",N,N],[5,"pthread_mutexattr_settype","","",N,N],[5,"pthread_cond_init","","",N,N],[5,"pthread_cond_wait","","",N,N],[5,"pthread_cond_timedwait","","",N,N],[5,"pthread_cond_signal","","",N,N],[5,"pthread_cond_broadcast","","",N,N],[5,"pthread_cond_destroy","","",N,N],[5,"pthread_condattr_init","","",N,N],[5,"pthread_condattr_destroy","","",N,N],[5,"pthread_rwlock_init","","",N,N],[5,"pthread_rwlock_destroy","","",N,N],[5,"pthread_rwlock_rdlock","","",N,N],[5,"pthread_rwlock_tryrdlock","","",N,N],[5,"pthread_rwlock_wrlock","","",N,N],[5,"pthread_rwlock_trywrlock","","",N,N],[5,"pthread_rwlock_unlock","","",N,N],[5,"pthread_rwlockattr_init","","",N,N],[5,"pthread_rwlockattr_destroy","","",N,N],[5,"strerror_r","","",N,N],[5,"getsockopt","","",N,N],[5,"raise","","",N,N],[5,"sigaction","","",N,N],[5,"utimes","","",N,N],[5,"dlopen","","",N,N],[5,"dlerror","","",N,N],[5,"dlsym","","",N,N],[5,"dlclose","","",N,N],[5,"dladdr","","",N,N],[5,"getaddrinfo","","",N,N],[5,"freeaddrinfo","","",N,N],[5,"gai_strerror","","",N,N],[5,"res_init","","",N,N],[5,"gmtime_r","","",N,N],[5,"localtime_r","","",N,N],[5,"mktime","","",N,N],[5,"time","","",N,N],[5,"gmtime","","",N,N],[5,"localtime","","",N,N],[5,"difftime","","",N,N],[5,"mknod","","",N,N],[5,"uname","","",N,N],[5,"gethostname","","",N,N],[5,"getservbyname","","",N,N],[5,"getprotobyname","","",N,N],[5,"getprotobynumber","","",N,N],[5,"chroot","","",N,N],[5,"usleep","","",N,N],[5,"send","","",N,N],[5,"recv","","",N,N],[5,"putenv","","",N,N],[5,"poll","","",N,N],[5,"select","","",N,N],[5,"setlocale","","",N,N],[5,"localeconv","","",N,N],[5,"sem_destroy","","",N,N],[5,"sem_wait","","",N,N],[5,"sem_trywait","","",N,N],[5,"sem_post","","",N,N],[5,"sem_init","","",N,N],[5,"statvfs","","",N,N],[5,"fstatvfs","","",N,N],[5,"readlink","","",N,N],[5,"sigemptyset","","",N,N],[5,"sigaddset","","",N,N],[5,"sigfillset","","",N,N],[5,"sigdelset","","",N,N],[5,"sigismember","","",N,N],[5,"sigprocmask","","",N,N],[5,"sigpending","","",N,N],[5,"timegm","","",N,N],[5,"getsid","","",N,N],[5,"sysconf","","",N,N],[5,"mkfifo","","",N,N],[5,"pselect","","",N,N],[5,"fseeko","","",N,N],[5,"ftello","","",N,N],[5,"tcdrain","","",N,N],[5,"cfgetispeed","","",N,N],[5,"cfgetospeed","","",N,N],[5,"cfmakeraw","","",N,N],[5,"cfsetispeed","","",N,N],[5,"cfsetospeed","","",N,N],[5,"cfsetspeed","","",N,N],[5,"tcgetattr","","",N,N],[5,"tcsetattr","","",N,N],[5,"tcflow","","",N,N],[5,"tcflush","","",N,N],[5,"tcgetsid","","",N,N],[5,"tcsendbreak","","",N,N],[5,"mkstemp","","",N,N],[5,"mkdtemp","","",N,N],[5,"tmpnam","","",N,N],[5,"openlog","","",N,N],[5,"closelog","","",N,N],[5,"setlogmask","","",N,N],[5,"syslog","","",N,N],[5,"nice","","",N,N],[5,"grantpt","","",N,N],[5,"posix_openpt","","",N,N],[5,"ptsname","","",N,N],[5,"unlockpt","","",N,N],[5,"fdatasync","","",N,N],[5,"mincore","","",N,N],[5,"clock_getres","","",N,N],[5,"clock_gettime","","",N,N],[5,"clock_settime","","",N,N],[5,"dirfd","","",N,N],[5,"pthread_getattr_np","","",N,N],[5,"pthread_attr_getstack","","",N,N],[5,"memalign","","",N,N],[5,"setgroups","","",N,N],[5,"pipe2","","",N,N],[5,"statfs","","",N,N],[5,"statfs64","","",N,N],[5,"fstatfs","","",N,N],[5,"fstatfs64","","",N,N],[5,"statvfs64","","",N,N],[5,"fstatvfs64","","",N,N],[5,"memrchr","","",N,N],[5,"posix_fadvise","","",N,N],[5,"futimens","","",N,N],[5,"utimensat","","",N,N],[5,"duplocale","","",N,N],[5,"freelocale","","",N,N],[5,"newlocale","","",N,N],[5,"uselocale","","",N,N],[5,"creat64","","",N,N],[5,"fstat64","","",N,N],[5,"fstatat64","","",N,N],[5,"ftruncate64","","",N,N],[5,"getrlimit64","","",N,N],[5,"lseek64","","",N,N],[5,"lstat64","","",N,N],[5,"mmap64","","",N,N],[5,"open64","","",N,N],[5,"openat64","","",N,N],[5,"pread64","","",N,N],[5,"preadv64","","",N,N],[5,"pwrite64","","",N,N],[5,"pwritev64","","",N,N],[5,"readdir64","","",N,N],[5,"readdir64_r","","",N,N],[5,"setrlimit64","","",N,N],[5,"stat64","","",N,N],[5,"truncate64","","",N,N],[5,"mknodat","","",N,N],[5,"pthread_condattr_getclock","","",N,N],[5,"pthread_condattr_setclock","","",N,N],[5,"pthread_condattr_setpshared","","",N,N],[5,"accept4","","",N,N],[5,"pthread_mutexattr_setpshared","","",N,N],[5,"pthread_rwlockattr_getpshared","","",N,N],[5,"pthread_rwlockattr_setpshared","","",N,N],[5,"ptsname_r","","",N,N],[5,"clearenv","","",N,N],[5,"waitid","","",N,N],[5,"setreuid","","",N,N],[5,"setregid","","",N,N],[5,"getresuid","","",N,N],[5,"getresgid","","",N,N],[5,"acct","","",N,N],[5,"brk","","",N,N],[5,"sbrk","","",N,N],[5,"vfork","","",N,N],[5,"setresgid","","",N,N],[5,"setresuid","","",N,N],[5,"wait4","","",N,N],[5,"openpty","","",N,N],[5,"execvpe","","",N,N],[5,"fexecve","","",N,N],[5,"getifaddrs","","",N,N],[5,"freeifaddrs","","",N,N],[5,"bind","","",N,N],[5,"writev","","",N,N],[5,"readv","","",N,N],[5,"sendmsg","","",N,N],[5,"recvmsg","","",N,N],[5,"aio_read","","",N,N],[5,"aio_write","","",N,N],[5,"aio_fsync","","",N,N],[5,"aio_error","","",N,N],[5,"aio_return","","",N,N],[5,"aio_suspend","","",N,N],[5,"aio_cancel","","",N,N],[5,"lio_listio","","",N,N],[5,"lutimes","","",N,N],[5,"setpwent","","",N,N],[5,"endpwent","","",N,N],[5,"getpwent","","",N,N],[5,"setgrent","","",N,N],[5,"endgrent","","",N,N],[5,"getgrent","","",N,N],[5,"setspent","","",N,N],[5,"endspent","","",N,N],[5,"getspent","","",N,N],[5,"getspnam","","",N,N],[5,"shm_open","","",N,N],[5,"shmget","","",N,N],[5,"shmat","","",N,N],[5,"shmdt","","",N,N],[5,"shmctl","","",N,N],[5,"ftok","","",N,N],[5,"semget","","",N,N],[5,"semop","","",N,N],[5,"semctl","","",N,N],[5,"msgctl","","",N,N],[5,"msgget","","",N,N],[5,"msgrcv","","",N,N],[5,"msgsnd","","",N,N],[5,"mprotect","","",N,N],[5,"__errno_location","","",N,N],[5,"fopen64","","",N,N],[5,"freopen64","","",N,N],[5,"tmpfile64","","",N,N],[5,"fgetpos64","","",N,N],[5,"fsetpos64","","",N,N],[5,"fseeko64","","",N,N],[5,"ftello64","","",N,N],[5,"fallocate","","",N,N],[5,"posix_fallocate","","",N,N],[5,"readahead","","",N,N],[5,"getxattr","","",N,N],[5,"lgetxattr","","",N,N],[5,"fgetxattr","","",N,N],[5,"setxattr","","",N,N],[5,"lsetxattr","","",N,N],[5,"fsetxattr","","",N,N],[5,"listxattr","","",N,N],[5,"llistxattr","","",N,N],[5,"flistxattr","","",N,N],[5,"removexattr","","",N,N],[5,"lremovexattr","","",N,N],[5,"fremovexattr","","",N,N],[5,"signalfd","","",N,N],[5,"timerfd_create","","",N,N],[5,"timerfd_gettime","","",N,N],[5,"timerfd_settime","","",N,N],[5,"pwritev","","",N,N],[5,"preadv","","",N,N],[5,"quotactl","","",N,N],[5,"mq_open","","",N,N],[5,"mq_close","","",N,N],[5,"mq_unlink","","",N,N],[5,"mq_receive","","",N,N],[5,"mq_send","","",N,N],[5,"mq_getattr","","",N,N],[5,"mq_setattr","","",N,N],[5,"epoll_pwait","","",N,N],[5,"dup3","","",N,N],[5,"mkostemp","","",N,N],[5,"mkostemps","","",N,N],[5,"sigtimedwait","","",N,N],[5,"sigwaitinfo","","",N,N],[5,"nl_langinfo_l","","",N,N],[5,"getnameinfo","","",N,N],[5,"pthread_setschedprio","","",N,N],[5,"prlimit","","",N,N],[5,"prlimit64","","",N,N],[5,"getloadavg","","",N,N],[5,"process_vm_readv","","",N,N],[5,"process_vm_writev","","",N,N],[5,"reboot","","",N,N],[5,"setfsgid","","",N,N],[5,"setfsuid","","",N,N],[5,"mkfifoat","","",N,N],[5,"if_nameindex","","",N,N],[5,"if_freenameindex","","",N,N],[5,"sync_file_range","","",N,N],[5,"mremap","","",N,N],[5,"glob","","",N,N],[5,"globfree","","",N,N],[5,"posix_madvise","","",N,N],[5,"shm_unlink","","",N,N],[5,"seekdir","","",N,N],[5,"telldir","","",N,N],[5,"madvise","","",N,N],[5,"msync","","",N,N],[5,"remap_file_pages","","",N,N],[5,"recvfrom","","",N,N],[5,"mkstemps","","",N,N],[5,"futimes","","",N,N],[5,"nl_langinfo","","",N,N],[5,"getdomainname","","",N,N],[5,"setdomainname","","",N,N],[5,"vhangup","","",N,N],[5,"sendmmsg","","",N,N],[5,"recvmmsg","","",N,N],[5,"sync","","",N,N],[5,"syscall","","",N,N],[5,"sched_getaffinity","","",N,N],[5,"sched_setaffinity","","",N,N],[5,"epoll_create","","",N,N],[5,"epoll_create1","","",N,N],[5,"epoll_wait","","",N,N],[5,"epoll_ctl","","",N,N],[5,"pthread_getschedparam","","",N,N],[5,"unshare","","",N,N],[5,"umount","","",N,N],[5,"sched_get_priority_max","","",N,N],[5,"tee","","",N,N],[5,"settimeofday","","",N,N],[5,"splice","","",N,N],[5,"eventfd","","",N,N],[5,"sched_rr_get_interval","","",N,N],[5,"sem_timedwait","","",N,N],[5,"sem_getvalue","","",N,N],[5,"sched_setparam","","",N,N],[5,"setns","","",N,N],[5,"swapoff","","",N,N],[5,"vmsplice","","",N,N],[5,"mount","","",N,N],[5,"personality","","",N,N],[5,"prctl","","",N,N],[5,"sched_getparam","","",N,N],[5,"ppoll","","",N,N],[5,"pthread_mutex_timedlock","","",N,N],[5,"clone","","",N,N],[5,"sched_getscheduler","","",N,N],[5,"clock_nanosleep","","",N,N],[5,"pthread_attr_getguardsize","","",N,N],[5,"sethostname","","",N,N],[5,"sched_get_priority_min","","",N,N],[5,"pthread_condattr_getpshared","","",N,N],[5,"sysinfo","","",N,N],[5,"umount2","","",N,N],[5,"pthread_setschedparam","","",N,N],[5,"swapon","","",N,N],[5,"sched_setscheduler","","",N,N],[5,"sendfile","","",N,N],[5,"sigsuspend","","",N,N],[5,"getgrgid_r","","",N,N],[5,"sigaltstack","","",N,N],[5,"sem_close","","",N,N],[5,"getdtablesize","","",N,N],[5,"getgrnam_r","","",N,N],[5,"initgroups","","",N,N],[5,"pthread_sigmask","","",N,N],[5,"sem_open","","",N,N],[5,"getgrnam","","",N,N],[5,"pthread_cancel","","",N,N],[5,"pthread_kill","","",N,N],[5,"sem_unlink","","",N,N],[5,"daemon","","",N,N],[5,"getpwnam_r","","",N,N],[5,"getpwuid_r","","",N,N],[5,"sigwait","","",N,N],[5,"pthread_atfork","","",N,N],[5,"getgrgid","","",N,N],[5,"getgrouplist","","",N,N],[5,"pthread_mutexattr_getpshared","","",N,N],[5,"popen","","",N,N],[5,"faccessat","","",N,N],[5,"pthread_create","","",N,N],[5,"dl_iterate_phdr","","",N,N],[5,"setmntent","","",N,N],[5,"getmntent","","",N,N],[5,"addmntent","","",N,N],[5,"endmntent","","",N,N],[5,"hasmntopt","","",N,N],[5,"posix_spawn","","",N,N],[5,"posix_spawnp","","",N,N],[5,"posix_spawnattr_init","","",N,N],[5,"posix_spawnattr_destroy","","",N,N],[5,"posix_spawnattr_getsigdefault","","",N,N],[5,"posix_spawnattr_setsigdefault","","",N,N],[5,"posix_spawnattr_getsigmask","","",N,N],[5,"posix_spawnattr_setsigmask","","",N,N],[5,"posix_spawnattr_getflags","","",N,N],[5,"posix_spawnattr_setflags","","",N,N],[5,"posix_spawnattr_getpgroup","","",N,N],[5,"posix_spawnattr_setpgroup","","",N,N],[5,"posix_spawnattr_getschedpolicy","","",N,N],[5,"posix_spawnattr_setschedpolicy","","",N,N],[5,"posix_spawnattr_getschedparam","","",N,N],[5,"posix_spawnattr_setschedparam","","",N,N],[5,"posix_spawn_file_actions_init","","",N,N],[5,"posix_spawn_file_actions_destroy","","",N,N],[5,"posix_spawn_file_actions_addopen","","",N,N],[5,"posix_spawn_file_actions_addclose","","",N,N],[5,"posix_spawn_file_actions_adddup2","","",N,N],[5,"fread_unlocked","","",N,N],[5,"utmpxname","","",N,N],[5,"getutxent","","",N,N],[5,"getutxid","","",N,N],[5,"getutxline","","",N,N],[5,"pututxline","","",N,N],[5,"setutxent","","",N,N],[5,"endutxent","","",N,N],[5,"getpt","","",N,N],[5,"ioctl","","",N,N],[5,"backtrace","","",N,N],[5,"glob64","","",N,N],[5,"globfree64","","",N,N],[5,"ptrace","","",N,N],[5,"pthread_attr_getaffinity_np","","",N,N],[5,"pthread_attr_setaffinity_np","","",N,N],[5,"getpriority","","",N,N],[5,"setpriority","","",N,N],[5,"pthread_getaffinity_np","","",N,N],[5,"pthread_setaffinity_np","","",N,N],[5,"pthread_rwlockattr_getkind_np","","",N,N],[5,"pthread_rwlockattr_setkind_np","","",N,N],[5,"sched_getcpu","","",N,N],[5,"mallinfo","","",N,N],[5,"malloc_usable_size","","",N,N],[5,"getauxval","","",N,N],[5,"getpwent_r","","",N,N],[5,"getgrent_r","","",N,N],[5,"getcontext","","",N,N],[5,"setcontext","","",N,N],[5,"makecontext","","",N,N],[5,"swapcontext","","",N,N],[5,"iopl","","",N,N],[5,"ioperm","","",N,N],[5,"sysctl","","",N,N],[11,"clone","","",100,[[["self"]],["stat"]]],[11,"clone","","",101,[[["self"]],["stat64"]]],[11,"clone","","",102,[[["self"]],["statfs64"]]],[11,"clone","","",103,[[["self"]],["statvfs64"]]],[11,"clone","","",116,[[["self"]],["pthread_attr_t"]]],[11,"clone","","",104,[[["self"]],["_libc_fpxreg"]]],[11,"clone","","",105,[[["self"]],["_libc_xmmreg"]]],[11,"clone","","",106,[[["self"]],["_libc_fpstate"]]],[11,"clone","","",107,[[["self"]],["user_fpregs_struct"]]],[11,"clone","","",108,[[["self"]],["user_regs_struct"]]],[11,"clone","","",109,[[["self"]],["user"]]],[11,"clone","","",110,[[["self"]],["mcontext_t"]]],[11,"clone","","",111,[[["self"]],["ucontext_t"]]],[11,"clone","","",112,[[["self"]],["ipc_perm"]]],[11,"clone","","",113,[[["self"]],["shmid_ds"]]],[11,"clone","","",114,[[["self"]],["termios2"]]],[11,"clone","","",115,[[["self"]],["statvfs"]]],[11,"clone","","",117,[[["self"]],["sigset_t"]]],[11,"clone","","",98,[[["self"]],["sysinfo"]]],[11,"clone","","",99,[[["self"]],["msqid_ds"]]],[11,"clone","","",77,[[["self"]],["aiocb"]]],[11,"clone","","",78,[[["self"]],["__exit_status"]]],[11,"clone","","",79,[[["self"]],["__timeval"]]],[11,"clone","","",80,[[["self"]],["utmpx"]]],[11,"clone","","",81,[[["self"]],["sigaction"]]],[11,"clone","","",82,[[["self"]],["stack_t"]]],[11,"clone","","",83,[[["self"]],["siginfo_t"]]],[11,"clone","","",84,[[["self"]],["glob64_t"]]],[11,"clone","","",85,[[["self"]],["statfs"]]],[11,"clone","","",86,[[["self"]],["msghdr"]]],[11,"clone","","",87,[[["self"]],["cmsghdr"]]],[11,"clone","","",88,[[["self"]],["termios"]]],[11,"clone","","",89,[[["self"]],["flock"]]],[11,"clone","","",118,[[["self"]],["sem_t"]]],[11,"clone","","",90,[[["self"]],["mallinfo"]]],[11,"clone","","",91,[[["self"]],["nlmsghdr"]]],[11,"clone","","",92,[[["self"]],["nlmsgerr"]]],[11,"clone","","",93,[[["self"]],["nl_pktinfo"]]],[11,"clone","","",94,[[["self"]],["nl_mmap_req"]]],[11,"clone","","",95,[[["self"]],["nl_mmap_hdr"]]],[11,"clone","","",96,[[["self"]],["nlattr"]]],[11,"clone","","",97,[[["self"]],["rtentry"]]],[11,"clone","","",40,[[["self"]],["dirent"]]],[11,"clone","","",41,[[["self"]],["dirent64"]]],[11,"clone","","",42,[[["self"]],["rlimit64"]]],[11,"clone","","",43,[[["self"]],["glob_t"]]],[11,"clone","","",119,[[["self"]],["pthread_mutex_t"]]],[11,"clone","","",120,[[["self"]],["pthread_rwlock_t"]]],[11,"clone","","",121,[[["self"]],["pthread_mutexattr_t"]]],[11,"clone","","",122,[[["self"]],["pthread_rwlockattr_t"]]],[11,"clone","","",123,[[["self"]],["pthread_cond_t"]]],[11,"clone","","",124,[[["self"]],["pthread_condattr_t"]]],[11,"clone","","",44,[[["self"]],["passwd"]]],[11,"clone","","",45,[[["self"]],["spwd"]]],[11,"clone","","",46,[[["self"]],["dqblk"]]],[11,"clone","","",47,[[["self"]],["signalfd_siginfo"]]],[11,"clone","","",48,[[["self"]],["itimerspec"]]],[11,"clone","","",125,[[["self"]],["fsid_t"]]],[11,"clone","","",49,[[["self"]],["mq_attr"]]],[11,"clone","","",50,[[["self"]],["packet_mreq"]]],[11,"clone","","",126,[[["self"]],["cpu_set_t"]]],[11,"clone","","",51,[[["self"]],["if_nameindex"]]],[11,"clone","","",52,[[["self"]],["msginfo"]]],[11,"clone","","",53,[[["self"]],["mmsghdr"]]],[11,"clone","","",54,[[["self"]],["sembuf"]]],[11,"clone","","",55,[[["self"]],["input_event"]]],[11,"clone","","",56,[[["self"]],["input_id"]]],[11,"clone","","",57,[[["self"]],["input_absinfo"]]],[11,"clone","","",58,[[["self"]],["input_keymap_entry"]]],[11,"clone","","",59,[[["self"]],["input_mask"]]],[11,"clone","","",60,[[["self"]],["ff_replay"]]],[11,"clone","","",61,[[["self"]],["ff_trigger"]]],[11,"clone","","",62,[[["self"]],["ff_envelope"]]],[11,"clone","","",63,[[["self"]],["ff_constant_effect"]]],[11,"clone","","",64,[[["self"]],["ff_ramp_effect"]]],[11,"clone","","",65,[[["self"]],["ff_condition_effect"]]],[11,"clone","","",66,[[["self"]],["ff_periodic_effect"]]],[11,"clone","","",67,[[["self"]],["ff_rumble_effect"]]],[11,"clone","","",68,[[["self"]],["ff_effect"]]],[11,"clone","","",69,[[["self"]],["dl_phdr_info"]]],[11,"clone","","",70,[[["self"]],["elf32_phdr"]]],[11,"clone","","",71,[[["self"]],["elf64_phdr"]]],[11,"clone","","",72,[[["self"]],["ucred"]]],[11,"clone","","",73,[[["self"]],["mntent"]]],[11,"clone","","",127,[[["self"]],["posix_spawn_file_actions_t"]]],[11,"clone","","",128,[[["self"]],["posix_spawnattr_t"]]],[11,"clone","","",74,[[["self"]],["genlmsghdr"]]],[11,"clone","","",75,[[["self"]],["in6_pktinfo"]]],[11,"clone","","",76,[[["self"]],["arpd_request"]]],[11,"clone","","",20,[[["self"]],["sockaddr"]]],[11,"clone","","",21,[[["self"]],["sockaddr_in"]]],[11,"clone","","",22,[[["self"]],["sockaddr_in6"]]],[11,"clone","","",23,[[["self"]],["sockaddr_un"]]],[11,"clone","","",24,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",25,[[["self"]],["addrinfo"]]],[11,"clone","","",26,[[["self"]],["sockaddr_nl"]]],[11,"clone","","",27,[[["self"]],["sockaddr_ll"]]],[11,"clone","","",129,[[["self"]],["fd_set"]]],[11,"clone","","",28,[[["self"]],["tm"]]],[11,"clone","","",29,[[["self"]],["sched_param"]]],[11,"clone","","",30,[[["self"]],["dl_info"]]],[11,"clone","","",31,[[["self"]],["epoll_event"]]],[11,"clone","","",32,[[["self"]],["utsname"]]],[11,"clone","","",33,[[["self"]],["lconv"]]],[11,"clone","","",34,[[["self"]],["sigevent"]]],[11,"clone","","",35,[[["self"]],["in_pktinfo"]]],[11,"clone","","",36,[[["self"]],["ifaddrs"]]],[11,"clone","","",130,[[["self"]],["in6_rtmsg"]]],[11,"clone","","",37,[[["self"]],["arpreq"]]],[11,"clone","","",38,[[["self"]],["arpreq_old"]]],[11,"clone","","",39,[[["self"]],["arphdr"]]],[11,"clone","","",0,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["utimbuf"]]],[11,"clone","","",2,[[["self"]],["timeval"]]],[11,"clone","","",3,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["rlimit"]]],[11,"clone","","",5,[[["self"]],["rusage"]]],[11,"clone","","",6,[[["self"]],["in_addr"]]],[11,"clone","","",7,[[["self"]],["in6_addr"]]],[11,"clone","","",8,[[["self"]],["ip_mreq"]]],[11,"clone","","",9,[[["self"]],["ipv6_mreq"]]],[11,"clone","","",10,[[["self"]],["hostent"]]],[11,"clone","","",11,[[["self"]],["iovec"]]],[11,"clone","","",12,[[["self"]],["pollfd"]]],[11,"clone","","",13,[[["self"]],["winsize"]]],[11,"clone","","",14,[[["self"]],["linger"]]],[11,"clone","","",15,[[["self"]],["sigval"]]],[11,"clone","","",16,[[["self"]],["itimerval"]]],[11,"clone","","",17,[[["self"]],["tms"]]],[11,"clone","","",18,[[["self"]],["servent"]]],[11,"clone","","",19,[[["self"]],["protoent"]]],[6,"int8_t","","",N,N],[6,"int16_t","","",N,N],[6,"int32_t","","",N,N],[6,"int64_t","","",N,N],[6,"uint8_t","","",N,N],[6,"uint16_t","","",N,N],[6,"uint32_t","","",N,N],[6,"uint64_t","","",N,N],[6,"c_schar","","",N,N],[6,"c_uchar","","",N,N],[6,"c_short","","",N,N],[6,"c_ushort","","",N,N],[6,"c_int","","",N,N],[6,"c_uint","","",N,N],[6,"c_float","","",N,N],[6,"c_double","","",N,N],[6,"c_longlong","","",N,N],[6,"c_ulonglong","","",N,N],[6,"intmax_t","","",N,N],[6,"uintmax_t","","",N,N],[6,"size_t","","",N,N],[6,"ptrdiff_t","","",N,N],[6,"intptr_t","","",N,N],[6,"uintptr_t","","",N,N],[6,"ssize_t","","",N,N],[6,"pid_t","","",N,N],[6,"uid_t","","",N,N],[6,"gid_t","","",N,N],[6,"in_addr_t","","",N,N],[6,"in_port_t","","",N,N],[6,"sighandler_t","","",N,N],[6,"cc_t","","",N,N],[6,"sa_family_t","","",N,N],[6,"pthread_key_t","","",N,N],[6,"speed_t","","",N,N],[6,"tcflag_t","","",N,N],[6,"clockid_t","","",N,N],[6,"key_t","","",N,N],[6,"id_t","","",N,N],[6,"useconds_t","","",N,N],[6,"dev_t","","",N,N],[6,"socklen_t","","",N,N],[6,"pthread_t","","",N,N],[6,"mode_t","","",N,N],[6,"ino64_t","","",N,N],[6,"off64_t","","",N,N],[6,"blkcnt64_t","","",N,N],[6,"rlim64_t","","",N,N],[6,"mqd_t","","",N,N],[6,"nfds_t","","",N,N],[6,"nl_item","","",N,N],[6,"idtype_t","","",N,N],[6,"loff_t","","",N,N],[6,"__u8","","",N,N],[6,"__u16","","",N,N],[6,"__s16","","",N,N],[6,"__u32","","",N,N],[6,"__s32","","",N,N],[6,"Elf32_Half","","",N,N],[6,"Elf32_Word","","",N,N],[6,"Elf32_Off","","",N,N],[6,"Elf32_Addr","","",N,N],[6,"Elf64_Half","","",N,N],[6,"Elf64_Word","","",N,N],[6,"Elf64_Off","","",N,N],[6,"Elf64_Addr","","",N,N],[6,"Elf64_Xword","","",N,N],[6,"__priority_which_t","","",N,N],[6,"clock_t","","",N,N],[6,"time_t","","",N,N],[6,"ino_t","","",N,N],[6,"off_t","","",N,N],[6,"blkcnt_t","","",N,N],[6,"__fsword_t","","",N,N],[6,"shmatt_t","","",N,N],[6,"msgqnum_t","","",N,N],[6,"msglen_t","","",N,N],[6,"fsblkcnt_t","","",N,N],[6,"fsfilcnt_t","","",N,N],[6,"rlim_t","","",N,N],[6,"c_char","","",N,N],[6,"wchar_t","","",N,N],[6,"nlink_t","","",N,N],[6,"blksize_t","","",N,N],[6,"greg_t","","",N,N],[6,"suseconds_t","","",N,N],[6,"__u64","","",N,N],[6,"c_long","","",N,N],[6,"c_ulong","","",N,N],[17,"INT_MIN","","",N,N],[17,"INT_MAX","","",N,N],[17,"SIG_DFL","","",N,N],[17,"SIG_IGN","","",N,N],[17,"SIG_ERR","","",N,N],[17,"DT_UNKNOWN","","",N,N],[17,"DT_FIFO","","",N,N],[17,"DT_CHR","","",N,N],[17,"DT_DIR","","",N,N],[17,"DT_BLK","","",N,N],[17,"DT_REG","","",N,N],[17,"DT_LNK","","",N,N],[17,"DT_SOCK","","",N,N],[17,"FD_CLOEXEC","","",N,N],[17,"USRQUOTA","","",N,N],[17,"GRPQUOTA","","",N,N],[17,"SIGIOT","","",N,N],[17,"S_ISUID","","",N,N],[17,"S_ISGID","","",N,N],[17,"S_ISVTX","","",N,N],[17,"IF_NAMESIZE","","",N,N],[17,"IFNAMSIZ","","",N,N],[17,"LOG_EMERG","","",N,N],[17,"LOG_ALERT","","",N,N],[17,"LOG_CRIT","","",N,N],[17,"LOG_ERR","","",N,N],[17,"LOG_WARNING","","",N,N],[17,"LOG_NOTICE","","",N,N],[17,"LOG_INFO","","",N,N],[17,"LOG_DEBUG","","",N,N],[17,"LOG_KERN","","",N,N],[17,"LOG_USER","","",N,N],[17,"LOG_MAIL","","",N,N],[17,"LOG_DAEMON","","",N,N],[17,"LOG_AUTH","","",N,N],[17,"LOG_SYSLOG","","",N,N],[17,"LOG_LPR","","",N,N],[17,"LOG_NEWS","","",N,N],[17,"LOG_UUCP","","",N,N],[17,"LOG_LOCAL0","","",N,N],[17,"LOG_LOCAL1","","",N,N],[17,"LOG_LOCAL2","","",N,N],[17,"LOG_LOCAL3","","",N,N],[17,"LOG_LOCAL4","","",N,N],[17,"LOG_LOCAL5","","",N,N],[17,"LOG_LOCAL6","","",N,N],[17,"LOG_LOCAL7","","",N,N],[17,"LOG_PID","","",N,N],[17,"LOG_CONS","","",N,N],[17,"LOG_ODELAY","","",N,N],[17,"LOG_NDELAY","","",N,N],[17,"LOG_NOWAIT","","",N,N],[17,"LOG_PRIMASK","","",N,N],[17,"LOG_FACMASK","","",N,N],[17,"PRIO_PROCESS","","",N,N],[17,"PRIO_PGRP","","",N,N],[17,"PRIO_USER","","",N,N],[17,"PRIO_MIN","","",N,N],[17,"PRIO_MAX","","",N,N],[17,"IPPROTO_ICMP","","",N,N],[17,"IPPROTO_ICMPV6","","",N,N],[17,"IPPROTO_TCP","","",N,N],[17,"IPPROTO_UDP","","",N,N],[17,"IPPROTO_IP","","",N,N],[17,"IPPROTO_IPV6","","",N,N],[17,"INADDR_LOOPBACK","","",N,N],[17,"INADDR_ANY","","",N,N],[17,"INADDR_BROADCAST","","",N,N],[17,"INADDR_NONE","","",N,N],[17,"ARPOP_REQUEST","","",N,N],[17,"ARPOP_REPLY","","",N,N],[17,"ATF_COM","","",N,N],[17,"ATF_PERM","","",N,N],[17,"ATF_PUBL","","",N,N],[17,"ATF_USETRAILERS","","",N,N],[17,"EXIT_FAILURE","","",N,N],[17,"EXIT_SUCCESS","","",N,N],[17,"RAND_MAX","","",N,N],[17,"EOF","","",N,N],[17,"SEEK_SET","","",N,N],[17,"SEEK_CUR","","",N,N],[17,"SEEK_END","","",N,N],[17,"_IOFBF","","",N,N],[17,"_IONBF","","",N,N],[17,"_IOLBF","","",N,N],[17,"F_DUPFD","","",N,N],[17,"F_GETFD","","",N,N],[17,"F_SETFD","","",N,N],[17,"F_GETFL","","",N,N],[17,"F_SETFL","","",N,N],[17,"F_SETLEASE","","",N,N],[17,"F_GETLEASE","","",N,N],[17,"F_NOTIFY","","",N,N],[17,"F_CANCELLK","","",N,N],[17,"F_DUPFD_CLOEXEC","","",N,N],[17,"F_SETPIPE_SZ","","",N,N],[17,"F_GETPIPE_SZ","","",N,N],[17,"F_ADD_SEALS","","",N,N],[17,"F_GET_SEALS","","",N,N],[17,"F_SEAL_SEAL","","",N,N],[17,"F_SEAL_SHRINK","","",N,N],[17,"F_SEAL_GROW","","",N,N],[17,"F_SEAL_WRITE","","",N,N],[17,"SIGTRAP","","",N,N],[17,"PTHREAD_CREATE_JOINABLE","","",N,N],[17,"PTHREAD_CREATE_DETACHED","","",N,N],[17,"CLOCK_REALTIME","","",N,N],[17,"CLOCK_MONOTONIC","","",N,N],[17,"CLOCK_PROCESS_CPUTIME_ID","","",N,N],[17,"CLOCK_THREAD_CPUTIME_ID","","",N,N],[17,"CLOCK_MONOTONIC_RAW","","",N,N],[17,"CLOCK_REALTIME_COARSE","","",N,N],[17,"CLOCK_MONOTONIC_COARSE","","",N,N],[17,"CLOCK_BOOTTIME","","",N,N],[17,"CLOCK_REALTIME_ALARM","","",N,N],[17,"CLOCK_BOOTTIME_ALARM","","",N,N],[17,"TIMER_ABSTIME","","",N,N],[17,"RLIMIT_CPU","","",N,N],[17,"RLIMIT_FSIZE","","",N,N],[17,"RLIMIT_DATA","","",N,N],[17,"RLIMIT_STACK","","",N,N],[17,"RLIMIT_CORE","","",N,N],[17,"RLIMIT_LOCKS","","",N,N],[17,"RLIMIT_SIGPENDING","","",N,N],[17,"RLIMIT_MSGQUEUE","","",N,N],[17,"RLIMIT_NICE","","",N,N],[17,"RLIMIT_RTPRIO","","",N,N],[17,"RUSAGE_SELF","","",N,N],[17,"O_RDONLY","","",N,N],[17,"O_WRONLY","","",N,N],[17,"O_RDWR","","",N,N],[17,"SOCK_CLOEXEC","","",N,N],[17,"S_IFIFO","","",N,N],[17,"S_IFCHR","","",N,N],[17,"S_IFBLK","","",N,N],[17,"S_IFDIR","","",N,N],[17,"S_IFREG","","",N,N],[17,"S_IFLNK","","",N,N],[17,"S_IFSOCK","","",N,N],[17,"S_IFMT","","",N,N],[17,"S_IRWXU","","",N,N],[17,"S_IXUSR","","",N,N],[17,"S_IWUSR","","",N,N],[17,"S_IRUSR","","",N,N],[17,"S_IRWXG","","",N,N],[17,"S_IXGRP","","",N,N],[17,"S_IWGRP","","",N,N],[17,"S_IRGRP","","",N,N],[17,"S_IRWXO","","",N,N],[17,"S_IXOTH","","",N,N],[17,"S_IWOTH","","",N,N],[17,"S_IROTH","","",N,N],[17,"F_OK","","",N,N],[17,"R_OK","","",N,N],[17,"W_OK","","",N,N],[17,"X_OK","","",N,N],[17,"STDIN_FILENO","","",N,N],[17,"STDOUT_FILENO","","",N,N],[17,"STDERR_FILENO","","",N,N],[17,"SIGHUP","","",N,N],[17,"SIGINT","","",N,N],[17,"SIGQUIT","","",N,N],[17,"SIGILL","","",N,N],[17,"SIGABRT","","",N,N],[17,"SIGFPE","","",N,N],[17,"SIGKILL","","",N,N],[17,"SIGSEGV","","",N,N],[17,"SIGPIPE","","",N,N],[17,"SIGALRM","","",N,N],[17,"SIGTERM","","",N,N],[17,"PROT_NONE","","",N,N],[17,"PROT_READ","","",N,N],[17,"PROT_WRITE","","",N,N],[17,"PROT_EXEC","","",N,N],[17,"LC_CTYPE","","",N,N],[17,"LC_NUMERIC","","",N,N],[17,"LC_TIME","","",N,N],[17,"LC_COLLATE","","",N,N],[17,"LC_MONETARY","","",N,N],[17,"LC_MESSAGES","","",N,N],[17,"LC_ALL","","",N,N],[17,"LC_CTYPE_MASK","","",N,N],[17,"LC_NUMERIC_MASK","","",N,N],[17,"LC_TIME_MASK","","",N,N],[17,"LC_COLLATE_MASK","","",N,N],[17,"LC_MONETARY_MASK","","",N,N],[17,"LC_MESSAGES_MASK","","",N,N],[17,"MAP_FILE","","",N,N],[17,"MAP_SHARED","","",N,N],[17,"MAP_PRIVATE","","",N,N],[17,"MAP_FIXED","","",N,N],[17,"MAP_FAILED","","",N,N],[17,"MS_ASYNC","","",N,N],[17,"MS_INVALIDATE","","",N,N],[17,"MS_SYNC","","",N,N],[17,"MS_RDONLY","","",N,N],[17,"MS_NOSUID","","",N,N],[17,"MS_NODEV","","",N,N],[17,"MS_NOEXEC","","",N,N],[17,"MS_SYNCHRONOUS","","",N,N],[17,"MS_REMOUNT","","",N,N],[17,"MS_MANDLOCK","","",N,N],[17,"MS_DIRSYNC","","",N,N],[17,"MS_NOATIME","","",N,N],[17,"MS_NODIRATIME","","",N,N],[17,"MS_BIND","","",N,N],[17,"MS_MOVE","","",N,N],[17,"MS_REC","","",N,N],[17,"MS_SILENT","","",N,N],[17,"MS_POSIXACL","","",N,N],[17,"MS_UNBINDABLE","","",N,N],[17,"MS_PRIVATE","","",N,N],[17,"MS_SLAVE","","",N,N],[17,"MS_SHARED","","",N,N],[17,"MS_RELATIME","","",N,N],[17,"MS_KERNMOUNT","","",N,N],[17,"MS_I_VERSION","","",N,N],[17,"MS_STRICTATIME","","",N,N],[17,"MS_ACTIVE","","",N,N],[17,"MS_NOUSER","","",N,N],[17,"MS_MGC_VAL","","",N,N],[17,"MS_MGC_MSK","","",N,N],[17,"MS_RMT_MASK","","",N,N],[17,"EPERM","","",N,N],[17,"ENOENT","","",N,N],[17,"ESRCH","","",N,N],[17,"EINTR","","",N,N],[17,"EIO","","",N,N],[17,"ENXIO","","",N,N],[17,"E2BIG","","",N,N],[17,"ENOEXEC","","",N,N],[17,"EBADF","","",N,N],[17,"ECHILD","","",N,N],[17,"EAGAIN","","",N,N],[17,"ENOMEM","","",N,N],[17,"EACCES","","",N,N],[17,"EFAULT","","",N,N],[17,"ENOTBLK","","",N,N],[17,"EBUSY","","",N,N],[17,"EEXIST","","",N,N],[17,"EXDEV","","",N,N],[17,"ENODEV","","",N,N],[17,"ENOTDIR","","",N,N],[17,"EISDIR","","",N,N],[17,"EINVAL","","",N,N],[17,"ENFILE","","",N,N],[17,"EMFILE","","",N,N],[17,"ENOTTY","","",N,N],[17,"ETXTBSY","","",N,N],[17,"EFBIG","","",N,N],[17,"ENOSPC","","",N,N],[17,"ESPIPE","","",N,N],[17,"EROFS","","",N,N],[17,"EMLINK","","",N,N],[17,"EPIPE","","",N,N],[17,"EDOM","","",N,N],[17,"ERANGE","","",N,N],[17,"EWOULDBLOCK","","",N,N],[17,"SCM_RIGHTS","","",N,N],[17,"SCM_CREDENTIALS","","",N,N],[17,"PROT_GROWSDOWN","","",N,N],[17,"PROT_GROWSUP","","",N,N],[17,"MAP_TYPE","","",N,N],[17,"MADV_NORMAL","","",N,N],[17,"MADV_RANDOM","","",N,N],[17,"MADV_SEQUENTIAL","","",N,N],[17,"MADV_WILLNEED","","",N,N],[17,"MADV_DONTNEED","","",N,N],[17,"MADV_FREE","","",N,N],[17,"MADV_REMOVE","","",N,N],[17,"MADV_DONTFORK","","",N,N],[17,"MADV_DOFORK","","",N,N],[17,"MADV_MERGEABLE","","",N,N],[17,"MADV_UNMERGEABLE","","",N,N],[17,"MADV_HUGEPAGE","","",N,N],[17,"MADV_NOHUGEPAGE","","",N,N],[17,"MADV_DONTDUMP","","",N,N],[17,"MADV_DODUMP","","",N,N],[17,"MADV_HWPOISON","","",N,N],[17,"MADV_SOFT_OFFLINE","","",N,N],[17,"IFF_UP","","",N,N],[17,"IFF_BROADCAST","","",N,N],[17,"IFF_DEBUG","","",N,N],[17,"IFF_LOOPBACK","","",N,N],[17,"IFF_POINTOPOINT","","",N,N],[17,"IFF_NOTRAILERS","","",N,N],[17,"IFF_RUNNING","","",N,N],[17,"IFF_NOARP","","",N,N],[17,"IFF_PROMISC","","",N,N],[17,"IFF_ALLMULTI","","",N,N],[17,"IFF_MASTER","","",N,N],[17,"IFF_SLAVE","","",N,N],[17,"IFF_MULTICAST","","",N,N],[17,"IFF_PORTSEL","","",N,N],[17,"IFF_AUTOMEDIA","","",N,N],[17,"IFF_DYNAMIC","","",N,N],[17,"SOL_IP","","",N,N],[17,"SOL_TCP","","",N,N],[17,"SOL_UDP","","",N,N],[17,"SOL_IPV6","","",N,N],[17,"SOL_ICMPV6","","",N,N],[17,"SOL_RAW","","",N,N],[17,"SOL_DECNET","","",N,N],[17,"SOL_X25","","",N,N],[17,"SOL_PACKET","","",N,N],[17,"SOL_ATM","","",N,N],[17,"SOL_AAL","","",N,N],[17,"SOL_IRDA","","",N,N],[17,"SOL_NETBEUI","","",N,N],[17,"SOL_LLC","","",N,N],[17,"SOL_DCCP","","",N,N],[17,"SOL_NETLINK","","",N,N],[17,"SOL_TIPC","","",N,N],[17,"AF_UNSPEC","","",N,N],[17,"AF_UNIX","","",N,N],[17,"AF_LOCAL","","",N,N],[17,"AF_INET","","",N,N],[17,"AF_AX25","","",N,N],[17,"AF_IPX","","",N,N],[17,"AF_APPLETALK","","",N,N],[17,"AF_NETROM","","",N,N],[17,"AF_BRIDGE","","",N,N],[17,"AF_ATMPVC","","",N,N],[17,"AF_X25","","",N,N],[17,"AF_INET6","","",N,N],[17,"AF_ROSE","","",N,N],[17,"AF_DECnet","","",N,N],[17,"AF_NETBEUI","","",N,N],[17,"AF_SECURITY","","",N,N],[17,"AF_KEY","","",N,N],[17,"AF_NETLINK","","",N,N],[17,"AF_ROUTE","","",N,N],[17,"AF_PACKET","","",N,N],[17,"AF_ASH","","",N,N],[17,"AF_ECONET","","",N,N],[17,"AF_ATMSVC","","",N,N],[17,"AF_RDS","","",N,N],[17,"AF_SNA","","",N,N],[17,"AF_IRDA","","",N,N],[17,"AF_PPPOX","","",N,N],[17,"AF_WANPIPE","","",N,N],[17,"AF_LLC","","",N,N],[17,"AF_CAN","","",N,N],[17,"AF_TIPC","","",N,N],[17,"AF_BLUETOOTH","","",N,N],[17,"AF_IUCV","","",N,N],[17,"AF_RXRPC","","",N,N],[17,"AF_ISDN","","",N,N],[17,"AF_PHONET","","",N,N],[17,"AF_IEEE802154","","",N,N],[17,"AF_CAIF","","",N,N],[17,"AF_ALG","","",N,N],[17,"PF_UNSPEC","","",N,N],[17,"PF_UNIX","","",N,N],[17,"PF_LOCAL","","",N,N],[17,"PF_INET","","",N,N],[17,"PF_AX25","","",N,N],[17,"PF_IPX","","",N,N],[17,"PF_APPLETALK","","",N,N],[17,"PF_NETROM","","",N,N],[17,"PF_BRIDGE","","",N,N],[17,"PF_ATMPVC","","",N,N],[17,"PF_X25","","",N,N],[17,"PF_INET6","","",N,N],[17,"PF_ROSE","","",N,N],[17,"PF_DECnet","","",N,N],[17,"PF_NETBEUI","","",N,N],[17,"PF_SECURITY","","",N,N],[17,"PF_KEY","","",N,N],[17,"PF_NETLINK","","",N,N],[17,"PF_ROUTE","","",N,N],[17,"PF_PACKET","","",N,N],[17,"PF_ASH","","",N,N],[17,"PF_ECONET","","",N,N],[17,"PF_ATMSVC","","",N,N],[17,"PF_RDS","","",N,N],[17,"PF_SNA","","",N,N],[17,"PF_IRDA","","",N,N],[17,"PF_PPPOX","","",N,N],[17,"PF_WANPIPE","","",N,N],[17,"PF_LLC","","",N,N],[17,"PF_CAN","","",N,N],[17,"PF_TIPC","","",N,N],[17,"PF_BLUETOOTH","","",N,N],[17,"PF_IUCV","","",N,N],[17,"PF_RXRPC","","",N,N],[17,"PF_ISDN","","",N,N],[17,"PF_PHONET","","",N,N],[17,"PF_IEEE802154","","",N,N],[17,"PF_CAIF","","",N,N],[17,"PF_ALG","","",N,N],[17,"SOMAXCONN","","",N,N],[17,"MSG_OOB","","",N,N],[17,"MSG_PEEK","","",N,N],[17,"MSG_DONTROUTE","","",N,N],[17,"MSG_CTRUNC","","",N,N],[17,"MSG_TRUNC","","",N,N],[17,"MSG_DONTWAIT","","",N,N],[17,"MSG_EOR","","",N,N],[17,"MSG_WAITALL","","",N,N],[17,"MSG_FIN","","",N,N],[17,"MSG_SYN","","",N,N],[17,"MSG_CONFIRM","","",N,N],[17,"MSG_RST","","",N,N],[17,"MSG_ERRQUEUE","","",N,N],[17,"MSG_NOSIGNAL","","",N,N],[17,"MSG_MORE","","",N,N],[17,"MSG_WAITFORONE","","",N,N],[17,"MSG_FASTOPEN","","",N,N],[17,"MSG_CMSG_CLOEXEC","","",N,N],[17,"SCM_TIMESTAMP","","",N,N],[17,"SOCK_RAW","","",N,N],[17,"SOCK_RDM","","",N,N],[17,"IP_MULTICAST_IF","","",N,N],[17,"IP_MULTICAST_TTL","","",N,N],[17,"IP_MULTICAST_LOOP","","",N,N],[17,"IP_TTL","","",N,N],[17,"IP_HDRINCL","","",N,N],[17,"IP_PKTINFO","","",N,N],[17,"IP_ADD_MEMBERSHIP","","",N,N],[17,"IP_DROP_MEMBERSHIP","","",N,N],[17,"IP_TRANSPARENT","","",N,N],[17,"IPV6_UNICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_IF","","",N,N],[17,"IPV6_MULTICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_LOOP","","",N,N],[17,"IPV6_ADD_MEMBERSHIP","","",N,N],[17,"IPV6_DROP_MEMBERSHIP","","",N,N],[17,"IPV6_V6ONLY","","",N,N],[17,"IPV6_RECVPKTINFO","","",N,N],[17,"IPV6_PKTINFO","","",N,N],[17,"TCP_NODELAY","","",N,N],[17,"TCP_MAXSEG","","",N,N],[17,"TCP_CORK","","",N,N],[17,"TCP_KEEPIDLE","","",N,N],[17,"TCP_KEEPINTVL","","",N,N],[17,"TCP_KEEPCNT","","",N,N],[17,"TCP_SYNCNT","","",N,N],[17,"TCP_LINGER2","","",N,N],[17,"TCP_DEFER_ACCEPT","","",N,N],[17,"TCP_WINDOW_CLAMP","","",N,N],[17,"TCP_INFO","","",N,N],[17,"TCP_QUICKACK","","",N,N],[17,"TCP_CONGESTION","","",N,N],[17,"SO_DEBUG","","",N,N],[17,"SHUT_RD","","",N,N],[17,"SHUT_WR","","",N,N],[17,"SHUT_RDWR","","",N,N],[17,"LOCK_SH","","",N,N],[17,"LOCK_EX","","",N,N],[17,"LOCK_NB","","",N,N],[17,"LOCK_UN","","",N,N],[17,"SS_ONSTACK","","",N,N],[17,"SS_DISABLE","","",N,N],[17,"PATH_MAX","","",N,N],[17,"FD_SETSIZE","","",N,N],[17,"EPOLLIN","","",N,N],[17,"EPOLLPRI","","",N,N],[17,"EPOLLOUT","","",N,N],[17,"EPOLLRDNORM","","",N,N],[17,"EPOLLRDBAND","","",N,N],[17,"EPOLLWRNORM","","",N,N],[17,"EPOLLWRBAND","","",N,N],[17,"EPOLLMSG","","",N,N],[17,"EPOLLERR","","",N,N],[17,"EPOLLHUP","","",N,N],[17,"EPOLLET","","",N,N],[17,"EPOLL_CTL_ADD","","",N,N],[17,"EPOLL_CTL_MOD","","",N,N],[17,"EPOLL_CTL_DEL","","",N,N],[17,"MNT_DETACH","","",N,N],[17,"MNT_EXPIRE","","",N,N],[17,"Q_GETFMT","","",N,N],[17,"Q_GETINFO","","",N,N],[17,"Q_SETINFO","","",N,N],[17,"QIF_BLIMITS","","",N,N],[17,"QIF_SPACE","","",N,N],[17,"QIF_ILIMITS","","",N,N],[17,"QIF_INODES","","",N,N],[17,"QIF_BTIME","","",N,N],[17,"QIF_ITIME","","",N,N],[17,"QIF_LIMITS","","",N,N],[17,"QIF_USAGE","","",N,N],[17,"QIF_TIMES","","",N,N],[17,"QIF_ALL","","",N,N],[17,"MNT_FORCE","","",N,N],[17,"Q_SYNC","","",N,N],[17,"Q_QUOTAON","","",N,N],[17,"Q_QUOTAOFF","","",N,N],[17,"Q_GETQUOTA","","",N,N],[17,"Q_SETQUOTA","","",N,N],[17,"TCIOFF","","",N,N],[17,"TCION","","",N,N],[17,"TCOOFF","","",N,N],[17,"TCOON","","",N,N],[17,"TCIFLUSH","","",N,N],[17,"TCOFLUSH","","",N,N],[17,"TCIOFLUSH","","",N,N],[17,"NL0","","",N,N],[17,"NL1","","",N,N],[17,"TAB0","","",N,N],[17,"CR0","","",N,N],[17,"FF0","","",N,N],[17,"BS0","","",N,N],[17,"VT0","","",N,N],[17,"VERASE","","",N,N],[17,"VKILL","","",N,N],[17,"VINTR","","",N,N],[17,"VQUIT","","",N,N],[17,"VLNEXT","","",N,N],[17,"IGNBRK","","",N,N],[17,"BRKINT","","",N,N],[17,"IGNPAR","","",N,N],[17,"PARMRK","","",N,N],[17,"INPCK","","",N,N],[17,"ISTRIP","","",N,N],[17,"INLCR","","",N,N],[17,"IGNCR","","",N,N],[17,"ICRNL","","",N,N],[17,"IXANY","","",N,N],[17,"IMAXBEL","","",N,N],[17,"OPOST","","",N,N],[17,"CS5","","",N,N],[17,"CRTSCTS","","",N,N],[17,"ECHO","","",N,N],[17,"OCRNL","","",N,N],[17,"ONOCR","","",N,N],[17,"ONLRET","","",N,N],[17,"OFILL","","",N,N],[17,"OFDEL","","",N,N],[17,"CLONE_VM","","",N,N],[17,"CLONE_FS","","",N,N],[17,"CLONE_FILES","","",N,N],[17,"CLONE_SIGHAND","","",N,N],[17,"CLONE_PTRACE","","",N,N],[17,"CLONE_VFORK","","",N,N],[17,"CLONE_PARENT","","",N,N],[17,"CLONE_THREAD","","",N,N],[17,"CLONE_NEWNS","","",N,N],[17,"CLONE_SYSVSEM","","",N,N],[17,"CLONE_SETTLS","","",N,N],[17,"CLONE_PARENT_SETTID","","",N,N],[17,"CLONE_CHILD_CLEARTID","","",N,N],[17,"CLONE_DETACHED","","",N,N],[17,"CLONE_UNTRACED","","",N,N],[17,"CLONE_CHILD_SETTID","","",N,N],[17,"CLONE_NEWUTS","","",N,N],[17,"CLONE_NEWIPC","","",N,N],[17,"CLONE_NEWUSER","","",N,N],[17,"CLONE_NEWPID","","",N,N],[17,"CLONE_NEWNET","","",N,N],[17,"CLONE_IO","","",N,N],[17,"CLONE_NEWCGROUP","","",N,N],[17,"WNOHANG","","",N,N],[17,"WUNTRACED","","",N,N],[17,"WSTOPPED","","",N,N],[17,"WEXITED","","",N,N],[17,"WCONTINUED","","",N,N],[17,"WNOWAIT","","",N,N],[17,"PTRACE_O_TRACESYSGOOD","","",N,N],[17,"PTRACE_O_TRACEFORK","","",N,N],[17,"PTRACE_O_TRACEVFORK","","",N,N],[17,"PTRACE_O_TRACECLONE","","",N,N],[17,"PTRACE_O_TRACEEXEC","","",N,N],[17,"PTRACE_O_TRACEVFORKDONE","","",N,N],[17,"PTRACE_O_TRACEEXIT","","",N,N],[17,"PTRACE_O_TRACESECCOMP","","",N,N],[17,"PTRACE_O_EXITKILL","","",N,N],[17,"PTRACE_O_SUSPEND_SECCOMP","","",N,N],[17,"PTRACE_O_MASK","","",N,N],[17,"PTRACE_EVENT_FORK","","",N,N],[17,"PTRACE_EVENT_VFORK","","",N,N],[17,"PTRACE_EVENT_CLONE","","",N,N],[17,"PTRACE_EVENT_EXEC","","",N,N],[17,"PTRACE_EVENT_VFORK_DONE","","",N,N],[17,"PTRACE_EVENT_EXIT","","",N,N],[17,"PTRACE_EVENT_SECCOMP","","",N,N],[17,"__WNOTHREAD","","",N,N],[17,"__WALL","","",N,N],[17,"__WCLONE","","",N,N],[17,"SPLICE_F_MOVE","","",N,N],[17,"SPLICE_F_NONBLOCK","","",N,N],[17,"SPLICE_F_MORE","","",N,N],[17,"SPLICE_F_GIFT","","",N,N],[17,"RTLD_LOCAL","","",N,N],[17,"RTLD_LAZY","","",N,N],[17,"POSIX_FADV_NORMAL","","",N,N],[17,"POSIX_FADV_RANDOM","","",N,N],[17,"POSIX_FADV_SEQUENTIAL","","",N,N],[17,"POSIX_FADV_WILLNEED","","",N,N],[17,"AT_FDCWD","","",N,N],[17,"AT_SYMLINK_NOFOLLOW","","",N,N],[17,"AT_REMOVEDIR","","",N,N],[17,"AT_SYMLINK_FOLLOW","","",N,N],[17,"AT_NO_AUTOMOUNT","","",N,N],[17,"AT_EMPTY_PATH","","",N,N],[17,"LOG_CRON","","",N,N],[17,"LOG_AUTHPRIV","","",N,N],[17,"LOG_FTP","","",N,N],[17,"LOG_PERROR","","",N,N],[17,"PIPE_BUF","","",N,N],[17,"SI_LOAD_SHIFT","","",N,N],[17,"SIGEV_SIGNAL","","",N,N],[17,"SIGEV_NONE","","",N,N],[17,"SIGEV_THREAD","","",N,N],[17,"P_ALL","","",N,N],[17,"P_PID","","",N,N],[17,"P_PGID","","",N,N],[17,"UTIME_OMIT","","",N,N],[17,"UTIME_NOW","","",N,N],[17,"POLLIN","","",N,N],[17,"POLLPRI","","",N,N],[17,"POLLOUT","","",N,N],[17,"POLLERR","","",N,N],[17,"POLLHUP","","",N,N],[17,"POLLNVAL","","",N,N],[17,"POLLRDNORM","","",N,N],[17,"POLLRDBAND","","",N,N],[17,"IPTOS_LOWDELAY","","",N,N],[17,"IPTOS_THROUGHPUT","","",N,N],[17,"IPTOS_RELIABILITY","","",N,N],[17,"IPTOS_MINCOST","","",N,N],[17,"IPTOS_PREC_NETCONTROL","","",N,N],[17,"IPTOS_PREC_INTERNETCONTROL","","",N,N],[17,"IPTOS_PREC_CRITIC_ECP","","",N,N],[17,"IPTOS_PREC_FLASHOVERRIDE","","",N,N],[17,"IPTOS_PREC_FLASH","","",N,N],[17,"IPTOS_PREC_IMMEDIATE","","",N,N],[17,"IPTOS_PREC_PRIORITY","","",N,N],[17,"IPTOS_PREC_ROUTINE","","",N,N],[17,"IPOPT_COPY","","",N,N],[17,"IPOPT_CLASS_MASK","","",N,N],[17,"IPOPT_NUMBER_MASK","","",N,N],[17,"IPOPT_CONTROL","","",N,N],[17,"IPOPT_RESERVED1","","",N,N],[17,"IPOPT_MEASUREMENT","","",N,N],[17,"IPOPT_RESERVED2","","",N,N],[17,"IPOPT_END","","",N,N],[17,"IPOPT_NOOP","","",N,N],[17,"IPOPT_SEC","","",N,N],[17,"IPOPT_LSRR","","",N,N],[17,"IPOPT_TIMESTAMP","","",N,N],[17,"IPOPT_RR","","",N,N],[17,"IPOPT_SID","","",N,N],[17,"IPOPT_SSRR","","",N,N],[17,"IPOPT_RA","","",N,N],[17,"IPVERSION","","",N,N],[17,"MAXTTL","","",N,N],[17,"IPDEFTTL","","",N,N],[17,"IPOPT_OPTVAL","","",N,N],[17,"IPOPT_OLEN","","",N,N],[17,"IPOPT_OFFSET","","",N,N],[17,"IPOPT_MINOFF","","",N,N],[17,"MAX_IPOPTLEN","","",N,N],[17,"IPOPT_NOP","","",N,N],[17,"IPOPT_EOL","","",N,N],[17,"IPOPT_TS","","",N,N],[17,"IPOPT_TS_TSONLY","","",N,N],[17,"IPOPT_TS_TSANDADDR","","",N,N],[17,"IPOPT_TS_PRESPEC","","",N,N],[17,"ARPOP_RREQUEST","","",N,N],[17,"ARPOP_RREPLY","","",N,N],[17,"ARPOP_InREQUEST","","",N,N],[17,"ARPOP_InREPLY","","",N,N],[17,"ARPOP_NAK","","",N,N],[17,"ATF_NETMASK","","",N,N],[17,"ATF_DONTPUB","","",N,N],[17,"ARPHRD_NETROM","","",N,N],[17,"ARPHRD_ETHER","","",N,N],[17,"ARPHRD_EETHER","","",N,N],[17,"ARPHRD_AX25","","",N,N],[17,"ARPHRD_PRONET","","",N,N],[17,"ARPHRD_CHAOS","","",N,N],[17,"ARPHRD_IEEE802","","",N,N],[17,"ARPHRD_ARCNET","","",N,N],[17,"ARPHRD_APPLETLK","","",N,N],[17,"ARPHRD_DLCI","","",N,N],[17,"ARPHRD_ATM","","",N,N],[17,"ARPHRD_METRICOM","","",N,N],[17,"ARPHRD_IEEE1394","","",N,N],[17,"ARPHRD_EUI64","","",N,N],[17,"ARPHRD_INFINIBAND","","",N,N],[17,"ARPHRD_SLIP","","",N,N],[17,"ARPHRD_CSLIP","","",N,N],[17,"ARPHRD_SLIP6","","",N,N],[17,"ARPHRD_CSLIP6","","",N,N],[17,"ARPHRD_RSRVD","","",N,N],[17,"ARPHRD_ADAPT","","",N,N],[17,"ARPHRD_ROSE","","",N,N],[17,"ARPHRD_X25","","",N,N],[17,"ARPHRD_HWX25","","",N,N],[17,"ARPHRD_PPP","","",N,N],[17,"ARPHRD_CISCO","","",N,N],[17,"ARPHRD_HDLC","","",N,N],[17,"ARPHRD_LAPB","","",N,N],[17,"ARPHRD_DDCMP","","",N,N],[17,"ARPHRD_RAWHDLC","","",N,N],[17,"ARPHRD_TUNNEL","","",N,N],[17,"ARPHRD_TUNNEL6","","",N,N],[17,"ARPHRD_FRAD","","",N,N],[17,"ARPHRD_SKIP","","",N,N],[17,"ARPHRD_LOOPBACK","","",N,N],[17,"ARPHRD_LOCALTLK","","",N,N],[17,"ARPHRD_FDDI","","",N,N],[17,"ARPHRD_BIF","","",N,N],[17,"ARPHRD_SIT","","",N,N],[17,"ARPHRD_IPDDP","","",N,N],[17,"ARPHRD_IPGRE","","",N,N],[17,"ARPHRD_PIMREG","","",N,N],[17,"ARPHRD_HIPPI","","",N,N],[17,"ARPHRD_ASH","","",N,N],[17,"ARPHRD_ECONET","","",N,N],[17,"ARPHRD_IRDA","","",N,N],[17,"ARPHRD_FCPP","","",N,N],[17,"ARPHRD_FCAL","","",N,N],[17,"ARPHRD_FCPL","","",N,N],[17,"ARPHRD_FCFABRIC","","",N,N],[17,"ARPHRD_IEEE802_TR","","",N,N],[17,"ARPHRD_IEEE80211","","",N,N],[17,"ARPHRD_IEEE80211_PRISM","","",N,N],[17,"ARPHRD_IEEE80211_RADIOTAP","","",N,N],[17,"ARPHRD_IEEE802154","","",N,N],[17,"ARPHRD_VOID","","",N,N],[17,"ARPHRD_NONE","","",N,N],[17,"ABDAY_1","","",N,N],[17,"ABDAY_2","","",N,N],[17,"ABDAY_3","","",N,N],[17,"ABDAY_4","","",N,N],[17,"ABDAY_5","","",N,N],[17,"ABDAY_6","","",N,N],[17,"ABDAY_7","","",N,N],[17,"DAY_1","","",N,N],[17,"DAY_2","","",N,N],[17,"DAY_3","","",N,N],[17,"DAY_4","","",N,N],[17,"DAY_5","","",N,N],[17,"DAY_6","","",N,N],[17,"DAY_7","","",N,N],[17,"ABMON_1","","",N,N],[17,"ABMON_2","","",N,N],[17,"ABMON_3","","",N,N],[17,"ABMON_4","","",N,N],[17,"ABMON_5","","",N,N],[17,"ABMON_6","","",N,N],[17,"ABMON_7","","",N,N],[17,"ABMON_8","","",N,N],[17,"ABMON_9","","",N,N],[17,"ABMON_10","","",N,N],[17,"ABMON_11","","",N,N],[17,"ABMON_12","","",N,N],[17,"MON_1","","",N,N],[17,"MON_2","","",N,N],[17,"MON_3","","",N,N],[17,"MON_4","","",N,N],[17,"MON_5","","",N,N],[17,"MON_6","","",N,N],[17,"MON_7","","",N,N],[17,"MON_8","","",N,N],[17,"MON_9","","",N,N],[17,"MON_10","","",N,N],[17,"MON_11","","",N,N],[17,"MON_12","","",N,N],[17,"AM_STR","","",N,N],[17,"PM_STR","","",N,N],[17,"D_T_FMT","","",N,N],[17,"D_FMT","","",N,N],[17,"T_FMT","","",N,N],[17,"T_FMT_AMPM","","",N,N],[17,"ERA","","",N,N],[17,"ERA_D_FMT","","",N,N],[17,"ALT_DIGITS","","",N,N],[17,"ERA_D_T_FMT","","",N,N],[17,"ERA_T_FMT","","",N,N],[17,"CODESET","","",N,N],[17,"CRNCYSTR","","",N,N],[17,"RUSAGE_THREAD","","",N,N],[17,"RUSAGE_CHILDREN","","",N,N],[17,"RADIXCHAR","","",N,N],[17,"THOUSEP","","",N,N],[17,"YESEXPR","","",N,N],[17,"NOEXPR","","",N,N],[17,"YESSTR","","",N,N],[17,"NOSTR","","",N,N],[17,"FILENAME_MAX","","",N,N],[17,"L_tmpnam","","",N,N],[17,"_PC_LINK_MAX","","",N,N],[17,"_PC_MAX_CANON","","",N,N],[17,"_PC_MAX_INPUT","","",N,N],[17,"_PC_NAME_MAX","","",N,N],[17,"_PC_PATH_MAX","","",N,N],[17,"_PC_PIPE_BUF","","",N,N],[17,"_PC_CHOWN_RESTRICTED","","",N,N],[17,"_PC_NO_TRUNC","","",N,N],[17,"_PC_VDISABLE","","",N,N],[17,"_PC_SYNC_IO","","",N,N],[17,"_PC_ASYNC_IO","","",N,N],[17,"_PC_PRIO_IO","","",N,N],[17,"_PC_SOCK_MAXBUF","","",N,N],[17,"_PC_FILESIZEBITS","","",N,N],[17,"_PC_REC_INCR_XFER_SIZE","","",N,N],[17,"_PC_REC_MAX_XFER_SIZE","","",N,N],[17,"_PC_REC_MIN_XFER_SIZE","","",N,N],[17,"_PC_REC_XFER_ALIGN","","",N,N],[17,"_PC_ALLOC_SIZE_MIN","","",N,N],[17,"_PC_SYMLINK_MAX","","",N,N],[17,"_PC_2_SYMLINKS","","",N,N],[17,"_SC_ARG_MAX","","",N,N],[17,"_SC_CHILD_MAX","","",N,N],[17,"_SC_CLK_TCK","","",N,N],[17,"_SC_NGROUPS_MAX","","",N,N],[17,"_SC_OPEN_MAX","","",N,N],[17,"_SC_STREAM_MAX","","",N,N],[17,"_SC_TZNAME_MAX","","",N,N],[17,"_SC_JOB_CONTROL","","",N,N],[17,"_SC_SAVED_IDS","","",N,N],[17,"_SC_REALTIME_SIGNALS","","",N,N],[17,"_SC_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_TIMERS","","",N,N],[17,"_SC_ASYNCHRONOUS_IO","","",N,N],[17,"_SC_PRIORITIZED_IO","","",N,N],[17,"_SC_SYNCHRONIZED_IO","","",N,N],[17,"_SC_FSYNC","","",N,N],[17,"_SC_MAPPED_FILES","","",N,N],[17,"_SC_MEMLOCK","","",N,N],[17,"_SC_MEMLOCK_RANGE","","",N,N],[17,"_SC_MEMORY_PROTECTION","","",N,N],[17,"_SC_MESSAGE_PASSING","","",N,N],[17,"_SC_SEMAPHORES","","",N,N],[17,"_SC_SHARED_MEMORY_OBJECTS","","",N,N],[17,"_SC_AIO_LISTIO_MAX","","",N,N],[17,"_SC_AIO_MAX","","",N,N],[17,"_SC_AIO_PRIO_DELTA_MAX","","",N,N],[17,"_SC_DELAYTIMER_MAX","","",N,N],[17,"_SC_MQ_OPEN_MAX","","",N,N],[17,"_SC_MQ_PRIO_MAX","","",N,N],[17,"_SC_VERSION","","",N,N],[17,"_SC_PAGESIZE","","",N,N],[17,"_SC_PAGE_SIZE","","",N,N],[17,"_SC_RTSIG_MAX","","",N,N],[17,"_SC_SEM_NSEMS_MAX","","",N,N],[17,"_SC_SEM_VALUE_MAX","","",N,N],[17,"_SC_SIGQUEUE_MAX","","",N,N],[17,"_SC_TIMER_MAX","","",N,N],[17,"_SC_BC_BASE_MAX","","",N,N],[17,"_SC_BC_DIM_MAX","","",N,N],[17,"_SC_BC_SCALE_MAX","","",N,N],[17,"_SC_BC_STRING_MAX","","",N,N],[17,"_SC_COLL_WEIGHTS_MAX","","",N,N],[17,"_SC_EXPR_NEST_MAX","","",N,N],[17,"_SC_LINE_MAX","","",N,N],[17,"_SC_RE_DUP_MAX","","",N,N],[17,"_SC_2_VERSION","","",N,N],[17,"_SC_2_C_BIND","","",N,N],[17,"_SC_2_C_DEV","","",N,N],[17,"_SC_2_FORT_DEV","","",N,N],[17,"_SC_2_FORT_RUN","","",N,N],[17,"_SC_2_SW_DEV","","",N,N],[17,"_SC_2_LOCALEDEF","","",N,N],[17,"_SC_UIO_MAXIOV","","",N,N],[17,"_SC_IOV_MAX","","",N,N],[17,"_SC_THREADS","","",N,N],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",N,N],[17,"_SC_GETGR_R_SIZE_MAX","","",N,N],[17,"_SC_GETPW_R_SIZE_MAX","","",N,N],[17,"_SC_LOGIN_NAME_MAX","","",N,N],[17,"_SC_TTY_NAME_MAX","","",N,N],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",N,N],[17,"_SC_THREAD_KEYS_MAX","","",N,N],[17,"_SC_THREAD_STACK_MIN","","",N,N],[17,"_SC_THREAD_THREADS_MAX","","",N,N],[17,"_SC_THREAD_ATTR_STACKADDR","","",N,N],[17,"_SC_THREAD_ATTR_STACKSIZE","","",N,N],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_THREAD_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_PRIO_PROTECT","","",N,N],[17,"_SC_THREAD_PROCESS_SHARED","","",N,N],[17,"_SC_NPROCESSORS_CONF","","",N,N],[17,"_SC_NPROCESSORS_ONLN","","",N,N],[17,"_SC_PHYS_PAGES","","",N,N],[17,"_SC_AVPHYS_PAGES","","",N,N],[17,"_SC_ATEXIT_MAX","","",N,N],[17,"_SC_PASS_MAX","","",N,N],[17,"_SC_XOPEN_VERSION","","",N,N],[17,"_SC_XOPEN_XCU_VERSION","","",N,N],[17,"_SC_XOPEN_UNIX","","",N,N],[17,"_SC_XOPEN_CRYPT","","",N,N],[17,"_SC_XOPEN_ENH_I18N","","",N,N],[17,"_SC_XOPEN_SHM","","",N,N],[17,"_SC_2_CHAR_TERM","","",N,N],[17,"_SC_2_UPE","","",N,N],[17,"_SC_XOPEN_XPG2","","",N,N],[17,"_SC_XOPEN_XPG3","","",N,N],[17,"_SC_XOPEN_XPG4","","",N,N],[17,"_SC_NZERO","","",N,N],[17,"_SC_XBS5_ILP32_OFF32","","",N,N],[17,"_SC_XBS5_ILP32_OFFBIG","","",N,N],[17,"_SC_XBS5_LP64_OFF64","","",N,N],[17,"_SC_XBS5_LPBIG_OFFBIG","","",N,N],[17,"_SC_XOPEN_LEGACY","","",N,N],[17,"_SC_XOPEN_REALTIME","","",N,N],[17,"_SC_XOPEN_REALTIME_THREADS","","",N,N],[17,"_SC_ADVISORY_INFO","","",N,N],[17,"_SC_BARRIERS","","",N,N],[17,"_SC_CLOCK_SELECTION","","",N,N],[17,"_SC_CPUTIME","","",N,N],[17,"_SC_THREAD_CPUTIME","","",N,N],[17,"_SC_MONOTONIC_CLOCK","","",N,N],[17,"_SC_READER_WRITER_LOCKS","","",N,N],[17,"_SC_SPIN_LOCKS","","",N,N],[17,"_SC_REGEXP","","",N,N],[17,"_SC_SHELL","","",N,N],[17,"_SC_SPAWN","","",N,N],[17,"_SC_SPORADIC_SERVER","","",N,N],[17,"_SC_THREAD_SPORADIC_SERVER","","",N,N],[17,"_SC_TIMEOUTS","","",N,N],[17,"_SC_TYPED_MEMORY_OBJECTS","","",N,N],[17,"_SC_2_PBS","","",N,N],[17,"_SC_2_PBS_ACCOUNTING","","",N,N],[17,"_SC_2_PBS_LOCATE","","",N,N],[17,"_SC_2_PBS_MESSAGE","","",N,N],[17,"_SC_2_PBS_TRACK","","",N,N],[17,"_SC_SYMLOOP_MAX","","",N,N],[17,"_SC_STREAMS","","",N,N],[17,"_SC_2_PBS_CHECKPOINT","","",N,N],[17,"_SC_V6_ILP32_OFF32","","",N,N],[17,"_SC_V6_ILP32_OFFBIG","","",N,N],[17,"_SC_V6_LP64_OFF64","","",N,N],[17,"_SC_V6_LPBIG_OFFBIG","","",N,N],[17,"_SC_HOST_NAME_MAX","","",N,N],[17,"_SC_TRACE","","",N,N],[17,"_SC_TRACE_EVENT_FILTER","","",N,N],[17,"_SC_TRACE_INHERIT","","",N,N],[17,"_SC_TRACE_LOG","","",N,N],[17,"_SC_IPV6","","",N,N],[17,"_SC_RAW_SOCKETS","","",N,N],[17,"_SC_V7_ILP32_OFF32","","",N,N],[17,"_SC_V7_ILP32_OFFBIG","","",N,N],[17,"_SC_V7_LP64_OFF64","","",N,N],[17,"_SC_V7_LPBIG_OFFBIG","","",N,N],[17,"_SC_SS_REPL_MAX","","",N,N],[17,"_SC_TRACE_EVENT_NAME_MAX","","",N,N],[17,"_SC_TRACE_NAME_MAX","","",N,N],[17,"_SC_TRACE_SYS_MAX","","",N,N],[17,"_SC_TRACE_USER_EVENT_MAX","","",N,N],[17,"_SC_XOPEN_STREAMS","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",N,N],[17,"RLIM_SAVED_MAX","","",N,N],[17,"RLIM_SAVED_CUR","","",N,N],[17,"GLOB_ERR","","",N,N],[17,"GLOB_MARK","","",N,N],[17,"GLOB_NOSORT","","",N,N],[17,"GLOB_DOOFFS","","",N,N],[17,"GLOB_NOCHECK","","",N,N],[17,"GLOB_APPEND","","",N,N],[17,"GLOB_NOESCAPE","","",N,N],[17,"GLOB_NOSPACE","","",N,N],[17,"GLOB_ABORTED","","",N,N],[17,"GLOB_NOMATCH","","",N,N],[17,"POSIX_MADV_NORMAL","","",N,N],[17,"POSIX_MADV_RANDOM","","",N,N],[17,"POSIX_MADV_SEQUENTIAL","","",N,N],[17,"POSIX_MADV_WILLNEED","","",N,N],[17,"S_IEXEC","","",N,N],[17,"S_IWRITE","","",N,N],[17,"S_IREAD","","",N,N],[17,"F_LOCK","","",N,N],[17,"F_TEST","","",N,N],[17,"F_TLOCK","","",N,N],[17,"F_ULOCK","","",N,N],[17,"IFF_LOWER_UP","","",N,N],[17,"IFF_DORMANT","","",N,N],[17,"IFF_ECHO","","",N,N],[17,"IFF_TUN","","",N,N],[17,"IFF_TAP","","",N,N],[17,"IFF_NO_PI","","",N,N],[17,"TUN_READQ_SIZE","","",N,N],[17,"TUN_TUN_DEV","","",N,N],[17,"TUN_TAP_DEV","","",N,N],[17,"TUN_TYPE_MASK","","",N,N],[17,"IFF_ONE_QUEUE","","",N,N],[17,"IFF_VNET_HDR","","",N,N],[17,"IFF_TUN_EXCL","","",N,N],[17,"IFF_MULTI_QUEUE","","",N,N],[17,"IFF_ATTACH_QUEUE","","",N,N],[17,"IFF_DETACH_QUEUE","","",N,N],[17,"IFF_PERSIST","","",N,N],[17,"IFF_NOFILTER","","",N,N],[17,"ST_RDONLY","","",N,N],[17,"ST_NOSUID","","",N,N],[17,"ST_NODEV","","",N,N],[17,"ST_NOEXEC","","",N,N],[17,"ST_SYNCHRONOUS","","",N,N],[17,"ST_MANDLOCK","","",N,N],[17,"ST_WRITE","","",N,N],[17,"ST_APPEND","","",N,N],[17,"ST_IMMUTABLE","","",N,N],[17,"ST_NOATIME","","",N,N],[17,"ST_NODIRATIME","","",N,N],[17,"RTLD_NEXT","","",N,N],[17,"RTLD_DEFAULT","","",N,N],[17,"RTLD_NODELETE","","",N,N],[17,"RTLD_NOW","","",N,N],[17,"TCP_MD5SIG","","",N,N],[17,"PTHREAD_MUTEX_INITIALIZER","","",N,N],[17,"PTHREAD_COND_INITIALIZER","","",N,N],[17,"PTHREAD_RWLOCK_INITIALIZER","","",N,N],[17,"PTHREAD_MUTEX_NORMAL","","",N,N],[17,"PTHREAD_MUTEX_RECURSIVE","","",N,N],[17,"PTHREAD_MUTEX_ERRORCHECK","","",N,N],[17,"PTHREAD_MUTEX_DEFAULT","","",N,N],[17,"PTHREAD_PROCESS_PRIVATE","","",N,N],[17,"PTHREAD_PROCESS_SHARED","","",N,N],[17,"__SIZEOF_PTHREAD_COND_T","","",N,N],[17,"RENAME_NOREPLACE","","",N,N],[17,"RENAME_EXCHANGE","","",N,N],[17,"RENAME_WHITEOUT","","",N,N],[17,"SCHED_OTHER","","",N,N],[17,"SCHED_FIFO","","",N,N],[17,"SCHED_RR","","",N,N],[17,"SCHED_BATCH","","",N,N],[17,"SCHED_IDLE","","",N,N],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",N,N],[17,"IPPROTO_IGMP","","group mgmt protocol",N,N],[17,"IPPROTO_IPIP","","for compatibility",N,N],[17,"IPPROTO_EGP","","exterior gateway protocol",N,N],[17,"IPPROTO_PUP","","pup",N,N],[17,"IPPROTO_IDP","","xns idp",N,N],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",N,N],[17,"IPPROTO_DCCP","","DCCP",N,N],[17,"IPPROTO_ROUTING","","IP6 routing header",N,N],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",N,N],[17,"IPPROTO_RSVP","","resource reservation",N,N],[17,"IPPROTO_GRE","","General Routing Encap.",N,N],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",N,N],[17,"IPPROTO_AH","","IP6 Auth Header",N,N],[17,"IPPROTO_NONE","","IP6 no next header",N,N],[17,"IPPROTO_DSTOPTS","","IP6 destination option",N,N],[17,"IPPROTO_MTP","","",N,N],[17,"IPPROTO_BEETPH","","",N,N],[17,"IPPROTO_ENCAP","","encapsulation header",N,N],[17,"IPPROTO_PIM","","Protocol indep. multicast",N,N],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",N,N],[17,"IPPROTO_SCTP","","SCTP",N,N],[17,"IPPROTO_MH","","",N,N],[17,"IPPROTO_UDPLITE","","",N,N],[17,"IPPROTO_MPLS","","",N,N],[17,"IPPROTO_RAW","","raw IP packet",N,N],[17,"IPPROTO_MAX","","",N,N],[17,"AF_IB","","",N,N],[17,"AF_MPLS","","",N,N],[17,"AF_NFC","","",N,N],[17,"AF_VSOCK","","",N,N],[17,"PF_IB","","",N,N],[17,"PF_MPLS","","",N,N],[17,"PF_NFC","","",N,N],[17,"PF_VSOCK","","",N,N],[17,"IPC_PRIVATE","","",N,N],[17,"IPC_CREAT","","",N,N],[17,"IPC_EXCL","","",N,N],[17,"IPC_NOWAIT","","",N,N],[17,"IPC_RMID","","",N,N],[17,"IPC_SET","","",N,N],[17,"IPC_STAT","","",N,N],[17,"IPC_INFO","","",N,N],[17,"MSG_STAT","","",N,N],[17,"MSG_INFO","","",N,N],[17,"MSG_NOERROR","","",N,N],[17,"MSG_EXCEPT","","",N,N],[17,"MSG_COPY","","",N,N],[17,"SHM_R","","",N,N],[17,"SHM_W","","",N,N],[17,"SHM_RDONLY","","",N,N],[17,"SHM_RND","","",N,N],[17,"SHM_REMAP","","",N,N],[17,"SHM_EXEC","","",N,N],[17,"SHM_LOCK","","",N,N],[17,"SHM_UNLOCK","","",N,N],[17,"SHM_HUGETLB","","",N,N],[17,"SHM_NORESERVE","","",N,N],[17,"EPOLLRDHUP","","",N,N],[17,"EPOLLEXCLUSIVE","","",N,N],[17,"EPOLLONESHOT","","",N,N],[17,"QFMT_VFS_OLD","","",N,N],[17,"QFMT_VFS_V0","","",N,N],[17,"QFMT_VFS_V1","","",N,N],[17,"EFD_SEMAPHORE","","",N,N],[17,"LOG_NFACILITIES","","",N,N],[17,"SEM_FAILED","","",N,N],[17,"RB_AUTOBOOT","","",N,N],[17,"RB_HALT_SYSTEM","","",N,N],[17,"RB_ENABLE_CAD","","",N,N],[17,"RB_DISABLE_CAD","","",N,N],[17,"RB_POWER_OFF","","",N,N],[17,"RB_SW_SUSPEND","","",N,N],[17,"RB_KEXEC","","",N,N],[17,"AI_PASSIVE","","",N,N],[17,"AI_CANONNAME","","",N,N],[17,"AI_NUMERICHOST","","",N,N],[17,"AI_V4MAPPED","","",N,N],[17,"AI_ALL","","",N,N],[17,"AI_ADDRCONFIG","","",N,N],[17,"AI_NUMERICSERV","","",N,N],[17,"EAI_BADFLAGS","","",N,N],[17,"EAI_NONAME","","",N,N],[17,"EAI_AGAIN","","",N,N],[17,"EAI_FAIL","","",N,N],[17,"EAI_NODATA","","",N,N],[17,"EAI_FAMILY","","",N,N],[17,"EAI_SOCKTYPE","","",N,N],[17,"EAI_SERVICE","","",N,N],[17,"EAI_MEMORY","","",N,N],[17,"EAI_SYSTEM","","",N,N],[17,"EAI_OVERFLOW","","",N,N],[17,"NI_NUMERICHOST","","",N,N],[17,"NI_NUMERICSERV","","",N,N],[17,"NI_NOFQDN","","",N,N],[17,"NI_NAMEREQD","","",N,N],[17,"NI_DGRAM","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",N,N],[17,"SYNC_FILE_RANGE_WRITE","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",N,N],[17,"AIO_CANCELED","","",N,N],[17,"AIO_NOTCANCELED","","",N,N],[17,"AIO_ALLDONE","","",N,N],[17,"LIO_READ","","",N,N],[17,"LIO_WRITE","","",N,N],[17,"LIO_NOP","","",N,N],[17,"LIO_WAIT","","",N,N],[17,"LIO_NOWAIT","","",N,N],[17,"MREMAP_MAYMOVE","","",N,N],[17,"MREMAP_FIXED","","",N,N],[17,"PR_SET_PDEATHSIG","","",N,N],[17,"PR_GET_PDEATHSIG","","",N,N],[17,"PR_GET_DUMPABLE","","",N,N],[17,"PR_SET_DUMPABLE","","",N,N],[17,"PR_GET_UNALIGN","","",N,N],[17,"PR_SET_UNALIGN","","",N,N],[17,"PR_UNALIGN_NOPRINT","","",N,N],[17,"PR_UNALIGN_SIGBUS","","",N,N],[17,"PR_GET_KEEPCAPS","","",N,N],[17,"PR_SET_KEEPCAPS","","",N,N],[17,"PR_GET_FPEMU","","",N,N],[17,"PR_SET_FPEMU","","",N,N],[17,"PR_FPEMU_NOPRINT","","",N,N],[17,"PR_FPEMU_SIGFPE","","",N,N],[17,"PR_GET_FPEXC","","",N,N],[17,"PR_SET_FPEXC","","",N,N],[17,"PR_FP_EXC_SW_ENABLE","","",N,N],[17,"PR_FP_EXC_DIV","","",N,N],[17,"PR_FP_EXC_OVF","","",N,N],[17,"PR_FP_EXC_UND","","",N,N],[17,"PR_FP_EXC_RES","","",N,N],[17,"PR_FP_EXC_INV","","",N,N],[17,"PR_FP_EXC_DISABLED","","",N,N],[17,"PR_FP_EXC_NONRECOV","","",N,N],[17,"PR_FP_EXC_ASYNC","","",N,N],[17,"PR_FP_EXC_PRECISE","","",N,N],[17,"PR_GET_TIMING","","",N,N],[17,"PR_SET_TIMING","","",N,N],[17,"PR_TIMING_STATISTICAL","","",N,N],[17,"PR_TIMING_TIMESTAMP","","",N,N],[17,"PR_SET_NAME","","",N,N],[17,"PR_GET_NAME","","",N,N],[17,"PR_GET_ENDIAN","","",N,N],[17,"PR_SET_ENDIAN","","",N,N],[17,"PR_ENDIAN_BIG","","",N,N],[17,"PR_ENDIAN_LITTLE","","",N,N],[17,"PR_ENDIAN_PPC_LITTLE","","",N,N],[17,"PR_GET_SECCOMP","","",N,N],[17,"PR_SET_SECCOMP","","",N,N],[17,"PR_CAPBSET_READ","","",N,N],[17,"PR_CAPBSET_DROP","","",N,N],[17,"PR_GET_TSC","","",N,N],[17,"PR_SET_TSC","","",N,N],[17,"PR_TSC_ENABLE","","",N,N],[17,"PR_TSC_SIGSEGV","","",N,N],[17,"PR_GET_SECUREBITS","","",N,N],[17,"PR_SET_SECUREBITS","","",N,N],[17,"PR_SET_TIMERSLACK","","",N,N],[17,"PR_GET_TIMERSLACK","","",N,N],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",N,N],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",N,N],[17,"PR_MCE_KILL","","",N,N],[17,"PR_MCE_KILL_CLEAR","","",N,N],[17,"PR_MCE_KILL_SET","","",N,N],[17,"PR_MCE_KILL_LATE","","",N,N],[17,"PR_MCE_KILL_EARLY","","",N,N],[17,"PR_MCE_KILL_DEFAULT","","",N,N],[17,"PR_MCE_KILL_GET","","",N,N],[17,"PR_SET_MM","","",N,N],[17,"PR_SET_MM_START_CODE","","",N,N],[17,"PR_SET_MM_END_CODE","","",N,N],[17,"PR_SET_MM_START_DATA","","",N,N],[17,"PR_SET_MM_END_DATA","","",N,N],[17,"PR_SET_MM_START_STACK","","",N,N],[17,"PR_SET_MM_START_BRK","","",N,N],[17,"PR_SET_MM_BRK","","",N,N],[17,"PR_SET_MM_ARG_START","","",N,N],[17,"PR_SET_MM_ARG_END","","",N,N],[17,"PR_SET_MM_ENV_START","","",N,N],[17,"PR_SET_MM_ENV_END","","",N,N],[17,"PR_SET_MM_AUXV","","",N,N],[17,"PR_SET_MM_EXE_FILE","","",N,N],[17,"PR_SET_MM_MAP","","",N,N],[17,"PR_SET_MM_MAP_SIZE","","",N,N],[17,"PR_SET_PTRACER","","",N,N],[17,"PR_SET_CHILD_SUBREAPER","","",N,N],[17,"PR_GET_CHILD_SUBREAPER","","",N,N],[17,"PR_SET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_TID_ADDRESS","","",N,N],[17,"PR_SET_THP_DISABLE","","",N,N],[17,"PR_GET_THP_DISABLE","","",N,N],[17,"PR_MPX_ENABLE_MANAGEMENT","","",N,N],[17,"PR_MPX_DISABLE_MANAGEMENT","","",N,N],[17,"PR_SET_FP_MODE","","",N,N],[17,"PR_GET_FP_MODE","","",N,N],[17,"PR_FP_MODE_FR","","",N,N],[17,"PR_FP_MODE_FRE","","",N,N],[17,"PR_CAP_AMBIENT","","",N,N],[17,"PR_CAP_AMBIENT_IS_SET","","",N,N],[17,"PR_CAP_AMBIENT_RAISE","","",N,N],[17,"PR_CAP_AMBIENT_LOWER","","",N,N],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",N,N],[17,"GRND_NONBLOCK","","",N,N],[17,"GRND_RANDOM","","",N,N],[17,"SECCOMP_MODE_DISABLED","","",N,N],[17,"SECCOMP_MODE_STRICT","","",N,N],[17,"SECCOMP_MODE_FILTER","","",N,N],[17,"ITIMER_REAL","","",N,N],[17,"ITIMER_VIRTUAL","","",N,N],[17,"ITIMER_PROF","","",N,N],[17,"TFD_CLOEXEC","","",N,N],[17,"TFD_NONBLOCK","","",N,N],[17,"TFD_TIMER_ABSTIME","","",N,N],[17,"XATTR_CREATE","","",N,N],[17,"XATTR_REPLACE","","",N,N],[17,"_POSIX_VDISABLE","","",N,N],[17,"FALLOC_FL_KEEP_SIZE","","",N,N],[17,"FALLOC_FL_PUNCH_HOLE","","",N,N],[17,"FALLOC_FL_COLLAPSE_RANGE","","",N,N],[17,"FALLOC_FL_ZERO_RANGE","","",N,N],[17,"FALLOC_FL_INSERT_RANGE","","",N,N],[17,"FALLOC_FL_UNSHARE_RANGE","","",N,N],[17,"ENOATTR","","",N,N],[17,"SO_ORIGINAL_DST","","",N,N],[17,"IUTF8","","",N,N],[17,"CMSPAR","","",N,N],[17,"MFD_CLOEXEC","","",N,N],[17,"MFD_ALLOW_SEALING","","",N,N],[17,"PT_NULL","","",N,N],[17,"PT_LOAD","","",N,N],[17,"PT_DYNAMIC","","",N,N],[17,"PT_INTERP","","",N,N],[17,"PT_NOTE","","",N,N],[17,"PT_SHLIB","","",N,N],[17,"PT_PHDR","","",N,N],[17,"PT_TLS","","",N,N],[17,"PT_NUM","","",N,N],[17,"PT_LOOS","","",N,N],[17,"PT_GNU_EH_FRAME","","",N,N],[17,"PT_GNU_STACK","","",N,N],[17,"PT_GNU_RELRO","","",N,N],[17,"ETH_ALEN","","",N,N],[17,"ETH_HLEN","","",N,N],[17,"ETH_ZLEN","","",N,N],[17,"ETH_DATA_LEN","","",N,N],[17,"ETH_FRAME_LEN","","",N,N],[17,"ETH_FCS_LEN","","",N,N],[17,"ETH_P_LOOP","","",N,N],[17,"ETH_P_PUP","","",N,N],[17,"ETH_P_PUPAT","","",N,N],[17,"ETH_P_IP","","",N,N],[17,"ETH_P_X25","","",N,N],[17,"ETH_P_ARP","","",N,N],[17,"ETH_P_BPQ","","",N,N],[17,"ETH_P_IEEEPUP","","",N,N],[17,"ETH_P_IEEEPUPAT","","",N,N],[17,"ETH_P_BATMAN","","",N,N],[17,"ETH_P_DEC","","",N,N],[17,"ETH_P_DNA_DL","","",N,N],[17,"ETH_P_DNA_RC","","",N,N],[17,"ETH_P_DNA_RT","","",N,N],[17,"ETH_P_LAT","","",N,N],[17,"ETH_P_DIAG","","",N,N],[17,"ETH_P_CUST","","",N,N],[17,"ETH_P_SCA","","",N,N],[17,"ETH_P_TEB","","",N,N],[17,"ETH_P_RARP","","",N,N],[17,"ETH_P_ATALK","","",N,N],[17,"ETH_P_AARP","","",N,N],[17,"ETH_P_8021Q","","",N,N],[17,"ETH_P_IPX","","",N,N],[17,"ETH_P_IPV6","","",N,N],[17,"ETH_P_PAUSE","","",N,N],[17,"ETH_P_SLOW","","",N,N],[17,"ETH_P_WCCP","","",N,N],[17,"ETH_P_MPLS_UC","","",N,N],[17,"ETH_P_MPLS_MC","","",N,N],[17,"ETH_P_ATMMPOA","","",N,N],[17,"ETH_P_PPP_DISC","","",N,N],[17,"ETH_P_PPP_SES","","",N,N],[17,"ETH_P_LINK_CTL","","",N,N],[17,"ETH_P_ATMFATE","","",N,N],[17,"ETH_P_PAE","","",N,N],[17,"ETH_P_AOE","","",N,N],[17,"ETH_P_8021AD","","",N,N],[17,"ETH_P_802_EX1","","",N,N],[17,"ETH_P_TIPC","","",N,N],[17,"ETH_P_MACSEC","","",N,N],[17,"ETH_P_8021AH","","",N,N],[17,"ETH_P_MVRP","","",N,N],[17,"ETH_P_1588","","",N,N],[17,"ETH_P_PRP","","",N,N],[17,"ETH_P_FCOE","","",N,N],[17,"ETH_P_TDLS","","",N,N],[17,"ETH_P_FIP","","",N,N],[17,"ETH_P_80221","","",N,N],[17,"ETH_P_LOOPBACK","","",N,N],[17,"ETH_P_QINQ1","","",N,N],[17,"ETH_P_QINQ2","","",N,N],[17,"ETH_P_QINQ3","","",N,N],[17,"ETH_P_EDSA","","",N,N],[17,"ETH_P_AF_IUCV","","",N,N],[17,"ETH_P_802_3_MIN","","",N,N],[17,"ETH_P_802_3","","",N,N],[17,"ETH_P_AX25","","",N,N],[17,"ETH_P_ALL","","",N,N],[17,"ETH_P_802_2","","",N,N],[17,"ETH_P_SNAP","","",N,N],[17,"ETH_P_DDCMP","","",N,N],[17,"ETH_P_WAN_PPP","","",N,N],[17,"ETH_P_PPP_MP","","",N,N],[17,"ETH_P_LOCALTALK","","",N,N],[17,"ETH_P_CANFD","","",N,N],[17,"ETH_P_PPPTALK","","",N,N],[17,"ETH_P_TR_802_2","","",N,N],[17,"ETH_P_MOBITEX","","",N,N],[17,"ETH_P_CONTROL","","",N,N],[17,"ETH_P_IRDA","","",N,N],[17,"ETH_P_ECONET","","",N,N],[17,"ETH_P_HDLC","","",N,N],[17,"ETH_P_ARCNET","","",N,N],[17,"ETH_P_DSA","","",N,N],[17,"ETH_P_TRAILER","","",N,N],[17,"ETH_P_PHONET","","",N,N],[17,"ETH_P_IEEE802154","","",N,N],[17,"ETH_P_CAIF","","",N,N],[17,"POSIX_SPAWN_RESETIDS","","",N,N],[17,"POSIX_SPAWN_SETPGROUP","","",N,N],[17,"POSIX_SPAWN_SETSIGDEF","","",N,N],[17,"POSIX_SPAWN_SETSIGMASK","","",N,N],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",N,N],[17,"POSIX_SPAWN_SETSCHEDULER","","",N,N],[17,"NLMSG_NOOP","","",N,N],[17,"NLMSG_ERROR","","",N,N],[17,"NLMSG_DONE","","",N,N],[17,"NLMSG_OVERRUN","","",N,N],[17,"NLMSG_MIN_TYPE","","",N,N],[17,"GENL_NAMSIZ","","",N,N],[17,"GENL_MIN_ID","","",N,N],[17,"GENL_MAX_ID","","",N,N],[17,"GENL_ADMIN_PERM","","",N,N],[17,"GENL_CMD_CAP_DO","","",N,N],[17,"GENL_CMD_CAP_DUMP","","",N,N],[17,"GENL_CMD_CAP_HASPOL","","",N,N],[17,"GENL_ID_CTRL","","",N,N],[17,"CTRL_CMD_UNSPEC","","",N,N],[17,"CTRL_CMD_NEWFAMILY","","",N,N],[17,"CTRL_CMD_DELFAMILY","","",N,N],[17,"CTRL_CMD_GETFAMILY","","",N,N],[17,"CTRL_CMD_NEWOPS","","",N,N],[17,"CTRL_CMD_DELOPS","","",N,N],[17,"CTRL_CMD_GETOPS","","",N,N],[17,"CTRL_CMD_NEWMCAST_GRP","","",N,N],[17,"CTRL_CMD_DELMCAST_GRP","","",N,N],[17,"CTRL_CMD_GETMCAST_GRP","","",N,N],[17,"CTRL_ATTR_UNSPEC","","",N,N],[17,"CTRL_ATTR_FAMILY_ID","","",N,N],[17,"CTRL_ATTR_FAMILY_NAME","","",N,N],[17,"CTRL_ATTR_VERSION","","",N,N],[17,"CTRL_ATTR_HDRSIZE","","",N,N],[17,"CTRL_ATTR_MAXATTR","","",N,N],[17,"CTRL_ATTR_OPS","","",N,N],[17,"CTRL_ATTR_MCAST_GROUPS","","",N,N],[17,"CTRL_ATTR_OP_UNSPEC","","",N,N],[17,"CTRL_ATTR_OP_ID","","",N,N],[17,"CTRL_ATTR_OP_FLAGS","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_ID","","",N,N],[17,"PACKET_ADD_MEMBERSHIP","","",N,N],[17,"PACKET_DROP_MEMBERSHIP","","",N,N],[17,"PACKET_MR_MULTICAST","","",N,N],[17,"PACKET_MR_PROMISC","","",N,N],[17,"PACKET_MR_ALLMULTI","","",N,N],[17,"PACKET_MR_UNICAST","","",N,N],[17,"NF_DROP","","",N,N],[17,"NF_ACCEPT","","",N,N],[17,"NF_STOLEN","","",N,N],[17,"NF_QUEUE","","",N,N],[17,"NF_REPEAT","","",N,N],[17,"NF_STOP","","",N,N],[17,"NF_MAX_VERDICT","","",N,N],[17,"NF_VERDICT_MASK","","",N,N],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",N,N],[17,"NF_VERDICT_QMASK","","",N,N],[17,"NF_VERDICT_QBITS","","",N,N],[17,"NF_VERDICT_BITS","","",N,N],[17,"NF_INET_PRE_ROUTING","","",N,N],[17,"NF_INET_LOCAL_IN","","",N,N],[17,"NF_INET_FORWARD","","",N,N],[17,"NF_INET_LOCAL_OUT","","",N,N],[17,"NF_INET_POST_ROUTING","","",N,N],[17,"NF_INET_NUMHOOKS","","",N,N],[17,"NFPROTO_UNSPEC","","",N,N],[17,"NFPROTO_IPV4","","",N,N],[17,"NFPROTO_ARP","","",N,N],[17,"NFPROTO_BRIDGE","","",N,N],[17,"NFPROTO_IPV6","","",N,N],[17,"NFPROTO_DECNET","","",N,N],[17,"NFPROTO_NUMPROTO","","",N,N],[17,"NF_IP_PRE_ROUTING","","",N,N],[17,"NF_IP_LOCAL_IN","","",N,N],[17,"NF_IP_FORWARD","","",N,N],[17,"NF_IP_LOCAL_OUT","","",N,N],[17,"NF_IP_POST_ROUTING","","",N,N],[17,"NF_IP_NUMHOOKS","","",N,N],[17,"NF_IP_PRI_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP_PRI_RAW","","",N,N],[17,"NF_IP_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK","","",N,N],[17,"NF_IP_PRI_MANGLE","","",N,N],[17,"NF_IP_PRI_NAT_DST","","",N,N],[17,"NF_IP_PRI_FILTER","","",N,N],[17,"NF_IP_PRI_SECURITY","","",N,N],[17,"NF_IP_PRI_NAT_SRC","","",N,N],[17,"NF_IP_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",N,N],[17,"NF_IP_PRI_LAST","","",N,N],[17,"NF_IP6_PRE_ROUTING","","",N,N],[17,"NF_IP6_LOCAL_IN","","",N,N],[17,"NF_IP6_FORWARD","","",N,N],[17,"NF_IP6_LOCAL_OUT","","",N,N],[17,"NF_IP6_POST_ROUTING","","",N,N],[17,"NF_IP6_NUMHOOKS","","",N,N],[17,"NF_IP6_PRI_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP6_PRI_RAW","","",N,N],[17,"NF_IP6_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK","","",N,N],[17,"NF_IP6_PRI_MANGLE","","",N,N],[17,"NF_IP6_PRI_NAT_DST","","",N,N],[17,"NF_IP6_PRI_FILTER","","",N,N],[17,"NF_IP6_PRI_SECURITY","","",N,N],[17,"NF_IP6_PRI_NAT_SRC","","",N,N],[17,"NF_IP6_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP6_PRI_LAST","","",N,N],[17,"SIOCADDRT","","",N,N],[17,"SIOCDELRT","","",N,N],[17,"SIOCGIFNAME","","",N,N],[17,"SIOCSIFLINK","","",N,N],[17,"SIOCGIFCONF","","",N,N],[17,"SIOCGIFFLAGS","","",N,N],[17,"SIOCSIFFLAGS","","",N,N],[17,"SIOCGIFADDR","","",N,N],[17,"SIOCSIFADDR","","",N,N],[17,"SIOCGIFDSTADDR","","",N,N],[17,"SIOCSIFDSTADDR","","",N,N],[17,"SIOCGIFBRDADDR","","",N,N],[17,"SIOCSIFBRDADDR","","",N,N],[17,"SIOCGIFNETMASK","","",N,N],[17,"SIOCSIFNETMASK","","",N,N],[17,"SIOCGIFMETRIC","","",N,N],[17,"SIOCSIFMETRIC","","",N,N],[17,"SIOCGIFMEM","","",N,N],[17,"SIOCSIFMEM","","",N,N],[17,"SIOCGIFMTU","","",N,N],[17,"SIOCSIFMTU","","",N,N],[17,"SIOCSIFHWADDR","","",N,N],[17,"SIOCGIFENCAP","","",N,N],[17,"SIOCSIFENCAP","","",N,N],[17,"SIOCGIFHWADDR","","",N,N],[17,"SIOCGIFSLAVE","","",N,N],[17,"SIOCSIFSLAVE","","",N,N],[17,"SIOCADDMULTI","","",N,N],[17,"SIOCDELMULTI","","",N,N],[17,"SIOCDARP","","",N,N],[17,"SIOCGARP","","",N,N],[17,"SIOCSARP","","",N,N],[17,"SIOCDRARP","","",N,N],[17,"SIOCGRARP","","",N,N],[17,"SIOCSRARP","","",N,N],[17,"SIOCGIFMAP","","",N,N],[17,"SIOCSIFMAP","","",N,N],[17,"IPTOS_TOS_MASK","","",N,N],[17,"IPTOS_PREC_MASK","","",N,N],[17,"RTF_UP","","",N,N],[17,"RTF_GATEWAY","","",N,N],[17,"RTF_HOST","","",N,N],[17,"RTF_REINSTATE","","",N,N],[17,"RTF_DYNAMIC","","",N,N],[17,"RTF_MODIFIED","","",N,N],[17,"RTF_MTU","","",N,N],[17,"RTF_MSS","","",N,N],[17,"RTF_WINDOW","","",N,N],[17,"RTF_IRTT","","",N,N],[17,"RTF_REJECT","","",N,N],[17,"RTF_STATIC","","",N,N],[17,"RTF_XRESOLVE","","",N,N],[17,"RTF_NOFORWARD","","",N,N],[17,"RTF_THROW","","",N,N],[17,"RTF_NOPMTUDISC","","",N,N],[17,"RTF_DEFAULT","","",N,N],[17,"RTF_ALLONLINK","","",N,N],[17,"RTF_ADDRCONF","","",N,N],[17,"RTF_LINKRT","","",N,N],[17,"RTF_NONEXTHOP","","",N,N],[17,"RTF_CACHE","","",N,N],[17,"RTF_FLOW","","",N,N],[17,"RTF_POLICY","","",N,N],[17,"RTCF_VALVE","","",N,N],[17,"RTCF_MASQ","","",N,N],[17,"RTCF_NAT","","",N,N],[17,"RTCF_DOREDIRECT","","",N,N],[17,"RTCF_LOG","","",N,N],[17,"RTCF_DIRECTSRC","","",N,N],[17,"RTF_LOCAL","","",N,N],[17,"RTF_INTERFACE","","",N,N],[17,"RTF_MULTICAST","","",N,N],[17,"RTF_BROADCAST","","",N,N],[17,"RTF_NAT","","",N,N],[17,"RTF_ADDRCLASSMASK","","",N,N],[17,"RT_CLASS_UNSPEC","","",N,N],[17,"RT_CLASS_DEFAULT","","",N,N],[17,"RT_CLASS_MAIN","","",N,N],[17,"RT_CLASS_LOCAL","","",N,N],[17,"RT_CLASS_MAX","","",N,N],[17,"RTMSG_OVERRUN","","",N,N],[17,"RTMSG_NEWDEVICE","","",N,N],[17,"RTMSG_DELDEVICE","","",N,N],[17,"RTMSG_NEWROUTE","","",N,N],[17,"RTMSG_DELROUTE","","",N,N],[17,"RTMSG_NEWRULE","","",N,N],[17,"RTMSG_DELRULE","","",N,N],[17,"RTMSG_CONTROL","","",N,N],[17,"RTMSG_AR_FAILED","","",N,N],[17,"MAX_ADDR_LEN","","",N,N],[17,"ARPD_UPDATE","","",N,N],[17,"ARPD_LOOKUP","","",N,N],[17,"ARPD_FLUSH","","",N,N],[17,"ATF_MAGIC","","",N,N],[17,"MODULE_INIT_IGNORE_MODVERSIONS","","",N,N],[17,"MODULE_INIT_IGNORE_VERMAGIC","","",N,N],[17,"__UT_LINESIZE","","",N,N],[17,"__UT_NAMESIZE","","",N,N],[17,"__UT_HOSTSIZE","","",N,N],[17,"EMPTY","","",N,N],[17,"RUN_LVL","","",N,N],[17,"BOOT_TIME","","",N,N],[17,"NEW_TIME","","",N,N],[17,"OLD_TIME","","",N,N],[17,"INIT_PROCESS","","",N,N],[17,"LOGIN_PROCESS","","",N,N],[17,"USER_PROCESS","","",N,N],[17,"DEAD_PROCESS","","",N,N],[17,"ACCOUNTING","","",N,N],[17,"RLIMIT_RSS","","",N,N],[17,"RLIMIT_AS","","",N,N],[17,"RLIMIT_MEMLOCK","","",N,N],[17,"RLIM_INFINITY","","",N,N],[17,"RLIMIT_RTTIME","","",N,N],[17,"RLIMIT_NLIMITS","","",N,N],[17,"SOCK_NONBLOCK","","",N,N],[17,"SOL_RXRPC","","",N,N],[17,"SOL_PPPOL2TP","","",N,N],[17,"SOL_BLUETOOTH","","",N,N],[17,"SOL_PNPIPE","","",N,N],[17,"SOL_RDS","","",N,N],[17,"SOL_IUCV","","",N,N],[17,"SOL_CAIF","","",N,N],[17,"SOL_ALG","","",N,N],[17,"SOL_NFC","","",N,N],[17,"MSG_TRYHARD","","",N,N],[17,"LC_PAPER","","",N,N],[17,"LC_NAME","","",N,N],[17,"LC_ADDRESS","","",N,N],[17,"LC_TELEPHONE","","",N,N],[17,"LC_MEASUREMENT","","",N,N],[17,"LC_IDENTIFICATION","","",N,N],[17,"LC_PAPER_MASK","","",N,N],[17,"LC_NAME_MASK","","",N,N],[17,"LC_ADDRESS_MASK","","",N,N],[17,"LC_TELEPHONE_MASK","","",N,N],[17,"LC_MEASUREMENT_MASK","","",N,N],[17,"LC_IDENTIFICATION_MASK","","",N,N],[17,"LC_ALL_MASK","","",N,N],[17,"MAP_ANON","","",N,N],[17,"MAP_ANONYMOUS","","",N,N],[17,"MAP_DENYWRITE","","",N,N],[17,"MAP_EXECUTABLE","","",N,N],[17,"MAP_POPULATE","","",N,N],[17,"MAP_NONBLOCK","","",N,N],[17,"MAP_STACK","","",N,N],[17,"ENOTSUP","","",N,N],[17,"EUCLEAN","","",N,N],[17,"ENOTNAM","","",N,N],[17,"ENAVAIL","","",N,N],[17,"EISNAM","","",N,N],[17,"EREMOTEIO","","",N,N],[17,"SOCK_STREAM","","",N,N],[17,"SOCK_DGRAM","","",N,N],[17,"SOCK_SEQPACKET","","",N,N],[17,"SOCK_DCCP","","",N,N],[17,"SOCK_PACKET","","",N,N],[17,"TCP_COOKIE_TRANSACTIONS","","",N,N],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",N,N],[17,"TCP_THIN_DUPACK","","",N,N],[17,"TCP_USER_TIMEOUT","","",N,N],[17,"TCP_REPAIR","","",N,N],[17,"TCP_REPAIR_QUEUE","","",N,N],[17,"TCP_QUEUE_SEQ","","",N,N],[17,"TCP_REPAIR_OPTIONS","","",N,N],[17,"TCP_FASTOPEN","","",N,N],[17,"TCP_TIMESTAMP","","",N,N],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",N,N],[17,"DCCP_SOCKOPT_SERVICE","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_L","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_R","","",N,N],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",N,N],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",N,N],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",N,N],[17,"DCCP_SOCKOPT_CCID","","",N,N],[17,"DCCP_SOCKOPT_TX_CCID","","",N,N],[17,"DCCP_SOCKOPT_RX_CCID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",N,N],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",N,N],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",N,N],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",N,N],[17,"SIGTTIN","","",N,N],[17,"SIGTTOU","","",N,N],[17,"SIGXCPU","","",N,N],[17,"SIGXFSZ","","",N,N],[17,"SIGVTALRM","","",N,N],[17,"SIGPROF","","",N,N],[17,"SIGWINCH","","",N,N],[17,"SIGEV_THREAD_ID","","",N,N],[17,"BUFSIZ","","",N,N],[17,"TMP_MAX","","",N,N],[17,"FOPEN_MAX","","",N,N],[17,"POSIX_FADV_DONTNEED","","",N,N],[17,"POSIX_FADV_NOREUSE","","",N,N],[17,"POSIX_MADV_DONTNEED","","",N,N],[17,"_SC_EQUIV_CLASS_MAX","","",N,N],[17,"_SC_CHARCLASS_NAME_MAX","","",N,N],[17,"_SC_PII","","",N,N],[17,"_SC_PII_XTI","","",N,N],[17,"_SC_PII_SOCKET","","",N,N],[17,"_SC_PII_INTERNET","","",N,N],[17,"_SC_PII_OSI","","",N,N],[17,"_SC_POLL","","",N,N],[17,"_SC_SELECT","","",N,N],[17,"_SC_PII_INTERNET_STREAM","","",N,N],[17,"_SC_PII_INTERNET_DGRAM","","",N,N],[17,"_SC_PII_OSI_COTS","","",N,N],[17,"_SC_PII_OSI_CLTS","","",N,N],[17,"_SC_PII_OSI_M","","",N,N],[17,"_SC_T_IOV_MAX","","",N,N],[17,"_SC_2_C_VERSION","","",N,N],[17,"_SC_CHAR_BIT","","",N,N],[17,"_SC_CHAR_MAX","","",N,N],[17,"_SC_CHAR_MIN","","",N,N],[17,"_SC_INT_MAX","","",N,N],[17,"_SC_INT_MIN","","",N,N],[17,"_SC_LONG_BIT","","",N,N],[17,"_SC_WORD_BIT","","",N,N],[17,"_SC_MB_LEN_MAX","","",N,N],[17,"_SC_SSIZE_MAX","","",N,N],[17,"_SC_SCHAR_MAX","","",N,N],[17,"_SC_SCHAR_MIN","","",N,N],[17,"_SC_SHRT_MAX","","",N,N],[17,"_SC_SHRT_MIN","","",N,N],[17,"_SC_UCHAR_MAX","","",N,N],[17,"_SC_UINT_MAX","","",N,N],[17,"_SC_ULONG_MAX","","",N,N],[17,"_SC_USHRT_MAX","","",N,N],[17,"_SC_NL_ARGMAX","","",N,N],[17,"_SC_NL_LANGMAX","","",N,N],[17,"_SC_NL_MSGMAX","","",N,N],[17,"_SC_NL_NMAX","","",N,N],[17,"_SC_NL_SETMAX","","",N,N],[17,"_SC_NL_TEXTMAX","","",N,N],[17,"_SC_BASE","","",N,N],[17,"_SC_C_LANG_SUPPORT","","",N,N],[17,"_SC_C_LANG_SUPPORT_R","","",N,N],[17,"_SC_DEVICE_IO","","",N,N],[17,"_SC_DEVICE_SPECIFIC","","",N,N],[17,"_SC_DEVICE_SPECIFIC_R","","",N,N],[17,"_SC_FD_MGMT","","",N,N],[17,"_SC_FIFO","","",N,N],[17,"_SC_PIPE","","",N,N],[17,"_SC_FILE_ATTRIBUTES","","",N,N],[17,"_SC_FILE_LOCKING","","",N,N],[17,"_SC_FILE_SYSTEM","","",N,N],[17,"_SC_MULTI_PROCESS","","",N,N],[17,"_SC_SINGLE_PROCESS","","",N,N],[17,"_SC_NETWORKING","","",N,N],[17,"_SC_REGEX_VERSION","","",N,N],[17,"_SC_SIGNALS","","",N,N],[17,"_SC_SYSTEM_DATABASE","","",N,N],[17,"_SC_SYSTEM_DATABASE_R","","",N,N],[17,"_SC_USER_GROUPS","","",N,N],[17,"_SC_USER_GROUPS_R","","",N,N],[17,"_SC_LEVEL1_ICACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",N,N],[17,"O_ACCMODE","","",N,N],[17,"ST_RELATIME","","",N,N],[17,"NI_MAXHOST","","",N,N],[17,"ADFS_SUPER_MAGIC","","",N,N],[17,"AFFS_SUPER_MAGIC","","",N,N],[17,"CODA_SUPER_MAGIC","","",N,N],[17,"CRAMFS_MAGIC","","",N,N],[17,"EFS_SUPER_MAGIC","","",N,N],[17,"EXT2_SUPER_MAGIC","","",N,N],[17,"EXT3_SUPER_MAGIC","","",N,N],[17,"EXT4_SUPER_MAGIC","","",N,N],[17,"HPFS_SUPER_MAGIC","","",N,N],[17,"HUGETLBFS_MAGIC","","",N,N],[17,"ISOFS_SUPER_MAGIC","","",N,N],[17,"JFFS2_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC2","","",N,N],[17,"MINIX2_SUPER_MAGIC","","",N,N],[17,"MINIX2_SUPER_MAGIC2","","",N,N],[17,"MSDOS_SUPER_MAGIC","","",N,N],[17,"NCP_SUPER_MAGIC","","",N,N],[17,"NFS_SUPER_MAGIC","","",N,N],[17,"OPENPROM_SUPER_MAGIC","","",N,N],[17,"PROC_SUPER_MAGIC","","",N,N],[17,"QNX4_SUPER_MAGIC","","",N,N],[17,"REISERFS_SUPER_MAGIC","","",N,N],[17,"SMB_SUPER_MAGIC","","",N,N],[17,"TMPFS_MAGIC","","",N,N],[17,"USBDEVICE_SUPER_MAGIC","","",N,N],[17,"VEOF","","",N,N],[17,"CPU_SETSIZE","","",N,N],[17,"PTRACE_TRACEME","","",N,N],[17,"PTRACE_PEEKTEXT","","",N,N],[17,"PTRACE_PEEKDATA","","",N,N],[17,"PTRACE_PEEKUSER","","",N,N],[17,"PTRACE_POKETEXT","","",N,N],[17,"PTRACE_POKEDATA","","",N,N],[17,"PTRACE_POKEUSER","","",N,N],[17,"PTRACE_CONT","","",N,N],[17,"PTRACE_KILL","","",N,N],[17,"PTRACE_SINGLESTEP","","",N,N],[17,"PTRACE_ATTACH","","",N,N],[17,"PTRACE_SYSCALL","","",N,N],[17,"PTRACE_SETOPTIONS","","",N,N],[17,"PTRACE_GETEVENTMSG","","",N,N],[17,"PTRACE_GETSIGINFO","","",N,N],[17,"PTRACE_SETSIGINFO","","",N,N],[17,"PTRACE_GETREGSET","","",N,N],[17,"PTRACE_SETREGSET","","",N,N],[17,"PTRACE_SEIZE","","",N,N],[17,"PTRACE_INTERRUPT","","",N,N],[17,"PTRACE_LISTEN","","",N,N],[17,"PTRACE_PEEKSIGINFO","","",N,N],[17,"EPOLLWAKEUP","","",N,N],[17,"MAP_HUGETLB","","",N,N],[17,"SEEK_DATA","","",N,N],[17,"SEEK_HOLE","","",N,N],[17,"TCSANOW","","",N,N],[17,"TCSADRAIN","","",N,N],[17,"TCSAFLUSH","","",N,N],[17,"TIOCLINUX","","",N,N],[17,"TIOCGSERIAL","","",N,N],[17,"RTLD_DEEPBIND","","",N,N],[17,"RTLD_GLOBAL","","",N,N],[17,"RTLD_NOLOAD","","",N,N],[17,"LINUX_REBOOT_MAGIC1","","",N,N],[17,"LINUX_REBOOT_MAGIC2","","",N,N],[17,"LINUX_REBOOT_MAGIC2A","","",N,N],[17,"LINUX_REBOOT_MAGIC2B","","",N,N],[17,"LINUX_REBOOT_MAGIC2C","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART","","",N,N],[17,"LINUX_REBOOT_CMD_HALT","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_ON","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART2","","",N,N],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",N,N],[17,"LINUX_REBOOT_CMD_KEXEC","","",N,N],[17,"NETLINK_ROUTE","","",N,N],[17,"NETLINK_UNUSED","","",N,N],[17,"NETLINK_USERSOCK","","",N,N],[17,"NETLINK_FIREWALL","","",N,N],[17,"NETLINK_SOCK_DIAG","","",N,N],[17,"NETLINK_NFLOG","","",N,N],[17,"NETLINK_XFRM","","",N,N],[17,"NETLINK_SELINUX","","",N,N],[17,"NETLINK_ISCSI","","",N,N],[17,"NETLINK_AUDIT","","",N,N],[17,"NETLINK_FIB_LOOKUP","","",N,N],[17,"NETLINK_CONNECTOR","","",N,N],[17,"NETLINK_NETFILTER","","",N,N],[17,"NETLINK_IP6_FW","","",N,N],[17,"NETLINK_DNRTMSG","","",N,N],[17,"NETLINK_KOBJECT_UEVENT","","",N,N],[17,"NETLINK_GENERIC","","",N,N],[17,"NETLINK_SCSITRANSPORT","","",N,N],[17,"NETLINK_ECRYPTFS","","",N,N],[17,"NETLINK_RDMA","","",N,N],[17,"NETLINK_CRYPTO","","",N,N],[17,"NETLINK_INET_DIAG","","",N,N],[17,"MAX_LINKS","","",N,N],[17,"NLM_F_REQUEST","","",N,N],[17,"NLM_F_MULTI","","",N,N],[17,"NLM_F_ACK","","",N,N],[17,"NLM_F_ECHO","","",N,N],[17,"NLM_F_DUMP_INTR","","",N,N],[17,"NLM_F_DUMP_FILTERED","","",N,N],[17,"NLM_F_ROOT","","",N,N],[17,"NLM_F_MATCH","","",N,N],[17,"NLM_F_ATOMIC","","",N,N],[17,"NLM_F_DUMP","","",N,N],[17,"NLM_F_REPLACE","","",N,N],[17,"NLM_F_EXCL","","",N,N],[17,"NLM_F_CREATE","","",N,N],[17,"NLM_F_APPEND","","",N,N],[17,"NETLINK_ADD_MEMBERSHIP","","",N,N],[17,"NETLINK_DROP_MEMBERSHIP","","",N,N],[17,"NETLINK_PKTINFO","","",N,N],[17,"NETLINK_BROADCAST_ERROR","","",N,N],[17,"NETLINK_NO_ENOBUFS","","",N,N],[17,"NETLINK_RX_RING","","",N,N],[17,"NETLINK_TX_RING","","",N,N],[17,"NETLINK_LISTEN_ALL_NSID","","",N,N],[17,"NETLINK_LIST_MEMBERSHIPS","","",N,N],[17,"NETLINK_CAP_ACK","","",N,N],[17,"NLA_F_NESTED","","",N,N],[17,"NLA_F_NET_BYTEORDER","","",N,N],[17,"NLA_TYPE_MASK","","",N,N],[17,"NLA_ALIGNTO","","",N,N],[17,"GENL_UNS_ADMIN_PERM","","",N,N],[17,"GENL_ID_VFS_DQUOT","","",N,N],[17,"GENL_ID_PMCRAID","","",N,N],[17,"TIOCM_LE","","",N,N],[17,"TIOCM_DTR","","",N,N],[17,"TIOCM_RTS","","",N,N],[17,"TIOCM_ST","","",N,N],[17,"TIOCM_SR","","",N,N],[17,"TIOCM_CTS","","",N,N],[17,"TIOCM_CAR","","",N,N],[17,"TIOCM_RNG","","",N,N],[17,"TIOCM_DSR","","",N,N],[17,"TIOCM_CD","","",N,N],[17,"TIOCM_RI","","",N,N],[17,"NF_NETDEV_INGRESS","","",N,N],[17,"NF_NETDEV_NUMHOOKS","","",N,N],[17,"NFPROTO_INET","","",N,N],[17,"NFPROTO_NETDEV","","",N,N],[17,"NFT_TABLE_MAXNAMELEN","","",N,N],[17,"NFT_CHAIN_MAXNAMELEN","","",N,N],[17,"NFT_SET_MAXNAMELEN","","",N,N],[17,"NFT_OBJ_MAXNAMELEN","","",N,N],[17,"NFT_USERDATA_MAXLEN","","",N,N],[17,"NFT_REG_VERDICT","","",N,N],[17,"NFT_REG_1","","",N,N],[17,"NFT_REG_2","","",N,N],[17,"NFT_REG_3","","",N,N],[17,"NFT_REG_4","","",N,N],[17,"__NFT_REG_MAX","","",N,N],[17,"NFT_REG32_00","","",N,N],[17,"NFT_REG32_01","","",N,N],[17,"NFT_REG32_02","","",N,N],[17,"NFT_REG32_03","","",N,N],[17,"NFT_REG32_04","","",N,N],[17,"NFT_REG32_05","","",N,N],[17,"NFT_REG32_06","","",N,N],[17,"NFT_REG32_07","","",N,N],[17,"NFT_REG32_08","","",N,N],[17,"NFT_REG32_09","","",N,N],[17,"NFT_REG32_10","","",N,N],[17,"NFT_REG32_11","","",N,N],[17,"NFT_REG32_12","","",N,N],[17,"NFT_REG32_13","","",N,N],[17,"NFT_REG32_14","","",N,N],[17,"NFT_REG32_15","","",N,N],[17,"NFT_REG_SIZE","","",N,N],[17,"NFT_REG32_SIZE","","",N,N],[17,"NFT_CONTINUE","","",N,N],[17,"NFT_BREAK","","",N,N],[17,"NFT_JUMP","","",N,N],[17,"NFT_GOTO","","",N,N],[17,"NFT_RETURN","","",N,N],[17,"NFT_MSG_NEWTABLE","","",N,N],[17,"NFT_MSG_GETTABLE","","",N,N],[17,"NFT_MSG_DELTABLE","","",N,N],[17,"NFT_MSG_NEWCHAIN","","",N,N],[17,"NFT_MSG_GETCHAIN","","",N,N],[17,"NFT_MSG_DELCHAIN","","",N,N],[17,"NFT_MSG_NEWRULE","","",N,N],[17,"NFT_MSG_GETRULE","","",N,N],[17,"NFT_MSG_DELRULE","","",N,N],[17,"NFT_MSG_NEWSET","","",N,N],[17,"NFT_MSG_GETSET","","",N,N],[17,"NFT_MSG_DELSET","","",N,N],[17,"NFT_MSG_NEWSETELEM","","",N,N],[17,"NFT_MSG_GETSETELEM","","",N,N],[17,"NFT_MSG_DELSETELEM","","",N,N],[17,"NFT_MSG_NEWGEN","","",N,N],[17,"NFT_MSG_GETGEN","","",N,N],[17,"NFT_MSG_TRACE","","",N,N],[17,"NFT_MSG_NEWOBJ","","",N,N],[17,"NFT_MSG_GETOBJ","","",N,N],[17,"NFT_MSG_DELOBJ","","",N,N],[17,"NFT_MSG_GETOBJ_RESET","","",N,N],[17,"NFT_MSG_MAX","","",N,N],[17,"NFT_SET_ANONYMOUS","","",N,N],[17,"NFT_SET_CONSTANT","","",N,N],[17,"NFT_SET_INTERVAL","","",N,N],[17,"NFT_SET_MAP","","",N,N],[17,"NFT_SET_TIMEOUT","","",N,N],[17,"NFT_SET_EVAL","","",N,N],[17,"NFT_SET_POL_PERFORMANCE","","",N,N],[17,"NFT_SET_POL_MEMORY","","",N,N],[17,"NFT_SET_ELEM_INTERVAL_END","","",N,N],[17,"NFT_DATA_VALUE","","",N,N],[17,"NFT_DATA_VERDICT","","",N,N],[17,"NFT_DATA_RESERVED_MASK","","",N,N],[17,"NFT_DATA_VALUE_MAXLEN","","",N,N],[17,"NFT_BYTEORDER_NTOH","","",N,N],[17,"NFT_BYTEORDER_HTON","","",N,N],[17,"NFT_CMP_EQ","","",N,N],[17,"NFT_CMP_NEQ","","",N,N],[17,"NFT_CMP_LT","","",N,N],[17,"NFT_CMP_LTE","","",N,N],[17,"NFT_CMP_GT","","",N,N],[17,"NFT_CMP_GTE","","",N,N],[17,"NFT_RANGE_EQ","","",N,N],[17,"NFT_RANGE_NEQ","","",N,N],[17,"NFT_LOOKUP_F_INV","","",N,N],[17,"NFT_DYNSET_OP_ADD","","",N,N],[17,"NFT_DYNSET_OP_UPDATE","","",N,N],[17,"NFT_DYNSET_F_INV","","",N,N],[17,"NFT_PAYLOAD_LL_HEADER","","",N,N],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",N,N],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",N,N],[17,"NFT_PAYLOAD_CSUM_NONE","","",N,N],[17,"NFT_PAYLOAD_CSUM_INET","","",N,N],[17,"NFT_META_LEN","","",N,N],[17,"NFT_META_PROTOCOL","","",N,N],[17,"NFT_META_PRIORITY","","",N,N],[17,"NFT_META_MARK","","",N,N],[17,"NFT_META_IIF","","",N,N],[17,"NFT_META_OIF","","",N,N],[17,"NFT_META_IIFNAME","","",N,N],[17,"NFT_META_OIFNAME","","",N,N],[17,"NFT_META_IIFTYPE","","",N,N],[17,"NFT_META_OIFTYPE","","",N,N],[17,"NFT_META_SKUID","","",N,N],[17,"NFT_META_SKGID","","",N,N],[17,"NFT_META_NFTRACE","","",N,N],[17,"NFT_META_RTCLASSID","","",N,N],[17,"NFT_META_SECMARK","","",N,N],[17,"NFT_META_NFPROTO","","",N,N],[17,"NFT_META_L4PROTO","","",N,N],[17,"NFT_META_BRI_IIFNAME","","",N,N],[17,"NFT_META_BRI_OIFNAME","","",N,N],[17,"NFT_META_PKTTYPE","","",N,N],[17,"NFT_META_CPU","","",N,N],[17,"NFT_META_IIFGROUP","","",N,N],[17,"NFT_META_OIFGROUP","","",N,N],[17,"NFT_META_CGROUP","","",N,N],[17,"NFT_META_PRANDOM","","",N,N],[17,"NFT_CT_STATE","","",N,N],[17,"NFT_CT_DIRECTION","","",N,N],[17,"NFT_CT_STATUS","","",N,N],[17,"NFT_CT_MARK","","",N,N],[17,"NFT_CT_SECMARK","","",N,N],[17,"NFT_CT_EXPIRATION","","",N,N],[17,"NFT_CT_HELPER","","",N,N],[17,"NFT_CT_L3PROTOCOL","","",N,N],[17,"NFT_CT_SRC","","",N,N],[17,"NFT_CT_DST","","",N,N],[17,"NFT_CT_PROTOCOL","","",N,N],[17,"NFT_CT_PROTO_SRC","","",N,N],[17,"NFT_CT_PROTO_DST","","",N,N],[17,"NFT_CT_LABELS","","",N,N],[17,"NFT_CT_PKTS","","",N,N],[17,"NFT_CT_BYTES","","",N,N],[17,"NFT_LIMIT_PKTS","","",N,N],[17,"NFT_LIMIT_PKT_BYTES","","",N,N],[17,"NFT_LIMIT_F_INV","","",N,N],[17,"NFT_QUEUE_FLAG_BYPASS","","",N,N],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",N,N],[17,"NFT_QUEUE_FLAG_MASK","","",N,N],[17,"NFT_QUOTA_F_INV","","",N,N],[17,"NFT_REJECT_ICMP_UNREACH","","",N,N],[17,"NFT_REJECT_TCP_RST","","",N,N],[17,"NFT_REJECT_ICMPX_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",N,N],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",N,N],[17,"NFT_NAT_SNAT","","",N,N],[17,"NFT_NAT_DNAT","","",N,N],[17,"NFT_TRACETYPE_UNSPEC","","",N,N],[17,"NFT_TRACETYPE_POLICY","","",N,N],[17,"NFT_TRACETYPE_RETURN","","",N,N],[17,"NFT_TRACETYPE_RULE","","",N,N],[17,"NFT_NG_INCREMENTAL","","",N,N],[17,"NFT_NG_RANDOM","","",N,N],[17,"PTHREAD_STACK_MIN","","",N,N],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",N,N],[17,"O_LARGEFILE","","",N,N],[17,"TIOCGSOFTCAR","","",N,N],[17,"TIOCSSOFTCAR","","",N,N],[17,"RLIMIT_NOFILE","","",N,N],[17,"RLIMIT_NPROC","","",N,N],[17,"O_APPEND","","",N,N],[17,"O_CREAT","","",N,N],[17,"O_EXCL","","",N,N],[17,"O_NOCTTY","","",N,N],[17,"O_NONBLOCK","","",N,N],[17,"O_SYNC","","",N,N],[17,"O_RSYNC","","",N,N],[17,"O_DSYNC","","",N,N],[17,"O_FSYNC","","",N,N],[17,"O_NOATIME","","",N,N],[17,"O_PATH","","",N,N],[17,"O_TMPFILE","","",N,N],[17,"MAP_GROWSDOWN","","",N,N],[17,"EDEADLK","","",N,N],[17,"ENAMETOOLONG","","",N,N],[17,"ENOLCK","","",N,N],[17,"ENOSYS","","",N,N],[17,"ENOTEMPTY","","",N,N],[17,"ELOOP","","",N,N],[17,"ENOMSG","","",N,N],[17,"EIDRM","","",N,N],[17,"ECHRNG","","",N,N],[17,"EL2NSYNC","","",N,N],[17,"EL3HLT","","",N,N],[17,"EL3RST","","",N,N],[17,"ELNRNG","","",N,N],[17,"EUNATCH","","",N,N],[17,"ENOCSI","","",N,N],[17,"EL2HLT","","",N,N],[17,"EBADE","","",N,N],[17,"EBADR","","",N,N],[17,"EXFULL","","",N,N],[17,"ENOANO","","",N,N],[17,"EBADRQC","","",N,N],[17,"EBADSLT","","",N,N],[17,"EMULTIHOP","","",N,N],[17,"EOVERFLOW","","",N,N],[17,"ENOTUNIQ","","",N,N],[17,"EBADFD","","",N,N],[17,"EBADMSG","","",N,N],[17,"EREMCHG","","",N,N],[17,"ELIBACC","","",N,N],[17,"ELIBBAD","","",N,N],[17,"ELIBSCN","","",N,N],[17,"ELIBMAX","","",N,N],[17,"ELIBEXEC","","",N,N],[17,"EILSEQ","","",N,N],[17,"ERESTART","","",N,N],[17,"ESTRPIPE","","",N,N],[17,"EUSERS","","",N,N],[17,"ENOTSOCK","","",N,N],[17,"EDESTADDRREQ","","",N,N],[17,"EMSGSIZE","","",N,N],[17,"EPROTOTYPE","","",N,N],[17,"ENOPROTOOPT","","",N,N],[17,"EPROTONOSUPPORT","","",N,N],[17,"ESOCKTNOSUPPORT","","",N,N],[17,"EOPNOTSUPP","","",N,N],[17,"EPFNOSUPPORT","","",N,N],[17,"EAFNOSUPPORT","","",N,N],[17,"EADDRINUSE","","",N,N],[17,"EADDRNOTAVAIL","","",N,N],[17,"ENETDOWN","","",N,N],[17,"ENETUNREACH","","",N,N],[17,"ENETRESET","","",N,N],[17,"ECONNABORTED","","",N,N],[17,"ECONNRESET","","",N,N],[17,"ENOBUFS","","",N,N],[17,"EISCONN","","",N,N],[17,"ENOTCONN","","",N,N],[17,"ESHUTDOWN","","",N,N],[17,"ETOOMANYREFS","","",N,N],[17,"ETIMEDOUT","","",N,N],[17,"ECONNREFUSED","","",N,N],[17,"EHOSTDOWN","","",N,N],[17,"EHOSTUNREACH","","",N,N],[17,"EALREADY","","",N,N],[17,"EINPROGRESS","","",N,N],[17,"ESTALE","","",N,N],[17,"EDQUOT","","",N,N],[17,"ENOMEDIUM","","",N,N],[17,"EMEDIUMTYPE","","",N,N],[17,"ECANCELED","","",N,N],[17,"ENOKEY","","",N,N],[17,"EKEYEXPIRED","","",N,N],[17,"EKEYREVOKED","","",N,N],[17,"EKEYREJECTED","","",N,N],[17,"EOWNERDEAD","","",N,N],[17,"ENOTRECOVERABLE","","",N,N],[17,"EHWPOISON","","",N,N],[17,"ERFKILL","","",N,N],[17,"SOL_SOCKET","","",N,N],[17,"SO_REUSEADDR","","",N,N],[17,"SO_TYPE","","",N,N],[17,"SO_ERROR","","",N,N],[17,"SO_DONTROUTE","","",N,N],[17,"SO_BROADCAST","","",N,N],[17,"SO_SNDBUF","","",N,N],[17,"SO_RCVBUF","","",N,N],[17,"SO_SNDBUFFORCE","","",N,N],[17,"SO_RCVBUFFORCE","","",N,N],[17,"SO_KEEPALIVE","","",N,N],[17,"SO_OOBINLINE","","",N,N],[17,"SO_NO_CHECK","","",N,N],[17,"SO_PRIORITY","","",N,N],[17,"SO_LINGER","","",N,N],[17,"SO_BSDCOMPAT","","",N,N],[17,"SO_REUSEPORT","","",N,N],[17,"SO_PASSCRED","","",N,N],[17,"SO_PEERCRED","","",N,N],[17,"SO_RCVLOWAT","","",N,N],[17,"SO_SNDLOWAT","","",N,N],[17,"SO_RCVTIMEO","","",N,N],[17,"SO_SNDTIMEO","","",N,N],[17,"SO_SECURITY_AUTHENTICATION","","",N,N],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",N,N],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",N,N],[17,"SO_BINDTODEVICE","","",N,N],[17,"SO_ATTACH_FILTER","","",N,N],[17,"SO_DETACH_FILTER","","",N,N],[17,"SO_GET_FILTER","","",N,N],[17,"SO_PEERNAME","","",N,N],[17,"SO_TIMESTAMP","","",N,N],[17,"SO_ACCEPTCONN","","",N,N],[17,"SO_PEERSEC","","",N,N],[17,"SO_PASSSEC","","",N,N],[17,"SO_TIMESTAMPNS","","",N,N],[17,"SCM_TIMESTAMPNS","","",N,N],[17,"SO_MARK","","",N,N],[17,"SO_TIMESTAMPING","","",N,N],[17,"SCM_TIMESTAMPING","","",N,N],[17,"SO_PROTOCOL","","",N,N],[17,"SO_DOMAIN","","",N,N],[17,"SO_RXQ_OVFL","","",N,N],[17,"SO_WIFI_STATUS","","",N,N],[17,"SCM_WIFI_STATUS","","",N,N],[17,"SO_PEEK_OFF","","",N,N],[17,"SO_NOFCS","","",N,N],[17,"SO_LOCK_FILTER","","",N,N],[17,"SO_SELECT_ERR_QUEUE","","",N,N],[17,"SO_BUSY_POLL","","",N,N],[17,"SO_MAX_PACING_RATE","","",N,N],[17,"SO_BPF_EXTENSIONS","","",N,N],[17,"SO_INCOMING_CPU","","",N,N],[17,"SO_ATTACH_BPF","","",N,N],[17,"SO_DETACH_BPF","","",N,N],[17,"SA_ONSTACK","","",N,N],[17,"SA_SIGINFO","","",N,N],[17,"SA_NOCLDWAIT","","",N,N],[17,"SIGCHLD","","",N,N],[17,"SIGBUS","","",N,N],[17,"SIGUSR1","","",N,N],[17,"SIGUSR2","","",N,N],[17,"SIGCONT","","",N,N],[17,"SIGSTOP","","",N,N],[17,"SIGTSTP","","",N,N],[17,"SIGURG","","",N,N],[17,"SIGIO","","",N,N],[17,"SIGSYS","","",N,N],[17,"SIGSTKFLT","","",N,N],[17,"SIGUNUSED","","",N,N],[17,"SIGPOLL","","",N,N],[17,"SIGPWR","","",N,N],[17,"SIG_SETMASK","","",N,N],[17,"SIG_BLOCK","","",N,N],[17,"SIG_UNBLOCK","","",N,N],[17,"POLLWRNORM","","",N,N],[17,"POLLWRBAND","","",N,N],[17,"O_ASYNC","","",N,N],[17,"O_NDELAY","","",N,N],[17,"PTRACE_DETACH","","",N,N],[17,"EFD_NONBLOCK","","",N,N],[17,"F_GETLK","","",N,N],[17,"F_GETOWN","","",N,N],[17,"F_SETOWN","","",N,N],[17,"F_SETLK","","",N,N],[17,"F_SETLKW","","",N,N],[17,"F_RDLCK","","",N,N],[17,"F_WRLCK","","",N,N],[17,"F_UNLCK","","",N,N],[17,"SFD_NONBLOCK","","",N,N],[17,"TIOCEXCL","","",N,N],[17,"TIOCNXCL","","",N,N],[17,"TIOCSCTTY","","",N,N],[17,"TIOCSTI","","",N,N],[17,"TIOCMGET","","",N,N],[17,"TIOCMBIS","","",N,N],[17,"TIOCMBIC","","",N,N],[17,"TIOCMSET","","",N,N],[17,"TIOCCONS","","",N,N],[17,"SFD_CLOEXEC","","",N,N],[17,"NCCS","","",N,N],[17,"O_TRUNC","","",N,N],[17,"O_CLOEXEC","","",N,N],[17,"EBFONT","","",N,N],[17,"ENOSTR","","",N,N],[17,"ENODATA","","",N,N],[17,"ETIME","","",N,N],[17,"ENOSR","","",N,N],[17,"ENONET","","",N,N],[17,"ENOPKG","","",N,N],[17,"EREMOTE","","",N,N],[17,"ENOLINK","","",N,N],[17,"EADV","","",N,N],[17,"ESRMNT","","",N,N],[17,"ECOMM","","",N,N],[17,"EPROTO","","",N,N],[17,"EDOTDOT","","",N,N],[17,"SA_NODEFER","","",N,N],[17,"SA_RESETHAND","","",N,N],[17,"SA_RESTART","","",N,N],[17,"SA_NOCLDSTOP","","",N,N],[17,"EPOLL_CLOEXEC","","",N,N],[17,"EFD_CLOEXEC","","",N,N],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",N,N],[17,"O_DIRECT","","",N,N],[17,"O_DIRECTORY","","",N,N],[17,"O_NOFOLLOW","","",N,N],[17,"MAP_LOCKED","","",N,N],[17,"MAP_NORESERVE","","",N,N],[17,"MAP_32BIT","","",N,N],[17,"EDEADLOCK","","",N,N],[17,"FIOCLEX","","",N,N],[17,"FIONBIO","","",N,N],[17,"PTRACE_GETFPREGS","","",N,N],[17,"PTRACE_SETFPREGS","","",N,N],[17,"PTRACE_GETFPXREGS","","",N,N],[17,"PTRACE_SETFPXREGS","","",N,N],[17,"PTRACE_GETREGS","","",N,N],[17,"PTRACE_SETREGS","","",N,N],[17,"PTRACE_PEEKSIGINFO_SHARED","","",N,N],[17,"MCL_CURRENT","","",N,N],[17,"MCL_FUTURE","","",N,N],[17,"SIGSTKSZ","","",N,N],[17,"MINSIGSTKSZ","","",N,N],[17,"CBAUD","","",N,N],[17,"TAB1","","",N,N],[17,"TAB2","","",N,N],[17,"TAB3","","",N,N],[17,"CR1","","",N,N],[17,"CR2","","",N,N],[17,"CR3","","",N,N],[17,"FF1","","",N,N],[17,"BS1","","",N,N],[17,"VT1","","",N,N],[17,"VWERASE","","",N,N],[17,"VREPRINT","","",N,N],[17,"VSUSP","","",N,N],[17,"VSTART","","",N,N],[17,"VSTOP","","",N,N],[17,"VDISCARD","","",N,N],[17,"VTIME","","",N,N],[17,"IXON","","",N,N],[17,"IXOFF","","",N,N],[17,"ONLCR","","",N,N],[17,"CSIZE","","",N,N],[17,"CS6","","",N,N],[17,"CS7","","",N,N],[17,"CS8","","",N,N],[17,"CSTOPB","","",N,N],[17,"CREAD","","",N,N],[17,"PARENB","","",N,N],[17,"PARODD","","",N,N],[17,"HUPCL","","",N,N],[17,"CLOCAL","","",N,N],[17,"ECHOKE","","",N,N],[17,"ECHOE","","",N,N],[17,"ECHOK","","",N,N],[17,"ECHONL","","",N,N],[17,"ECHOPRT","","",N,N],[17,"ECHOCTL","","",N,N],[17,"ISIG","","",N,N],[17,"ICANON","","",N,N],[17,"PENDIN","","",N,N],[17,"NOFLSH","","",N,N],[17,"CIBAUD","","",N,N],[17,"CBAUDEX","","",N,N],[17,"VSWTC","","",N,N],[17,"OLCUC","","",N,N],[17,"NLDLY","","",N,N],[17,"CRDLY","","",N,N],[17,"TABDLY","","",N,N],[17,"BSDLY","","",N,N],[17,"FFDLY","","",N,N],[17,"VTDLY","","",N,N],[17,"XTABS","","",N,N],[17,"B0","","",N,N],[17,"B50","","",N,N],[17,"B75","","",N,N],[17,"B110","","",N,N],[17,"B134","","",N,N],[17,"B150","","",N,N],[17,"B200","","",N,N],[17,"B300","","",N,N],[17,"B600","","",N,N],[17,"B1200","","",N,N],[17,"B1800","","",N,N],[17,"B2400","","",N,N],[17,"B4800","","",N,N],[17,"B9600","","",N,N],[17,"B19200","","",N,N],[17,"B38400","","",N,N],[17,"EXTA","","",N,N],[17,"EXTB","","",N,N],[17,"BOTHER","","",N,N],[17,"B57600","","",N,N],[17,"B115200","","",N,N],[17,"B230400","","",N,N],[17,"B460800","","",N,N],[17,"B500000","","",N,N],[17,"B576000","","",N,N],[17,"B921600","","",N,N],[17,"B1000000","","",N,N],[17,"B1152000","","",N,N],[17,"B1500000","","",N,N],[17,"B2000000","","",N,N],[17,"B2500000","","",N,N],[17,"B3000000","","",N,N],[17,"B3500000","","",N,N],[17,"B4000000","","",N,N],[17,"VEOL","","",N,N],[17,"VEOL2","","",N,N],[17,"VMIN","","",N,N],[17,"IEXTEN","","",N,N],[17,"TOSTOP","","",N,N],[17,"FLUSHO","","",N,N],[17,"EXTPROC","","",N,N],[17,"TCGETS","","",N,N],[17,"TCSETS","","",N,N],[17,"TCSETSW","","",N,N],[17,"TCSETSF","","",N,N],[17,"TCGETA","","",N,N],[17,"TCSETA","","",N,N],[17,"TCSETAW","","",N,N],[17,"TCSETAF","","",N,N],[17,"TCSBRK","","",N,N],[17,"TCXONC","","",N,N],[17,"TCFLSH","","",N,N],[17,"TIOCINQ","","",N,N],[17,"TIOCGPGRP","","",N,N],[17,"TIOCSPGRP","","",N,N],[17,"TIOCOUTQ","","",N,N],[17,"TIOCGWINSZ","","",N,N],[17,"TIOCSWINSZ","","",N,N],[17,"FIONREAD","","",N,N],[17,"R15","","",N,N],[17,"R14","","",N,N],[17,"R13","","",N,N],[17,"R12","","",N,N],[17,"RBP","","",N,N],[17,"RBX","","",N,N],[17,"R11","","",N,N],[17,"R10","","",N,N],[17,"R9","","",N,N],[17,"R8","","",N,N],[17,"RAX","","",N,N],[17,"RCX","","",N,N],[17,"RDX","","",N,N],[17,"RSI","","",N,N],[17,"RDI","","",N,N],[17,"ORIG_RAX","","",N,N],[17,"RIP","","",N,N],[17,"CS","","",N,N],[17,"EFLAGS","","",N,N],[17,"RSP","","",N,N],[17,"SS","","",N,N],[17,"FS_BASE","","",N,N],[17,"GS_BASE","","",N,N],[17,"DS","","",N,N],[17,"ES","","",N,N],[17,"FS","","",N,N],[17,"GS","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",N,N],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"SYS_read","","",N,N],[17,"SYS_write","","",N,N],[17,"SYS_open","","",N,N],[17,"SYS_close","","",N,N],[17,"SYS_stat","","",N,N],[17,"SYS_fstat","","",N,N],[17,"SYS_lstat","","",N,N],[17,"SYS_poll","","",N,N],[17,"SYS_lseek","","",N,N],[17,"SYS_mmap","","",N,N],[17,"SYS_mprotect","","",N,N],[17,"SYS_munmap","","",N,N],[17,"SYS_brk","","",N,N],[17,"SYS_rt_sigaction","","",N,N],[17,"SYS_rt_sigprocmask","","",N,N],[17,"SYS_rt_sigreturn","","",N,N],[17,"SYS_ioctl","","",N,N],[17,"SYS_pread64","","",N,N],[17,"SYS_pwrite64","","",N,N],[17,"SYS_readv","","",N,N],[17,"SYS_writev","","",N,N],[17,"SYS_access","","",N,N],[17,"SYS_pipe","","",N,N],[17,"SYS_select","","",N,N],[17,"SYS_sched_yield","","",N,N],[17,"SYS_mremap","","",N,N],[17,"SYS_msync","","",N,N],[17,"SYS_mincore","","",N,N],[17,"SYS_madvise","","",N,N],[17,"SYS_shmget","","",N,N],[17,"SYS_shmat","","",N,N],[17,"SYS_shmctl","","",N,N],[17,"SYS_dup","","",N,N],[17,"SYS_dup2","","",N,N],[17,"SYS_pause","","",N,N],[17,"SYS_nanosleep","","",N,N],[17,"SYS_getitimer","","",N,N],[17,"SYS_alarm","","",N,N],[17,"SYS_setitimer","","",N,N],[17,"SYS_getpid","","",N,N],[17,"SYS_sendfile","","",N,N],[17,"SYS_socket","","",N,N],[17,"SYS_connect","","",N,N],[17,"SYS_accept","","",N,N],[17,"SYS_sendto","","",N,N],[17,"SYS_recvfrom","","",N,N],[17,"SYS_sendmsg","","",N,N],[17,"SYS_recvmsg","","",N,N],[17,"SYS_shutdown","","",N,N],[17,"SYS_bind","","",N,N],[17,"SYS_listen","","",N,N],[17,"SYS_getsockname","","",N,N],[17,"SYS_getpeername","","",N,N],[17,"SYS_socketpair","","",N,N],[17,"SYS_setsockopt","","",N,N],[17,"SYS_getsockopt","","",N,N],[17,"SYS_clone","","",N,N],[17,"SYS_fork","","",N,N],[17,"SYS_vfork","","",N,N],[17,"SYS_execve","","",N,N],[17,"SYS_exit","","",N,N],[17,"SYS_wait4","","",N,N],[17,"SYS_kill","","",N,N],[17,"SYS_uname","","",N,N],[17,"SYS_semget","","",N,N],[17,"SYS_semop","","",N,N],[17,"SYS_semctl","","",N,N],[17,"SYS_shmdt","","",N,N],[17,"SYS_msgget","","",N,N],[17,"SYS_msgsnd","","",N,N],[17,"SYS_msgrcv","","",N,N],[17,"SYS_msgctl","","",N,N],[17,"SYS_fcntl","","",N,N],[17,"SYS_flock","","",N,N],[17,"SYS_fsync","","",N,N],[17,"SYS_fdatasync","","",N,N],[17,"SYS_truncate","","",N,N],[17,"SYS_ftruncate","","",N,N],[17,"SYS_getdents","","",N,N],[17,"SYS_getcwd","","",N,N],[17,"SYS_chdir","","",N,N],[17,"SYS_fchdir","","",N,N],[17,"SYS_rename","","",N,N],[17,"SYS_mkdir","","",N,N],[17,"SYS_rmdir","","",N,N],[17,"SYS_creat","","",N,N],[17,"SYS_link","","",N,N],[17,"SYS_unlink","","",N,N],[17,"SYS_symlink","","",N,N],[17,"SYS_readlink","","",N,N],[17,"SYS_chmod","","",N,N],[17,"SYS_fchmod","","",N,N],[17,"SYS_chown","","",N,N],[17,"SYS_fchown","","",N,N],[17,"SYS_lchown","","",N,N],[17,"SYS_umask","","",N,N],[17,"SYS_gettimeofday","","",N,N],[17,"SYS_getrlimit","","",N,N],[17,"SYS_getrusage","","",N,N],[17,"SYS_sysinfo","","",N,N],[17,"SYS_times","","",N,N],[17,"SYS_ptrace","","",N,N],[17,"SYS_getuid","","",N,N],[17,"SYS_syslog","","",N,N],[17,"SYS_getgid","","",N,N],[17,"SYS_setuid","","",N,N],[17,"SYS_setgid","","",N,N],[17,"SYS_geteuid","","",N,N],[17,"SYS_getegid","","",N,N],[17,"SYS_setpgid","","",N,N],[17,"SYS_getppid","","",N,N],[17,"SYS_getpgrp","","",N,N],[17,"SYS_setsid","","",N,N],[17,"SYS_setreuid","","",N,N],[17,"SYS_setregid","","",N,N],[17,"SYS_getgroups","","",N,N],[17,"SYS_setgroups","","",N,N],[17,"SYS_setresuid","","",N,N],[17,"SYS_getresuid","","",N,N],[17,"SYS_setresgid","","",N,N],[17,"SYS_getresgid","","",N,N],[17,"SYS_getpgid","","",N,N],[17,"SYS_setfsuid","","",N,N],[17,"SYS_setfsgid","","",N,N],[17,"SYS_getsid","","",N,N],[17,"SYS_capget","","",N,N],[17,"SYS_capset","","",N,N],[17,"SYS_rt_sigpending","","",N,N],[17,"SYS_rt_sigtimedwait","","",N,N],[17,"SYS_rt_sigqueueinfo","","",N,N],[17,"SYS_rt_sigsuspend","","",N,N],[17,"SYS_sigaltstack","","",N,N],[17,"SYS_utime","","",N,N],[17,"SYS_mknod","","",N,N],[17,"SYS_uselib","","",N,N],[17,"SYS_personality","","",N,N],[17,"SYS_ustat","","",N,N],[17,"SYS_statfs","","",N,N],[17,"SYS_fstatfs","","",N,N],[17,"SYS_sysfs","","",N,N],[17,"SYS_getpriority","","",N,N],[17,"SYS_setpriority","","",N,N],[17,"SYS_sched_setparam","","",N,N],[17,"SYS_sched_getparam","","",N,N],[17,"SYS_sched_setscheduler","","",N,N],[17,"SYS_sched_getscheduler","","",N,N],[17,"SYS_sched_get_priority_max","","",N,N],[17,"SYS_sched_get_priority_min","","",N,N],[17,"SYS_sched_rr_get_interval","","",N,N],[17,"SYS_mlock","","",N,N],[17,"SYS_munlock","","",N,N],[17,"SYS_mlockall","","",N,N],[17,"SYS_munlockall","","",N,N],[17,"SYS_vhangup","","",N,N],[17,"SYS_modify_ldt","","",N,N],[17,"SYS_pivot_root","","",N,N],[17,"SYS__sysctl","","",N,N],[17,"SYS_prctl","","",N,N],[17,"SYS_arch_prctl","","",N,N],[17,"SYS_adjtimex","","",N,N],[17,"SYS_setrlimit","","",N,N],[17,"SYS_chroot","","",N,N],[17,"SYS_sync","","",N,N],[17,"SYS_acct","","",N,N],[17,"SYS_settimeofday","","",N,N],[17,"SYS_mount","","",N,N],[17,"SYS_umount2","","",N,N],[17,"SYS_swapon","","",N,N],[17,"SYS_swapoff","","",N,N],[17,"SYS_reboot","","",N,N],[17,"SYS_sethostname","","",N,N],[17,"SYS_setdomainname","","",N,N],[17,"SYS_iopl","","",N,N],[17,"SYS_ioperm","","",N,N],[17,"SYS_create_module","","",N,N],[17,"SYS_init_module","","",N,N],[17,"SYS_delete_module","","",N,N],[17,"SYS_get_kernel_syms","","",N,N],[17,"SYS_query_module","","",N,N],[17,"SYS_quotactl","","",N,N],[17,"SYS_nfsservctl","","",N,N],[17,"SYS_getpmsg","","",N,N],[17,"SYS_putpmsg","","",N,N],[17,"SYS_afs_syscall","","",N,N],[17,"SYS_tuxcall","","",N,N],[17,"SYS_security","","",N,N],[17,"SYS_gettid","","",N,N],[17,"SYS_readahead","","",N,N],[17,"SYS_setxattr","","",N,N],[17,"SYS_lsetxattr","","",N,N],[17,"SYS_fsetxattr","","",N,N],[17,"SYS_getxattr","","",N,N],[17,"SYS_lgetxattr","","",N,N],[17,"SYS_fgetxattr","","",N,N],[17,"SYS_listxattr","","",N,N],[17,"SYS_llistxattr","","",N,N],[17,"SYS_flistxattr","","",N,N],[17,"SYS_removexattr","","",N,N],[17,"SYS_lremovexattr","","",N,N],[17,"SYS_fremovexattr","","",N,N],[17,"SYS_tkill","","",N,N],[17,"SYS_time","","",N,N],[17,"SYS_futex","","",N,N],[17,"SYS_sched_setaffinity","","",N,N],[17,"SYS_sched_getaffinity","","",N,N],[17,"SYS_set_thread_area","","",N,N],[17,"SYS_io_setup","","",N,N],[17,"SYS_io_destroy","","",N,N],[17,"SYS_io_getevents","","",N,N],[17,"SYS_io_submit","","",N,N],[17,"SYS_io_cancel","","",N,N],[17,"SYS_get_thread_area","","",N,N],[17,"SYS_lookup_dcookie","","",N,N],[17,"SYS_epoll_create","","",N,N],[17,"SYS_epoll_ctl_old","","",N,N],[17,"SYS_epoll_wait_old","","",N,N],[17,"SYS_remap_file_pages","","",N,N],[17,"SYS_getdents64","","",N,N],[17,"SYS_set_tid_address","","",N,N],[17,"SYS_restart_syscall","","",N,N],[17,"SYS_semtimedop","","",N,N],[17,"SYS_fadvise64","","",N,N],[17,"SYS_timer_create","","",N,N],[17,"SYS_timer_settime","","",N,N],[17,"SYS_timer_gettime","","",N,N],[17,"SYS_timer_getoverrun","","",N,N],[17,"SYS_timer_delete","","",N,N],[17,"SYS_clock_settime","","",N,N],[17,"SYS_clock_gettime","","",N,N],[17,"SYS_clock_getres","","",N,N],[17,"SYS_clock_nanosleep","","",N,N],[17,"SYS_exit_group","","",N,N],[17,"SYS_epoll_wait","","",N,N],[17,"SYS_epoll_ctl","","",N,N],[17,"SYS_tgkill","","",N,N],[17,"SYS_utimes","","",N,N],[17,"SYS_vserver","","",N,N],[17,"SYS_mbind","","",N,N],[17,"SYS_set_mempolicy","","",N,N],[17,"SYS_get_mempolicy","","",N,N],[17,"SYS_mq_open","","",N,N],[17,"SYS_mq_unlink","","",N,N],[17,"SYS_mq_timedsend","","",N,N],[17,"SYS_mq_timedreceive","","",N,N],[17,"SYS_mq_notify","","",N,N],[17,"SYS_mq_getsetattr","","",N,N],[17,"SYS_kexec_load","","",N,N],[17,"SYS_waitid","","",N,N],[17,"SYS_add_key","","",N,N],[17,"SYS_request_key","","",N,N],[17,"SYS_keyctl","","",N,N],[17,"SYS_ioprio_set","","",N,N],[17,"SYS_ioprio_get","","",N,N],[17,"SYS_inotify_init","","",N,N],[17,"SYS_inotify_add_watch","","",N,N],[17,"SYS_inotify_rm_watch","","",N,N],[17,"SYS_migrate_pages","","",N,N],[17,"SYS_openat","","",N,N],[17,"SYS_mkdirat","","",N,N],[17,"SYS_mknodat","","",N,N],[17,"SYS_fchownat","","",N,N],[17,"SYS_futimesat","","",N,N],[17,"SYS_newfstatat","","",N,N],[17,"SYS_unlinkat","","",N,N],[17,"SYS_renameat","","",N,N],[17,"SYS_linkat","","",N,N],[17,"SYS_symlinkat","","",N,N],[17,"SYS_readlinkat","","",N,N],[17,"SYS_fchmodat","","",N,N],[17,"SYS_faccessat","","",N,N],[17,"SYS_pselect6","","",N,N],[17,"SYS_ppoll","","",N,N],[17,"SYS_unshare","","",N,N],[17,"SYS_set_robust_list","","",N,N],[17,"SYS_get_robust_list","","",N,N],[17,"SYS_splice","","",N,N],[17,"SYS_tee","","",N,N],[17,"SYS_sync_file_range","","",N,N],[17,"SYS_vmsplice","","",N,N],[17,"SYS_move_pages","","",N,N],[17,"SYS_utimensat","","",N,N],[17,"SYS_epoll_pwait","","",N,N],[17,"SYS_signalfd","","",N,N],[17,"SYS_timerfd_create","","",N,N],[17,"SYS_eventfd","","",N,N],[17,"SYS_fallocate","","",N,N],[17,"SYS_timerfd_settime","","",N,N],[17,"SYS_timerfd_gettime","","",N,N],[17,"SYS_accept4","","",N,N],[17,"SYS_signalfd4","","",N,N],[17,"SYS_eventfd2","","",N,N],[17,"SYS_epoll_create1","","",N,N],[17,"SYS_dup3","","",N,N],[17,"SYS_pipe2","","",N,N],[17,"SYS_inotify_init1","","",N,N],[17,"SYS_preadv","","",N,N],[17,"SYS_pwritev","","",N,N],[17,"SYS_rt_tgsigqueueinfo","","",N,N],[17,"SYS_perf_event_open","","",N,N],[17,"SYS_recvmmsg","","",N,N],[17,"SYS_fanotify_init","","",N,N],[17,"SYS_fanotify_mark","","",N,N],[17,"SYS_prlimit64","","",N,N],[17,"SYS_name_to_handle_at","","",N,N],[17,"SYS_open_by_handle_at","","",N,N],[17,"SYS_clock_adjtime","","",N,N],[17,"SYS_syncfs","","",N,N],[17,"SYS_sendmmsg","","",N,N],[17,"SYS_setns","","",N,N],[17,"SYS_getcpu","","",N,N],[17,"SYS_process_vm_readv","","",N,N],[17,"SYS_process_vm_writev","","",N,N],[17,"SYS_kcmp","","",N,N],[17,"SYS_finit_module","","",N,N],[17,"SYS_sched_setattr","","",N,N],[17,"SYS_sched_getattr","","",N,N],[17,"SYS_renameat2","","",N,N],[17,"SYS_seccomp","","",N,N],[17,"SYS_getrandom","","",N,N],[17,"SYS_memfd_create","","",N,N],[17,"SYS_kexec_file_load","","",N,N],[17,"SYS_bpf","","",N,N],[17,"SYS_execveat","","",N,N],[17,"SYS_userfaultfd","","",N,N],[17,"SYS_membarrier","","",N,N],[17,"SYS_mlock2","","",N,N],[17,"SYS_copy_file_range","","",N,N],[17,"SYS_preadv2","","",N,N],[17,"SYS_pwritev2","","",N,N],[17,"SYS_pkey_mprotect","","",N,N],[17,"SYS_pkey_alloc","","",N,N],[17,"SYS_pkey_free","","",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,N],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,N],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,N],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,N],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,N],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,N],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,N],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,N],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,N],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,N],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,N],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,N],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,N],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,N],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,N],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"],[3,"in6_rtmsg"],[4,"c_void"],[4,"FILE"],[4,"fpos_t"],[4,"DIR"],[4,"locale_t"],[4,"timezone"],[4,"fpos64_t"]]};
searchIndex["libsqlite3_sys"]={"doc":"","items":[[3,"Error","libsqlite3_sys","",N,N],[12,"code","","",0,N],[12,"extended_code","","",0,N],[3,"sqlite3","","",N,N],[3,"sqlite3_file","","",N,N],[12,"pMethods","","",1,N],[3,"sqlite3_file_sqlite3_io_methods","","",N,N],[12,"iVersion","","",2,N],[12,"xClose","","",2,N],[12,"xRead","","",2,N],[12,"xWrite","","",2,N],[12,"xTruncate","","",2,N],[12,"xSync","","",2,N],[12,"xFileSize","","",2,N],[12,"xLock","","",2,N],[12,"xUnlock","","",2,N],[12,"xCheckReservedLock","","",2,N],[12,"xFileControl","","",2,N],[12,"xSectorSize","","",2,N],[12,"xDeviceCharacteristics","","",2,N],[12,"xShmMap","","",2,N],[12,"xShmLock","","",2,N],[12,"xShmBarrier","","",2,N],[12,"xShmUnmap","","",2,N],[3,"sqlite3_mutex","","",N,N],[3,"sqlite3_vfs","","",N,N],[12,"iVersion","","",3,N],[12,"szOsFile","","",3,N],[12,"mxPathname","","",3,N],[12,"pNext","","",3,N],[12,"zName","","",3,N],[12,"pAppData","","",3,N],[12,"xOpen","","",3,N],[12,"xDelete","","",3,N],[12,"xAccess","","",3,N],[12,"xFullPathname","","",3,N],[12,"xDlOpen","","",3,N],[12,"xDlError","","",3,N],[12,"xDlSym","","",3,N],[12,"xDlClose","","",3,N],[12,"xRandomness","","",3,N],[12,"xSleep","","",3,N],[12,"xCurrentTime","","",3,N],[12,"xGetLastError","","",3,N],[12,"xCurrentTimeInt64","","",3,N],[12,"xSetSystemCall","","",3,N],[12,"xGetSystemCall","","",3,N],[12,"xNextSystemCall","","",3,N],[3,"sqlite3_mem_methods","","",N,N],[12,"xMalloc","","",4,N],[12,"xFree","","",4,N],[12,"xRealloc","","",4,N],[12,"xSize","","",4,N],[12,"xRoundup","","",4,N],[12,"xInit","","",4,N],[12,"xShutdown","","",4,N],[12,"pAppData","","",4,N],[3,"sqlite3_stmt","","",N,N],[3,"Mem","","",N,N],[3,"sqlite3_context","","",N,N],[3,"sqlite3_vtab","","",N,N],[12,"pModule","","",5,N],[12,"nRef","","",5,N],[12,"zErrMsg","","",5,N],[3,"sqlite3_index_info","","",N,N],[12,"nConstraint","","",6,N],[12,"aConstraint","","",6,N],[12,"nOrderBy","","",6,N],[12,"aOrderBy","","",6,N],[12,"aConstraintUsage","","",6,N],[12,"idxNum","","",6,N],[12,"idxStr","","",6,N],[12,"needToFreeIdxStr","","",6,N],[12,"orderByConsumed","","",6,N],[12,"estimatedCost","","",6,N],[3,"sqlite3_index_info_sqlite3_index_constraint","","",N,N],[12,"iColumn","","",7,N],[12,"op","","",7,N],[12,"usable","","",7,N],[12,"iTermOffset","","",7,N],[3,"sqlite3_index_info_sqlite3_index_orderby","","",N,N],[12,"iColumn","","",8,N],[12,"desc","","",8,N],[3,"sqlite3_index_info_sqlite3_index_constraint_usage","","",N,N],[12,"argvIndex","","",9,N],[12,"omit","","",9,N],[3,"sqlite3_vtab_cursor","","",N,N],[12,"pVtab","","",10,N],[3,"sqlite3_module","","",N,N],[12,"iVersion","","",11,N],[12,"xCreate","","",11,N],[12,"xConnect","","",11,N],[12,"xBestIndex","","",11,N],[12,"xDisconnect","","",11,N],[12,"xDestroy","","",11,N],[12,"xOpen","","",11,N],[12,"xClose","","",11,N],[12,"xFilter","","",11,N],[12,"xNext","","",11,N],[12,"xEof","","",11,N],[12,"xColumn","","",11,N],[12,"xRowid","","",11,N],[12,"xUpdate","","",11,N],[12,"xBegin","","",11,N],[12,"xSync","","",11,N],[12,"xCommit","","",11,N],[12,"xRollback","","",11,N],[12,"xFindFunction","","",11,N],[12,"xRename","","",11,N],[12,"xSavepoint","","",11,N],[12,"xRelease","","",11,N],[12,"xRollbackTo","","",11,N],[3,"sqlite3_blob","","",N,N],[3,"sqlite3_mutex_methods","","",N,N],[12,"xMutexInit","","",12,N],[12,"xMutexEnd","","",12,N],[12,"xMutexAlloc","","",12,N],[12,"xMutexFree","","",12,N],[12,"xMutexEnter","","",12,N],[12,"xMutexTry","","",12,N],[12,"xMutexLeave","","",12,N],[12,"xMutexHeld","","",12,N],[12,"xMutexNotheld","","",12,N],[3,"sqlite3_pcache","","",N,N],[3,"sqlite3_pcache_page","","",N,N],[12,"pBuf","","",13,N],[12,"pExtra","","",13,N],[3,"sqlite3_pcache_methods2","","",N,N],[12,"iVersion","","",14,N],[12,"pArg","","",14,N],[12,"xInit","","",14,N],[12,"xShutdown","","",14,N],[12,"xCreate","","",14,N],[12,"xCachesize","","",14,N],[12,"xPagecount","","",14,N],[12,"xFetch","","",14,N],[12,"xUnpin","","",14,N],[12,"xRekey","","",14,N],[12,"xTruncate","","",14,N],[12,"xDestroy","","",14,N],[12,"xShrink","","",14,N],[3,"sqlite3_pcache_methods","","",N,N],[12,"pArg","","",15,N],[12,"xInit","","",15,N],[12,"xShutdown","","",15,N],[12,"xCreate","","",15,N],[12,"xCachesize","","",15,N],[12,"xPagecount","","",15,N],[12,"xFetch","","",15,N],[12,"xUnpin","","",15,N],[12,"xRekey","","",15,N],[12,"xTruncate","","",15,N],[12,"xDestroy","","",15,N],[3,"sqlite3_backup","","",N,N],[3,"sqlite3_rtree_geometry","","",N,N],[12,"pContext","","",16,N],[12,"nParam","","",16,N],[12,"aParam","","",16,N],[12,"pUser","","",16,N],[12,"xDelUser","","",16,N],[3,"__va_list_tag","","",N,N],[12,"gp_offset","","",17,N],[12,"fp_offset","","",17,N],[12,"overflow_arg_area","","",17,N],[12,"reg_save_area","","",17,N],[4,"ErrorCode","","Error Codes",N,N],[13,"InternalMalfunction","","Internal logic error in SQLite",18,N],[13,"PermissionDenied","","Access permission denied",18,N],[13,"OperationAborted","","Callback routine requested an abort",18,N],[13,"DatabaseBusy","","The database file is locked",18,N],[13,"DatabaseLocked","","A table in the database is locked",18,N],[13,"OutOfMemory","","A malloc() failed",18,N],[13,"ReadOnly","","Attempt to write a readonly database",18,N],[13,"OperationInterrupted","","Operation terminated by sqlite3_interrupt()",18,N],[13,"SystemIOFailure","","Some kind of disk I/O error occurred",18,N],[13,"DatabaseCorrupt","","The database disk image is malformed",18,N],[13,"NotFound","","Unknown opcode in sqlite3_file_control()",18,N],[13,"DiskFull","","Insertion failed because database is full",18,N],[13,"CannotOpen","","Unable to open the database file",18,N],[13,"FileLockingProtocolFailed","","Database lock protocol error",18,N],[13,"SchemaChanged","","The database schema changed",18,N],[13,"TooBig","","String or BLOB exceeds size limit",18,N],[13,"ConstraintViolation","","Abort due to constraint violation",18,N],[13,"TypeMismatch","","Data type mismatch",18,N],[13,"APIMisuse","","Library used incorrectly",18,N],[13,"NoLargeFileSupport","","Uses OS features not supported on host",18,N],[13,"AuthorizationForStatementDenied","","Authorization denied",18,N],[13,"ParameterOutOfRange","","2nd parameter to sqlite3_bind out of range",18,N],[13,"NotADatabase","","File opened that is not a database file",18,N],[13,"Unknown","","SQL error or missing database",18,N],[4,"Limit","","Run-Time Limit Categories",N,N],[13,"SQLITE_LIMIT_LENGTH","","The maximum size of any string or BLOB or table row, in bytes.",19,N],[13,"SQLITE_LIMIT_SQL_LENGTH","","The maximum length of an SQL statement, in bytes.",19,N],[13,"SQLITE_LIMIT_COLUMN","","The maximum number of columns in a table definition or in the result set of a SELECT or the maximum number of columns in an index or in an ORDER BY or GROUP BY clause.",19,N],[13,"SQLITE_LIMIT_EXPR_DEPTH","","The maximum depth of the parse tree on any expression.",19,N],[13,"SQLITE_LIMIT_COMPOUND_SELECT","","The maximum number of terms in a compound SELECT statement.",19,N],[13,"SQLITE_LIMIT_VDBE_OP","","The maximum number of instructions in a virtual machine program used to implement an SQL statement.",19,N],[13,"SQLITE_LIMIT_FUNCTION_ARG","","The maximum number of arguments on a function.",19,N],[13,"SQLITE_LIMIT_ATTACHED","","The maximum number of attached databases.",19,N],[13,"SQLITE_LIMIT_LIKE_PATTERN_LENGTH","","The maximum length of the pattern argument to the LIKE or GLOB operators.",19,N],[13,"SQLITE_LIMIT_VARIABLE_NUMBER","","The maximum index number of any parameter in an SQL statement.",19,N],[13,"SQLITE_LIMIT_TRIGGER_DEPTH","","The maximum depth of recursion for triggers.",19,N],[13,"SQLITE_LIMIT_WORKER_THREADS","","The maximum number of auxiliary worker threads that a single prepared statement may start.",19,N],[5,"code_to_str","","",N,[[["c_int"]],["str"]]],[5,"SQLITE_STATIC","","",N,[[],["sqlite3_destructor_type"]]],[5,"SQLITE_TRANSIENT","","",N,[[],["sqlite3_destructor_type"]]],[7,"sqlite3_version","","",N,N],[5,"sqlite3_libversion","","",N,N],[5,"sqlite3_sourceid","","",N,N],[5,"sqlite3_libversion_number","","",N,N],[5,"sqlite3_compileoption_used","","",N,N],[5,"sqlite3_compileoption_get","","",N,N],[5,"sqlite3_threadsafe","","",N,N],[5,"sqlite3_close","","",N,N],[5,"sqlite3_close_v2","","",N,N],[5,"sqlite3_exec","","",N,N],[5,"sqlite3_initialize","","",N,N],[5,"sqlite3_shutdown","","",N,N],[5,"sqlite3_os_init","","",N,N],[5,"sqlite3_os_end","","",N,N],[5,"sqlite3_config","","",N,N],[5,"sqlite3_db_config","","",N,N],[5,"sqlite3_extended_result_codes","","",N,N],[5,"sqlite3_last_insert_rowid","","",N,N],[5,"sqlite3_changes","","",N,N],[5,"sqlite3_total_changes","","",N,N],[5,"sqlite3_interrupt","","",N,N],[5,"sqlite3_complete","","",N,N],[5,"sqlite3_complete16","","",N,N],[5,"sqlite3_busy_handler","","",N,N],[5,"sqlite3_busy_timeout","","",N,N],[5,"sqlite3_get_table","","",N,N],[5,"sqlite3_free_table","","",N,N],[5,"sqlite3_mprintf","","",N,N],[5,"sqlite3_vmprintf","","",N,N],[5,"sqlite3_snprintf","","",N,N],[5,"sqlite3_vsnprintf","","",N,N],[5,"sqlite3_malloc","","",N,N],[5,"sqlite3_realloc","","",N,N],[5,"sqlite3_free","","",N,N],[5,"sqlite3_memory_used","","",N,N],[5,"sqlite3_memory_highwater","","",N,N],[5,"sqlite3_randomness","","",N,N],[5,"sqlite3_set_authorizer","","",N,N],[5,"sqlite3_trace","","",N,N],[5,"sqlite3_profile","","",N,N],[5,"sqlite3_progress_handler","","",N,N],[5,"sqlite3_open","","",N,N],[5,"sqlite3_open16","","",N,N],[5,"sqlite3_open_v2","","",N,N],[5,"sqlite3_uri_parameter","","",N,N],[5,"sqlite3_uri_boolean","","",N,N],[5,"sqlite3_uri_int64","","",N,N],[5,"sqlite3_errcode","","",N,N],[5,"sqlite3_extended_errcode","","",N,N],[5,"sqlite3_errmsg","","",N,N],[5,"sqlite3_errmsg16","","",N,N],[5,"sqlite3_errstr","","",N,N],[5,"sqlite3_limit","","",N,N],[5,"sqlite3_prepare","","",N,N],[5,"sqlite3_prepare_v2","","",N,N],[5,"sqlite3_prepare16","","",N,N],[5,"sqlite3_prepare16_v2","","",N,N],[5,"sqlite3_sql","","",N,N],[5,"sqlite3_stmt_readonly","","",N,N],[5,"sqlite3_stmt_busy","","",N,N],[5,"sqlite3_bind_blob","","",N,N],[5,"sqlite3_bind_double","","",N,N],[5,"sqlite3_bind_int","","",N,N],[5,"sqlite3_bind_int64","","",N,N],[5,"sqlite3_bind_null","","",N,N],[5,"sqlite3_bind_text","","",N,N],[5,"sqlite3_bind_text16","","",N,N],[5,"sqlite3_bind_value","","",N,N],[5,"sqlite3_bind_zeroblob","","",N,N],[5,"sqlite3_bind_parameter_count","","",N,N],[5,"sqlite3_bind_parameter_name","","",N,N],[5,"sqlite3_bind_parameter_index","","",N,N],[5,"sqlite3_clear_bindings","","",N,N],[5,"sqlite3_column_count","","",N,N],[5,"sqlite3_column_name","","",N,N],[5,"sqlite3_column_name16","","",N,N],[5,"sqlite3_column_database_name","","",N,N],[5,"sqlite3_column_database_name16","","",N,N],[5,"sqlite3_column_table_name","","",N,N],[5,"sqlite3_column_table_name16","","",N,N],[5,"sqlite3_column_origin_name","","",N,N],[5,"sqlite3_column_origin_name16","","",N,N],[5,"sqlite3_column_decltype","","",N,N],[5,"sqlite3_column_decltype16","","",N,N],[5,"sqlite3_step","","",N,N],[5,"sqlite3_data_count","","",N,N],[5,"sqlite3_column_blob","","",N,N],[5,"sqlite3_column_bytes","","",N,N],[5,"sqlite3_column_bytes16","","",N,N],[5,"sqlite3_column_double","","",N,N],[5,"sqlite3_column_int","","",N,N],[5,"sqlite3_column_int64","","",N,N],[5,"sqlite3_column_text","","",N,N],[5,"sqlite3_column_text16","","",N,N],[5,"sqlite3_column_type","","",N,N],[5,"sqlite3_column_value","","",N,N],[5,"sqlite3_finalize","","",N,N],[5,"sqlite3_reset","","",N,N],[5,"sqlite3_create_function","","",N,N],[5,"sqlite3_create_function16","","",N,N],[5,"sqlite3_create_function_v2","","",N,N],[5,"sqlite3_aggregate_count","","",N,N],[5,"sqlite3_expired","","",N,N],[5,"sqlite3_transfer_bindings","","",N,N],[5,"sqlite3_global_recover","","",N,N],[5,"sqlite3_thread_cleanup","","",N,N],[5,"sqlite3_memory_alarm","","",N,N],[5,"sqlite3_value_blob","","",N,N],[5,"sqlite3_value_bytes","","",N,N],[5,"sqlite3_value_bytes16","","",N,N],[5,"sqlite3_value_double","","",N,N],[5,"sqlite3_value_int","","",N,N],[5,"sqlite3_value_int64","","",N,N],[5,"sqlite3_value_text","","",N,N],[5,"sqlite3_value_text16","","",N,N],[5,"sqlite3_value_text16le","","",N,N],[5,"sqlite3_value_text16be","","",N,N],[5,"sqlite3_value_type","","",N,N],[5,"sqlite3_value_numeric_type","","",N,N],[5,"sqlite3_aggregate_context","","",N,N],[5,"sqlite3_user_data","","",N,N],[5,"sqlite3_context_db_handle","","",N,N],[5,"sqlite3_get_auxdata","","",N,N],[5,"sqlite3_set_auxdata","","",N,N],[5,"sqlite3_result_blob","","",N,N],[5,"sqlite3_result_double","","",N,N],[5,"sqlite3_result_error","","",N,N],[5,"sqlite3_result_error16","","",N,N],[5,"sqlite3_result_error_toobig","","",N,N],[5,"sqlite3_result_error_nomem","","",N,N],[5,"sqlite3_result_error_code","","",N,N],[5,"sqlite3_result_int","","",N,N],[5,"sqlite3_result_int64","","",N,N],[5,"sqlite3_result_null","","",N,N],[5,"sqlite3_result_text","","",N,N],[5,"sqlite3_result_text16","","",N,N],[5,"sqlite3_result_text16le","","",N,N],[5,"sqlite3_result_text16be","","",N,N],[5,"sqlite3_result_value","","",N,N],[5,"sqlite3_result_zeroblob","","",N,N],[5,"sqlite3_create_collation","","",N,N],[5,"sqlite3_create_collation_v2","","",N,N],[5,"sqlite3_create_collation16","","",N,N],[5,"sqlite3_collation_needed","","",N,N],[5,"sqlite3_collation_needed16","","",N,N],[5,"sqlite3_sleep","","",N,N],[7,"sqlite3_temp_directory","","",N,N],[7,"sqlite3_data_directory","","",N,N],[5,"sqlite3_get_autocommit","","",N,N],[5,"sqlite3_db_handle","","",N,N],[5,"sqlite3_db_filename","","",N,N],[5,"sqlite3_db_readonly","","",N,N],[5,"sqlite3_next_stmt","","",N,N],[5,"sqlite3_commit_hook","","",N,N],[5,"sqlite3_rollback_hook","","",N,N],[5,"sqlite3_update_hook","","",N,N],[5,"sqlite3_enable_shared_cache","","",N,N],[5,"sqlite3_release_memory","","",N,N],[5,"sqlite3_db_release_memory","","",N,N],[5,"sqlite3_soft_heap_limit64","","",N,N],[5,"sqlite3_soft_heap_limit","","",N,N],[5,"sqlite3_table_column_metadata","","",N,N],[5,"sqlite3_load_extension","","",N,N],[5,"sqlite3_enable_load_extension","","",N,N],[5,"sqlite3_auto_extension","","",N,N],[5,"sqlite3_reset_auto_extension","","",N,N],[5,"sqlite3_create_module","","",N,N],[5,"sqlite3_create_module_v2","","",N,N],[5,"sqlite3_declare_vtab","","",N,N],[5,"sqlite3_overload_function","","",N,N],[5,"sqlite3_blob_open","","",N,N],[5,"sqlite3_blob_reopen","","",N,N],[5,"sqlite3_blob_close","","",N,N],[5,"sqlite3_blob_bytes","","",N,N],[5,"sqlite3_blob_read","","",N,N],[5,"sqlite3_blob_write","","",N,N],[5,"sqlite3_vfs_find","","",N,N],[5,"sqlite3_vfs_register","","",N,N],[5,"sqlite3_vfs_unregister","","",N,N],[5,"sqlite3_mutex_alloc","","",N,N],[5,"sqlite3_mutex_free","","",N,N],[5,"sqlite3_mutex_enter","","",N,N],[5,"sqlite3_mutex_try","","",N,N],[5,"sqlite3_mutex_leave","","",N,N],[5,"sqlite3_mutex_held","","",N,N],[5,"sqlite3_mutex_notheld","","",N,N],[5,"sqlite3_db_mutex","","",N,N],[5,"sqlite3_file_control","","",N,N],[5,"sqlite3_test_control","","",N,N],[5,"sqlite3_status","","",N,N],[5,"sqlite3_db_status","","",N,N],[5,"sqlite3_stmt_status","","",N,N],[5,"sqlite3_backup_init","","",N,N],[5,"sqlite3_backup_step","","",N,N],[5,"sqlite3_backup_finish","","",N,N],[5,"sqlite3_backup_remaining","","",N,N],[5,"sqlite3_backup_pagecount","","",N,N],[5,"sqlite3_unlock_notify","","",N,N],[5,"sqlite3_stricmp","","",N,N],[5,"sqlite3_strnicmp","","",N,N],[5,"sqlite3_log","","",N,N],[5,"sqlite3_wal_hook","","",N,N],[5,"sqlite3_wal_autocheckpoint","","",N,N],[5,"sqlite3_wal_checkpoint","","",N,N],[5,"sqlite3_wal_checkpoint_v2","","",N,N],[5,"sqlite3_vtab_config","","",N,N],[5,"sqlite3_vtab_on_conflict","","",N,N],[5,"sqlite3_rtree_geometry_callback","","",N,N],[11,"clone","","",18,[[["self"]],["errorcode"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["errorcode"]],["bool"]]],[11,"clone","","",0,[[["self"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"new","","",0,[[["c_int"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[6,"va_list","","",N,N],[6,"__gnuc_va_list","","",N,N],[6,"sqlite_int64","","",N,N],[6,"sqlite_uint64","","",N,N],[6,"sqlite3_int64","","",N,N],[6,"sqlite3_uint64","","",N,N],[6,"sqlite3_callback","","",N,N],[6,"sqlite3_io_methods","","",N,N],[6,"sqlite3_syscall_ptr","","",N,N],[6,"sqlite3_value","","",N,N],[6,"sqlite3_destructor_type","","",N,N],[6,"__builtin_va_list","","",N,N],[6,"sqlite3_index_constraint","","",N,N],[6,"sqlite3_index_constraint_usage","","",N,N],[17,"__GNUC_VA_LIST","","",N,N],[17,"SQLITE_VERSION","","",N,N],[17,"SQLITE_VERSION_NUMBER","","",N,N],[17,"SQLITE_SOURCE_ID","","",N,N],[17,"SQLITE_OK","","",N,N],[17,"SQLITE_ERROR","","",N,N],[17,"SQLITE_INTERNAL","","",N,N],[17,"SQLITE_PERM","","",N,N],[17,"SQLITE_ABORT","","",N,N],[17,"SQLITE_BUSY","","",N,N],[17,"SQLITE_LOCKED","","",N,N],[17,"SQLITE_NOMEM","","",N,N],[17,"SQLITE_READONLY","","",N,N],[17,"SQLITE_INTERRUPT","","",N,N],[17,"SQLITE_IOERR","","",N,N],[17,"SQLITE_CORRUPT","","",N,N],[17,"SQLITE_NOTFOUND","","",N,N],[17,"SQLITE_FULL","","",N,N],[17,"SQLITE_CANTOPEN","","",N,N],[17,"SQLITE_PROTOCOL","","",N,N],[17,"SQLITE_EMPTY","","",N,N],[17,"SQLITE_SCHEMA","","",N,N],[17,"SQLITE_TOOBIG","","",N,N],[17,"SQLITE_CONSTRAINT","","",N,N],[17,"SQLITE_MISMATCH","","",N,N],[17,"SQLITE_MISUSE","","",N,N],[17,"SQLITE_NOLFS","","",N,N],[17,"SQLITE_AUTH","","",N,N],[17,"SQLITE_FORMAT","","",N,N],[17,"SQLITE_RANGE","","",N,N],[17,"SQLITE_NOTADB","","",N,N],[17,"SQLITE_ROW","","",N,N],[17,"SQLITE_DONE","","",N,N],[17,"SQLITE_IOERR_READ","","",N,N],[17,"SQLITE_IOERR_SHORT_READ","","",N,N],[17,"SQLITE_IOERR_WRITE","","",N,N],[17,"SQLITE_IOERR_FSYNC","","",N,N],[17,"SQLITE_IOERR_DIR_FSYNC","","",N,N],[17,"SQLITE_IOERR_TRUNCATE","","",N,N],[17,"SQLITE_IOERR_FSTAT","","",N,N],[17,"SQLITE_IOERR_UNLOCK","","",N,N],[17,"SQLITE_IOERR_RDLOCK","","",N,N],[17,"SQLITE_IOERR_DELETE","","",N,N],[17,"SQLITE_IOERR_BLOCKED","","",N,N],[17,"SQLITE_IOERR_NOMEM","","",N,N],[17,"SQLITE_IOERR_ACCESS","","",N,N],[17,"SQLITE_IOERR_CHECKRESERVEDLOCK","","",N,N],[17,"SQLITE_IOERR_LOCK","","",N,N],[17,"SQLITE_IOERR_CLOSE","","",N,N],[17,"SQLITE_IOERR_DIR_CLOSE","","",N,N],[17,"SQLITE_IOERR_SHMOPEN","","",N,N],[17,"SQLITE_IOERR_SHMSIZE","","",N,N],[17,"SQLITE_IOERR_SHMLOCK","","",N,N],[17,"SQLITE_IOERR_SHMMAP","","",N,N],[17,"SQLITE_IOERR_SEEK","","",N,N],[17,"SQLITE_IOERR_DELETE_NOENT","","",N,N],[17,"SQLITE_LOCKED_SHAREDCACHE","","",N,N],[17,"SQLITE_BUSY_RECOVERY","","",N,N],[17,"SQLITE_CANTOPEN_NOTEMPDIR","","",N,N],[17,"SQLITE_CANTOPEN_ISDIR","","",N,N],[17,"SQLITE_CANTOPEN_FULLPATH","","",N,N],[17,"SQLITE_CORRUPT_VTAB","","",N,N],[17,"SQLITE_READONLY_RECOVERY","","",N,N],[17,"SQLITE_READONLY_CANTLOCK","","",N,N],[17,"SQLITE_READONLY_ROLLBACK","","",N,N],[17,"SQLITE_ABORT_ROLLBACK","","",N,N],[17,"SQLITE_CONSTRAINT_CHECK","","",N,N],[17,"SQLITE_CONSTRAINT_COMMITHOOK","","",N,N],[17,"SQLITE_CONSTRAINT_FOREIGNKEY","","",N,N],[17,"SQLITE_CONSTRAINT_FUNCTION","","",N,N],[17,"SQLITE_CONSTRAINT_NOTNULL","","",N,N],[17,"SQLITE_CONSTRAINT_PRIMARYKEY","","",N,N],[17,"SQLITE_CONSTRAINT_TRIGGER","","",N,N],[17,"SQLITE_CONSTRAINT_UNIQUE","","",N,N],[17,"SQLITE_CONSTRAINT_VTAB","","",N,N],[17,"SQLITE_OPEN_READONLY","","",N,N],[17,"SQLITE_OPEN_READWRITE","","",N,N],[17,"SQLITE_OPEN_CREATE","","",N,N],[17,"SQLITE_OPEN_DELETEONCLOSE","","",N,N],[17,"SQLITE_OPEN_EXCLUSIVE","","",N,N],[17,"SQLITE_OPEN_AUTOPROXY","","",N,N],[17,"SQLITE_OPEN_URI","","",N,N],[17,"SQLITE_OPEN_MEMORY","","",N,N],[17,"SQLITE_OPEN_MAIN_DB","","",N,N],[17,"SQLITE_OPEN_TEMP_DB","","",N,N],[17,"SQLITE_OPEN_TRANSIENT_DB","","",N,N],[17,"SQLITE_OPEN_MAIN_JOURNAL","","",N,N],[17,"SQLITE_OPEN_TEMP_JOURNAL","","",N,N],[17,"SQLITE_OPEN_SUBJOURNAL","","",N,N],[17,"SQLITE_OPEN_MASTER_JOURNAL","","",N,N],[17,"SQLITE_OPEN_NOMUTEX","","",N,N],[17,"SQLITE_OPEN_FULLMUTEX","","",N,N],[17,"SQLITE_OPEN_SHAREDCACHE","","",N,N],[17,"SQLITE_OPEN_PRIVATECACHE","","",N,N],[17,"SQLITE_OPEN_WAL","","",N,N],[17,"SQLITE_IOCAP_ATOMIC","","",N,N],[17,"SQLITE_IOCAP_ATOMIC512","","",N,N],[17,"SQLITE_IOCAP_ATOMIC1K","","",N,N],[17,"SQLITE_IOCAP_ATOMIC2K","","",N,N],[17,"SQLITE_IOCAP_ATOMIC4K","","",N,N],[17,"SQLITE_IOCAP_ATOMIC8K","","",N,N],[17,"SQLITE_IOCAP_ATOMIC16K","","",N,N],[17,"SQLITE_IOCAP_ATOMIC32K","","",N,N],[17,"SQLITE_IOCAP_ATOMIC64K","","",N,N],[17,"SQLITE_IOCAP_SAFE_APPEND","","",N,N],[17,"SQLITE_IOCAP_SEQUENTIAL","","",N,N],[17,"SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN","","",N,N],[17,"SQLITE_IOCAP_POWERSAFE_OVERWRITE","","",N,N],[17,"SQLITE_LOCK_NONE","","",N,N],[17,"SQLITE_LOCK_SHARED","","",N,N],[17,"SQLITE_LOCK_RESERVED","","",N,N],[17,"SQLITE_LOCK_PENDING","","",N,N],[17,"SQLITE_LOCK_EXCLUSIVE","","",N,N],[17,"SQLITE_SYNC_NORMAL","","",N,N],[17,"SQLITE_SYNC_FULL","","",N,N],[17,"SQLITE_SYNC_DATAONLY","","",N,N],[17,"SQLITE_FCNTL_LOCKSTATE","","",N,N],[17,"SQLITE_GET_LOCKPROXYFILE","","",N,N],[17,"SQLITE_SET_LOCKPROXYFILE","","",N,N],[17,"SQLITE_LAST_ERRNO","","",N,N],[17,"SQLITE_FCNTL_SIZE_HINT","","",N,N],[17,"SQLITE_FCNTL_CHUNK_SIZE","","",N,N],[17,"SQLITE_FCNTL_FILE_POINTER","","",N,N],[17,"SQLITE_FCNTL_SYNC_OMITTED","","",N,N],[17,"SQLITE_FCNTL_WIN32_AV_RETRY","","",N,N],[17,"SQLITE_FCNTL_PERSIST_WAL","","",N,N],[17,"SQLITE_FCNTL_OVERWRITE","","",N,N],[17,"SQLITE_FCNTL_VFSNAME","","",N,N],[17,"SQLITE_FCNTL_POWERSAFE_OVERWRITE","","",N,N],[17,"SQLITE_FCNTL_PRAGMA","","",N,N],[17,"SQLITE_FCNTL_BUSYHANDLER","","",N,N],[17,"SQLITE_FCNTL_TEMPFILENAME","","",N,N],[17,"SQLITE_ACCESS_EXISTS","","",N,N],[17,"SQLITE_ACCESS_READWRITE","","",N,N],[17,"SQLITE_ACCESS_READ","","",N,N],[17,"SQLITE_SHM_UNLOCK","","",N,N],[17,"SQLITE_SHM_LOCK","","",N,N],[17,"SQLITE_SHM_SHARED","","",N,N],[17,"SQLITE_SHM_EXCLUSIVE","","",N,N],[17,"SQLITE_SHM_NLOCK","","",N,N],[17,"SQLITE_CONFIG_SINGLETHREAD","","",N,N],[17,"SQLITE_CONFIG_MULTITHREAD","","",N,N],[17,"SQLITE_CONFIG_SERIALIZED","","",N,N],[17,"SQLITE_CONFIG_MALLOC","","",N,N],[17,"SQLITE_CONFIG_GETMALLOC","","",N,N],[17,"SQLITE_CONFIG_SCRATCH","","",N,N],[17,"SQLITE_CONFIG_PAGECACHE","","",N,N],[17,"SQLITE_CONFIG_HEAP","","",N,N],[17,"SQLITE_CONFIG_MEMSTATUS","","",N,N],[17,"SQLITE_CONFIG_MUTEX","","",N,N],[17,"SQLITE_CONFIG_GETMUTEX","","",N,N],[17,"SQLITE_CONFIG_LOOKASIDE","","",N,N],[17,"SQLITE_CONFIG_PCACHE","","",N,N],[17,"SQLITE_CONFIG_GETPCACHE","","",N,N],[17,"SQLITE_CONFIG_LOG","","",N,N],[17,"SQLITE_CONFIG_URI","","",N,N],[17,"SQLITE_CONFIG_PCACHE2","","",N,N],[17,"SQLITE_CONFIG_GETPCACHE2","","",N,N],[17,"SQLITE_CONFIG_COVERING_INDEX_SCAN","","",N,N],[17,"SQLITE_CONFIG_SQLLOG","","",N,N],[17,"SQLITE_DBCONFIG_LOOKASIDE","","",N,N],[17,"SQLITE_DBCONFIG_ENABLE_FKEY","","",N,N],[17,"SQLITE_DBCONFIG_ENABLE_TRIGGER","","",N,N],[17,"SQLITE_DENY","","",N,N],[17,"SQLITE_IGNORE","","",N,N],[17,"SQLITE_CREATE_INDEX","","",N,N],[17,"SQLITE_CREATE_TABLE","","",N,N],[17,"SQLITE_CREATE_TEMP_INDEX","","",N,N],[17,"SQLITE_CREATE_TEMP_TABLE","","",N,N],[17,"SQLITE_CREATE_TEMP_TRIGGER","","",N,N],[17,"SQLITE_CREATE_TEMP_VIEW","","",N,N],[17,"SQLITE_CREATE_TRIGGER","","",N,N],[17,"SQLITE_CREATE_VIEW","","",N,N],[17,"SQLITE_DELETE","","",N,N],[17,"SQLITE_DROP_INDEX","","",N,N],[17,"SQLITE_DROP_TABLE","","",N,N],[17,"SQLITE_DROP_TEMP_INDEX","","",N,N],[17,"SQLITE_DROP_TEMP_TABLE","","",N,N],[17,"SQLITE_DROP_TEMP_TRIGGER","","",N,N],[17,"SQLITE_DROP_TEMP_VIEW","","",N,N],[17,"SQLITE_DROP_TRIGGER","","",N,N],[17,"SQLITE_DROP_VIEW","","",N,N],[17,"SQLITE_INSERT","","",N,N],[17,"SQLITE_PRAGMA","","",N,N],[17,"SQLITE_READ","","",N,N],[17,"SQLITE_SELECT","","",N,N],[17,"SQLITE_TRANSACTION","","",N,N],[17,"SQLITE_UPDATE","","",N,N],[17,"SQLITE_ATTACH","","",N,N],[17,"SQLITE_DETACH","","",N,N],[17,"SQLITE_ALTER_TABLE","","",N,N],[17,"SQLITE_REINDEX","","",N,N],[17,"SQLITE_ANALYZE","","",N,N],[17,"SQLITE_CREATE_VTABLE","","",N,N],[17,"SQLITE_DROP_VTABLE","","",N,N],[17,"SQLITE_FUNCTION","","",N,N],[17,"SQLITE_SAVEPOINT","","",N,N],[17,"SQLITE_COPY","","",N,N],[17,"SQLITE_LIMIT_LENGTH","","",N,N],[17,"SQLITE_LIMIT_SQL_LENGTH","","",N,N],[17,"SQLITE_LIMIT_COLUMN","","",N,N],[17,"SQLITE_LIMIT_EXPR_DEPTH","","",N,N],[17,"SQLITE_LIMIT_COMPOUND_SELECT","","",N,N],[17,"SQLITE_LIMIT_VDBE_OP","","",N,N],[17,"SQLITE_LIMIT_FUNCTION_ARG","","",N,N],[17,"SQLITE_LIMIT_ATTACHED","","",N,N],[17,"SQLITE_LIMIT_LIKE_PATTERN_LENGTH","","",N,N],[17,"SQLITE_LIMIT_VARIABLE_NUMBER","","",N,N],[17,"SQLITE_LIMIT_TRIGGER_DEPTH","","",N,N],[17,"SQLITE_INTEGER","","",N,N],[17,"SQLITE_FLOAT","","",N,N],[17,"SQLITE_BLOB","","",N,N],[17,"SQLITE_NULL","","",N,N],[17,"SQLITE_TEXT","","",N,N],[17,"SQLITE3_TEXT","","",N,N],[17,"SQLITE_UTF8","","",N,N],[17,"SQLITE_UTF16LE","","",N,N],[17,"SQLITE_UTF16BE","","",N,N],[17,"SQLITE_UTF16","","",N,N],[17,"SQLITE_ANY","","",N,N],[17,"SQLITE_UTF16_ALIGNED","","",N,N],[17,"SQLITE_INDEX_CONSTRAINT_EQ","","",N,N],[17,"SQLITE_INDEX_CONSTRAINT_GT","","",N,N],[17,"SQLITE_INDEX_CONSTRAINT_LE","","",N,N],[17,"SQLITE_INDEX_CONSTRAINT_LT","","",N,N],[17,"SQLITE_INDEX_CONSTRAINT_GE","","",N,N],[17,"SQLITE_INDEX_CONSTRAINT_MATCH","","",N,N],[17,"SQLITE_MUTEX_FAST","","",N,N],[17,"SQLITE_MUTEX_RECURSIVE","","",N,N],[17,"SQLITE_MUTEX_STATIC_MASTER","","",N,N],[17,"SQLITE_MUTEX_STATIC_MEM","","",N,N],[17,"SQLITE_MUTEX_STATIC_MEM2","","",N,N],[17,"SQLITE_MUTEX_STATIC_OPEN","","",N,N],[17,"SQLITE_MUTEX_STATIC_PRNG","","",N,N],[17,"SQLITE_MUTEX_STATIC_LRU","","",N,N],[17,"SQLITE_MUTEX_STATIC_LRU2","","",N,N],[17,"SQLITE_MUTEX_STATIC_PMEM","","",N,N],[17,"SQLITE_TESTCTRL_FIRST","","",N,N],[17,"SQLITE_TESTCTRL_PRNG_SAVE","","",N,N],[17,"SQLITE_TESTCTRL_PRNG_RESTORE","","",N,N],[17,"SQLITE_TESTCTRL_PRNG_RESET","","",N,N],[17,"SQLITE_TESTCTRL_BITVEC_TEST","","",N,N],[17,"SQLITE_TESTCTRL_FAULT_INSTALL","","",N,N],[17,"SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS","","",N,N],[17,"SQLITE_TESTCTRL_PENDING_BYTE","","",N,N],[17,"SQLITE_TESTCTRL_ASSERT","","",N,N],[17,"SQLITE_TESTCTRL_ALWAYS","","",N,N],[17,"SQLITE_TESTCTRL_RESERVE","","",N,N],[17,"SQLITE_TESTCTRL_OPTIMIZATIONS","","",N,N],[17,"SQLITE_TESTCTRL_ISKEYWORD","","",N,N],[17,"SQLITE_TESTCTRL_SCRATCHMALLOC","","",N,N],[17,"SQLITE_TESTCTRL_LOCALTIME_FAULT","","",N,N],[17,"SQLITE_TESTCTRL_EXPLAIN_STMT","","",N,N],[17,"SQLITE_TESTCTRL_LAST","","",N,N],[17,"SQLITE_STATUS_MEMORY_USED","","",N,N],[17,"SQLITE_STATUS_PAGECACHE_USED","","",N,N],[17,"SQLITE_STATUS_PAGECACHE_OVERFLOW","","",N,N],[17,"SQLITE_STATUS_SCRATCH_USED","","",N,N],[17,"SQLITE_STATUS_SCRATCH_OVERFLOW","","",N,N],[17,"SQLITE_STATUS_MALLOC_SIZE","","",N,N],[17,"SQLITE_STATUS_PARSER_STACK","","",N,N],[17,"SQLITE_STATUS_PAGECACHE_SIZE","","",N,N],[17,"SQLITE_STATUS_SCRATCH_SIZE","","",N,N],[17,"SQLITE_STATUS_MALLOC_COUNT","","",N,N],[17,"SQLITE_DBSTATUS_LOOKASIDE_USED","","",N,N],[17,"SQLITE_DBSTATUS_CACHE_USED","","",N,N],[17,"SQLITE_DBSTATUS_SCHEMA_USED","","",N,N],[17,"SQLITE_DBSTATUS_STMT_USED","","",N,N],[17,"SQLITE_DBSTATUS_LOOKASIDE_HIT","","",N,N],[17,"SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE","","",N,N],[17,"SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL","","",N,N],[17,"SQLITE_DBSTATUS_CACHE_HIT","","",N,N],[17,"SQLITE_DBSTATUS_CACHE_MISS","","",N,N],[17,"SQLITE_DBSTATUS_CACHE_WRITE","","",N,N],[17,"SQLITE_DBSTATUS_MAX","","",N,N],[17,"SQLITE_STMTSTATUS_FULLSCAN_STEP","","",N,N],[17,"SQLITE_STMTSTATUS_SORT","","",N,N],[17,"SQLITE_STMTSTATUS_AUTOINDEX","","",N,N],[17,"SQLITE_CHECKPOINT_PASSIVE","","",N,N],[17,"SQLITE_CHECKPOINT_FULL","","",N,N],[17,"SQLITE_CHECKPOINT_RESTART","","",N,N],[17,"SQLITE_VTAB_CONSTRAINT_SUPPORT","","",N,N],[17,"SQLITE_ROLLBACK","","",N,N],[17,"SQLITE_FAIL","","",N,N],[17,"SQLITE_REPLACE","","",N,N],[17,"SQLITE_DETERMINISTIC","","",N,N],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["sqlite3"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["sqlite3_mutex"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["sqlite3_stmt"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["mem"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",24,[[["self"]],["sqlite3_context"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["self"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"clone","","",25,[[["self"]],["sqlite3_blob"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["self"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["sqlite3_pcache"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["self"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["self"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["sqlite3_backup"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["self"]]],[11,"default","","",5,[[],["self"]]],[11,"default","","",10,[[],["self"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]]],"paths":[[3,"Error"],[3,"sqlite3_file"],[3,"sqlite3_file_sqlite3_io_methods"],[3,"sqlite3_vfs"],[3,"sqlite3_mem_methods"],[3,"sqlite3_vtab"],[3,"sqlite3_index_info"],[3,"sqlite3_index_info_sqlite3_index_constraint"],[3,"sqlite3_index_info_sqlite3_index_orderby"],[3,"sqlite3_index_info_sqlite3_index_constraint_usage"],[3,"sqlite3_vtab_cursor"],[3,"sqlite3_module"],[3,"sqlite3_mutex_methods"],[3,"sqlite3_pcache_page"],[3,"sqlite3_pcache_methods2"],[3,"sqlite3_pcache_methods"],[3,"sqlite3_rtree_geometry"],[3,"__va_list_tag"],[4,"ErrorCode"],[4,"Limit"],[3,"sqlite3"],[3,"sqlite3_mutex"],[3,"sqlite3_stmt"],[3,"Mem"],[3,"sqlite3_context"],[3,"sqlite3_blob"],[3,"sqlite3_pcache"],[3,"sqlite3_backup"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",N,N],[3,"LogMetadata","","Metadata about a log message.",N,N],[3,"LogLocation","","The location of a log message.",N,N],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",N,N],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",N,N],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",N,N],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",N,N],[13,"Error","","The \"error\" level.",0,N],[13,"Warn","","The \"warn\" level.",0,N],[13,"Info","","The \"info\" level.",0,N],[13,"Debug","","The \"debug\" level.",0,N],[13,"Trace","","The \"trace\" level.",0,N],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",N,N],[13,"Off","","A level lower than all log levels.",1,N],[13,"Error","","Corresponds to the `Error` log level.",1,N],[13,"Warn","","Corresponds to the `Warn` log level.",1,N],[13,"Info","","Corresponds to the `Info` log level.",1,N],[13,"Debug","","Corresponds to the `Debug` log level.",1,N],[13,"Trace","","Corresponds to the `Trace` log level.",1,N],[5,"max_log_level","","Returns the current maximum log level.",N,[[],["loglevelfilter"]]],[5,"set_logger","","Sets the global logger.",N,[[["m"]],["result",["setloggererror"]]]],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",N,[[["m"]],["result",["setloggererror"]]]],[5,"shutdown_logger","","Shuts down the global logger.",N,[[],["result",["box","shutdownloggererror"]]]],[5,"shutdown_logger_raw","","Shuts down the global logger.",N,[[],["result",["shutdownloggererror"]]]],[8,"Log","","A trait encapsulating the operations required of a logger",N,N],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,[[["self"],["logmetadata"]],["bool"]]],[10,"log","","Logs the `LogRecord`.",2,[[["self"],["logrecord"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["loglevel"]]],[11,"eq","","",0,[[["self"],["loglevel"]],["bool"]]],[11,"eq","","",0,[[["self"],["loglevelfilter"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["loglevel"]],["option",["ordering"]]]],[11,"partial_cmp","","",0,[[["self"],["loglevelfilter"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["loglevel"]],["ordering"]]],[11,"from_str","","",0,[[["str"]],["result",["loglevel"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level.",0,[[],["loglevel"]]],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,[[["self"]],["loglevelfilter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["loglevelfilter"]]],[11,"eq","","",1,[[["self"],["loglevelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["loglevel"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["loglevelfilter"]],["option",["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["loglevel"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["loglevelfilter"]],["ordering"]]],[11,"from_str","","",1,[[["str"]],["result",["loglevelfilter"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["loglevelfilter"]]],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,[[["self"]],["option",["loglevel"]]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["logmetadata"]]],[11,"location","","The location of the log directive.",3,[[["self"]],["loglocation"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["loglevel"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"level","","The verbosity level of the message.",4,[[["self"]],["loglevel"]]],[11,"target","","The name of the target of the directive.",4,[[["self"]],["str"]]],[11,"clone","","",5,[[["self"]],["loglocation"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"module_path","","The module path of the message.",5,[[["self"]],["str"]]],[11,"file","","The source file containing the message.",5,[[["self"]],["str"]]],[11,"line","","The line containing the message.",5,[[["self"]],["u32"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"get","","Gets the current maximum log level filter.",6,[[["self"]],["loglevelfilter"]]],[11,"set","","Sets the maximum log level.",6,[[["self"],["loglevelfilter"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"description","","",8,[[["self"]],["str"]]],[14,"log","","The standard logging macro.",N,N],[14,"error","","Logs a message at the error level.",N,N],[14,"warn","","Logs a message at the warn level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[14,"debug","","Logs a message at the debug level.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",N,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["matches"]={"doc":"","items":[[14,"matches","matches","Check if an expression matches a refutable pattern.",N,N],[14,"assert_matches","","Assert that an expression matches a refutable pattern.",N,N],[14,"debug_assert_matches","","Assert that an expression matches a refutable pattern using debug assertions.",N,N]],"paths":[]};
searchIndex["memchr"]={"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",N,N],[3,"Memchr2","","An iterator for Memchr2",N,N],[3,"Memchr3","","An iterator for Memchr3",N,N],[5,"memchr","","A safe interface to `memchr`.",N,N],[5,"memrchr","","A safe interface to `memrchr`.",N,N],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",N,N],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",N,N],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,N],[11,"next","","",0,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",0,N],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,N],[11,"next","","",1,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",1,N],[11,"new","","Create a new `Memchr3` that's initialized to zero with a haystack",2,N],[11,"next","","",2,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",2,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["mime"]={"doc":"Mime","items":[[3,"Mime","mime","Mime, or Media Type. Encapsulates common registers types.",N,N],[12,"0","","",0,N],[12,"1","","",0,N],[12,"2","","",0,N],[4,"TopLevel","","",N,N],[13,"Star","","",1,N],[13,"Text","","",1,N],[13,"Image","","",1,N],[13,"Audio","","",1,N],[13,"Video","","",1,N],[13,"Application","","",1,N],[13,"Multipart","","",1,N],[13,"Message","","",1,N],[13,"Model","","",1,N],[13,"Ext","","",1,N],[4,"SubLevel","","",N,N],[13,"Star","","",2,N],[13,"Plain","","",2,N],[13,"Html","","",2,N],[13,"Xml","","",2,N],[13,"Javascript","","",2,N],[13,"Css","","",2,N],[13,"EventStream","","",2,N],[13,"Json","","",2,N],[13,"WwwFormUrlEncoded","","",2,N],[13,"Msgpack","","",2,N],[13,"OctetStream","","",2,N],[13,"FormData","","",2,N],[13,"Png","","",2,N],[13,"Gif","","",2,N],[13,"Bmp","","",2,N],[13,"Jpeg","","",2,N],[13,"Mpeg","","",2,N],[13,"Mp4","","",2,N],[13,"Ogg","","",2,N],[13,"Ext","","",2,N],[4,"Attr","","",N,N],[13,"Charset","","",3,N],[13,"Boundary","","",3,N],[13,"Q","","",3,N],[13,"Ext","","",3,N],[4,"Value","","",N,N],[13,"Utf8","","",4,N],[13,"Ext","","",4,N],[6,"Param","","",N,N],[11,"clone","","",0,[[["self"]],["mime"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"cmp","","",0,[[["self"],["mime"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["mime"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["mime"]],["bool"]]],[11,"le","","",0,[[["self"],["mime"]],["bool"]]],[11,"gt","","",0,[[["self"],["mime"]],["bool"]]],[11,"ge","","",0,[[["self"],["mime"]],["bool"]]],[11,"eq","","",0,[[["self"],["mime"]],["bool"]]],[11,"clone","","",1,[[["self"]],["toplevel"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"cmp","","",1,[[["self"],["toplevel"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["toplevel"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["toplevel"]],["bool"]]],[11,"le","","",1,[[["self"],["toplevel"]],["bool"]]],[11,"gt","","",1,[[["self"],["toplevel"]],["bool"]]],[11,"ge","","",1,[[["self"],["toplevel"]],["bool"]]],[11,"as_str","","",1,[[["self"]],["str"]]],[11,"deref","","",1,[[["self"]],["str"]]],[11,"eq","","",1,[[["self"],["toplevel"]],["bool"]]],[11,"eq","","",1,[[["self"],["string"]],["bool"]]],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",1,[[["str"]],["result",["toplevel"]]]],[11,"clone","","",2,[[["self"]],["sublevel"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,N],[11,"cmp","","",2,[[["self"],["sublevel"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["sublevel"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["sublevel"]],["bool"]]],[11,"le","","",2,[[["self"],["sublevel"]],["bool"]]],[11,"gt","","",2,[[["self"],["sublevel"]],["bool"]]],[11,"ge","","",2,[[["self"],["sublevel"]],["bool"]]],[11,"as_str","","",2,[[["self"]],["str"]]],[11,"deref","","",2,[[["self"]],["str"]]],[11,"eq","","",2,[[["self"],["sublevel"]],["bool"]]],[11,"eq","","",2,[[["self"],["string"]],["bool"]]],[11,"eq","","",2,[[["self"],["str"]],["bool"]]],[11,"eq","","",2,[[["self"],["str"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",2,[[["str"]],["result",["sublevel"]]]],[11,"clone","","",3,[[["self"]],["attr"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"cmp","","",3,[[["self"],["attr"]],["ordering"]]],[11,"partial_cmp","","",3,[[["self"],["attr"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["attr"]],["bool"]]],[11,"le","","",3,[[["self"],["attr"]],["bool"]]],[11,"gt","","",3,[[["self"],["attr"]],["bool"]]],[11,"ge","","",3,[[["self"],["attr"]],["bool"]]],[11,"as_str","","",3,[[["self"]],["str"]]],[11,"deref","","",3,[[["self"]],["str"]]],[11,"eq","","",3,[[["self"],["attr"]],["bool"]]],[11,"eq","","",3,[[["self"],["string"]],["bool"]]],[11,"eq","","",3,[[["self"],["str"]],["bool"]]],[11,"eq","","",3,[[["self"],["str"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",3,[[["str"]],["result",["attr"]]]],[11,"clone","","",4,[[["self"]],["value"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",4,N],[11,"cmp","","",4,[[["self"],["value"]],["ordering"]]],[11,"partial_cmp","","",4,[[["self"],["value"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["value"]],["bool"]]],[11,"le","","",4,[[["self"],["value"]],["bool"]]],[11,"gt","","",4,[[["self"],["value"]],["bool"]]],[11,"ge","","",4,[[["self"],["value"]],["bool"]]],[11,"as_str","","",4,[[["self"]],["str"]]],[11,"deref","","",4,[[["self"]],["str"]]],[11,"eq","","",4,[[["self"],["value"]],["bool"]]],[11,"eq","","",4,[[["self"],["string"]],["bool"]]],[11,"eq","","",4,[[["self"],["str"]],["bool"]]],[11,"eq","","",4,[[["self"],["str"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",4,[[["str"]],["result",["value"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"get_param","","",0,[[["self"],["a"]],["option",["value"]]]],[11,"from_str","","",0,[[["str"]],["result",["mime"]]]],[14,"mime","","Easily create a Mime without having to import so many enums.",N,N],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]]],"paths":[[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"]]};
searchIndex["num_cpus"]={"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",N,[[],["usize"]]],[5,"get_physical","","Returns the number of physical cores of the current system.",N,[[],["usize"]]]],"paths":[]};
searchIndex["num_integer"]={"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",N,N],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",N,[[["t"]],["t"]]],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",N,[[["t"]],["t"]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",N,[[["t"],["u32"]],["t"]]],[5,"div_rem","","Simultaneous integer division and modulus",N,N],[5,"div_floor","","Floored integer division",N,[[["t"],["t"]],["t"]]],[5,"mod_floor","","Floored integer modulus",N,[[["t"],["t"]],["t"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",N,N],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",N,[[["t"],["t"]],["t"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",N,[[["t"],["t"]],["t"]]],[5,"binomial","","Calculate the binomial coefficient.",N,[[["t"],["t"]],["t"]]],[5,"multinomial","","Calculate the multinomial coefficient.",N,N],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",N,N],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",0,[[["self"],["u32"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,[[["self"]],["self"]]],[8,"Integer","","",N,N],[10,"div_floor","","Floored integer division.",1,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",2,[[["t"]],["iterbinomial"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,[[["self"]],["self"]]]],"paths":[[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_traits"]={"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",N,N],[12,"kind","","",0,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",1,N],[13,"Invalid","","",1,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"identities","","",N,N],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",3,[[["self"]],["bool"]]],[0,"sign","num_traits","",N,N],[5,"abs","num_traits::sign","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",4,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",4,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",4,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[0,"ops","num_traits","",N,N],[0,"saturating","num_traits::ops","",N,N],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,[[["self"],["self"]],["self"]]],[0,"checked","num_traits::ops","",N,N],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,[[["self"],["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",10,[[["self"],["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't be represented.",N,N],[10,"checked_neg","","Negates a number, returning `None` for results that can't be represented, like signed `MIN` values that can't be positive, or non-zero unsigned values that can't be negative.",11,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",12,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",13,[[["self"],["u32"]],["option"]]],[0,"wrapping","num_traits::ops","",N,N],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",14,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",15,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",16,[[["self"],["self"]],["self"]]],[0,"inv","num_traits::ops","",N,N],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",N,N],[16,"Output","","The result after applying the operator.",17,N],[10,"inv","","Returns the multiplicative inverse of `self`.",17,N],[0,"mul_add","num_traits::ops","",N,N],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",N,N],[16,"Output","","The resulting type after applying the fused multiply-add.",18,N],[10,"mul_add","","Performs the fused multiply-add operation.",18,N],[8,"MulAddAssign","","The fused multiply-add assignment operation.",N,N],[10,"mul_add_assign","","Performs the fused multiply-add operation.",19,[[["self"],["a"],["b"]]]],[0,"bounds","num_traits","",N,N],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",20,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",20,[[],["self"]]],[0,"float","num_traits","",N,N],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with `no_std`.",N,N],[10,"infinity","","Returns positive infinity.",21,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",21,[[],["self"]]],[10,"nan","","Returns NaN.",21,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",21,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",21,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",21,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",21,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",21,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",21,[[["self"]],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",21,[[["self"]],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",21,[[["self"]],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",21,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",21,[[["self"]],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",21,[[["self"]],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",21,[[["self"]],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",21,[[["self"]],["self"]]],[11,"trunc","","Return the integer part of a number.",21,[[["self"]],["self"]]],[11,"fract","","Returns the fractional part of a number.",21,[[["self"]],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",21,[[["self"]],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",21,[[["self"]],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",21,[[["self"]],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",21,[[["self"]],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",21,[[["self"],["self"]],["self"]]],[11,"max","","Returns the maximum of the two numbers.",21,[[["self"],["self"]],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",21,[[["self"]],["self"]]],[11,"powi","","Raise a number to an integer power.",21,[[["self"],["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",21,[[["self"]],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",21,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",21,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",22,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",22,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",22,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",22,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",22,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",22,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",22,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",22,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",22,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",22,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",22,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",22,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",22,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",22,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",22,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",22,[[],["self"]]],[0,"cast","num_traits","",N,N],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",23,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",23,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",23,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",23,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",23,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",23,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",23,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",23,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",23,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",23,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",23,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",23,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",23,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",23,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",24,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,[[["f64"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",25,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",26,[[["self"]],["t"]]],[0,"int","num_traits","",N,N],[8,"PrimInt","num_traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",27,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",27,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",27,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",27,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",27,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",27,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",27,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",27,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",27,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",27,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",27,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",27,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",27,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",27,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",27,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",27,[[["self"],["u32"]],["self"]]],[0,"pow","num_traits","",N,N],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[8,"Pow","","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",28,N],[10,"pow","","Returns `self` to the power `rhs`.",28,N],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",29,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",29,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Bounded"],[8,"FloatCore"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"PrimInt"],[8,"Pow"],[8,"Num"]]};
searchIndex["ordermap"]={"doc":"","items":[[3,"OrderMap","ordermap","A hash map with consistent order of the key-value pairs.",N,N],[3,"OccupiedEntry","","",N,N],[3,"VacantEntry","","",N,N],[3,"Keys","","",N,N],[3,"Values","","",N,N],[3,"ValuesMut","","",N,N],[3,"Iter","","",N,N],[3,"IterMut","","",N,N],[3,"IntoIter","","",N,N],[3,"Drain","","",N,N],[4,"Entry","","FIXME: Remove dependence on the `S` parameter (to match HashMap).",N,N],[13,"Occupied","","",0,N],[13,"Vacant","","",0,N],[11,"clone","","",1,[[["self"]],["ordermap"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new map. (Does not allocate.)",1,[[],["self"]]],[11,"with_capacity","","Create a new map with capacity for `n` key-value pairs. (Does not allocate if `n` is zero.)",1,[[["usize"]],["self"]]],[11,"with_capacity_and_hasher","","Create a new map with capacity for `n` key-value pairs. (Does not allocate if `n` is zero.)",1,[[["usize"],["s"]],["self"]]],[11,"len","","Return the number of key-value pairs in the map.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",1,[[["self"]],["bool"]]],[11,"with_hasher","","Create a new map with `hash_builder`",1,[[["s"]],["self"]]],[11,"hasher","","Return a reference to the map's `BuildHasher`.",1,[[["self"]],["s"]]],[11,"capacity","","Computes in O(1) time.",1,[[["self"]],["usize"]]],[11,"or_insert","","Computes in O(1) time (amortized average).",0,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Computes in O(1) time (amortized average).",0,[[["self"],["f"]],["v"]]],[11,"key","","",0,[[["self"]],["k"]]],[11,"index","","",0,[[["self"]],["usize"]]],[11,"key","","",2,[[["self"]],["k"]]],[11,"get","","",2,[[["self"]],["v"]]],[11,"get_mut","","",2,[[["self"]],["v"]]],[11,"index","","",2,[[["self"]],["usize"]]],[11,"into_mut","","",2,[[["self"]],["v"]]],[11,"insert","","",2,[[["self"],["v"]],["v"]]],[11,"remove","","",2,[[["self"]],["v"]]],[11,"remove_entry","","Remove and return the key, value pair stored in the map for this entry",2,N],[11,"key","","",3,[[["self"]],["k"]]],[11,"into_key","","",3,[[["self"]],["k"]]],[11,"index","","",3,[[["self"]],["usize"]]],[11,"insert","","",3,[[["self"],["v"]],["v"]]],[11,"entry","","Get the given key’s corresponding entry in the map for in-place manipulation.",1,[[["self"],["k"]],["entry"]]],[11,"clear","","Remove all key-value pairs in the map, while preserving its capacity.",1,[[["self"]]]],[11,"reserve","","FIXME Not implemented fully yet",1,[[["self"],["usize"]]]],[11,"insert","","Insert they key-value pair into the map.",1,[[["self"],["k"],["v"]],["option"]]],[11,"iter","","Return an iterator over the key-value pairs of the map, in their order",1,[[["self"]],["iter"]]],[11,"iter_mut","","Return an iterator over the key-value pairs of the map, in their order",1,[[["self"]],["itermut"]]],[11,"keys","","Return an iterator over the keys of the map, in their order",1,[[["self"]],["keys"]]],[11,"values","","Return an iterator over the values of the map, in their order",1,[[["self"]],["values"]]],[11,"values_mut","","Return an iterator over mutable references to the the values of the map, in their order",1,[[["self"]],["valuesmut"]]],[11,"contains_key","","Return `true` if and equivalent to `key` exists in the map.",1,[[["self"],["q"]],["bool"]]],[11,"get","","Return a reference to the value stored for `key`, if it is present, else `None`.",1,[[["self"],["q"]],["option"]]],[11,"get_pair","","",1,[[["self"],["q"]],["option"]]],[11,"get_pair_index","","Return item index, key and value",1,[[["self"],["q"]],["option"]]],[11,"get_mut","","",1,[[["self"],["q"]],["option"]]],[11,"get_pair_mut","","",1,[[["self"],["q"]],["option"]]],[11,"get_pair_index_mut","","",1,[[["self"],["q"]],["option"]]],[11,"swap_remove","","Remove the key-value pair equivalent to `key` and return its value.",1,[[["self"],["q"]],["option"]]],[11,"remove","","FIXME Same as .swap_remove",1,[[["self"],["q"]],["option"]]],[11,"swap_remove_pair","","Remove the key-value pair equivalent to `key` and return it.",1,[[["self"],["q"]],["option"]]],[11,"pop","","Remove the last key-value pair",1,[[["self"]],["option"]]],[11,"retain","","Scan through each key-value pair in the map and keep those where the closure `keep` returns `true`.",1,[[["self"],["f"]]]],[11,"sorted_by","","Sort the key-value pairs of the map and return a by value iterator of the key-value pairs with the result.",1,[[["self"],["f"]],["intoiter"]]],[11,"drain","","Clears the `OrderMap`, returning all key-value pairs as a drain iterator. Keeps the allocated memory for reuse.",1,[[["self"],["rangefull"]],["drain"]]],[11,"get_index","","Get a key-value pair by index",1,[[["self"],["usize"]],["option"]]],[11,"get_index_mut","","Get a key-value pair by index",1,[[["self"],["usize"]],["option"]]],[11,"swap_remove_index","","Remove the key-value pair by index",1,[[["self"],["usize"]],["option"]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"count","","",4,[[["self"]],["usize"]]],[11,"nth","","",4,[[["self"],["usize"]],["option"]]],[11,"last","","",4,[[["self"]],["option"]]],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"len","","",4,[[["self"]],["usize"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"count","","",5,[[["self"]],["usize"]]],[11,"nth","","",5,[[["self"],["usize"]],["option"]]],[11,"last","","",5,[[["self"]],["option"]]],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"len","","",5,[[["self"]],["usize"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"count","","",6,[[["self"]],["usize"]]],[11,"nth","","",6,[[["self"],["usize"]],["option"]]],[11,"last","","",6,[[["self"]],["option"]]],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"len","","",6,[[["self"]],["usize"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"count","","",7,[[["self"]],["usize"]]],[11,"nth","","",7,[[["self"],["usize"]],["option"]]],[11,"last","","",7,[[["self"]],["option"]]],[11,"next_back","","",7,[[["self"]],["option"]]],[11,"len","","",7,[[["self"]],["usize"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"size_hint","","",8,N],[11,"count","","",8,[[["self"]],["usize"]]],[11,"nth","","",8,[[["self"],["usize"]],["option"]]],[11,"last","","",8,[[["self"]],["option"]]],[11,"next_back","","",8,[[["self"]],["option"]]],[11,"len","","",8,[[["self"]],["usize"]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"count","","",9,[[["self"]],["usize"]]],[11,"nth","","",9,[[["self"],["usize"]],["option"]]],[11,"last","","",9,[[["self"]],["option"]]],[11,"next_back","","",9,[[["self"]],["option"]]],[11,"len","","",9,[[["self"]],["usize"]]],[11,"into_iter","","",1,N],[11,"index","","Panics if `key` is not present in the map.",1,[[["self"],["q"]],["v"]]],[11,"index_mut","","Panics if `key` is not present in the map.",1,[[["self"],["q"]],["v"]]],[11,"from_iter","","",1,[[["i"]],["self"]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"default","","",1,[[],["self"]]],[11,"eq","","",1,[[["self"],["ordermap"]],["bool"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[14,"ordermap","","Create an `OrderMap` from a list of key-value pairs",N,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"Entry"],[3,"OrderMap"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["pear"]={"doc":"","items":[[3,"Position","pear","",N,N],[3,"Text","","",N,N],[3,"StringFile","","",N,N],[3,"ParseError","","",N,N],[12,"parser","","",0,N],[12,"expected","","",0,N],[4,"Expected","","",N,N],[13,"Token","","",1,N],[13,"Slice","","",1,N],[13,"Custom","","",1,N],[13,"EOF","","",1,N],[4,"ParseResult","","",N,N],[13,"Done","","",2,N],[13,"Error","","",2,N],[5,"error","","",N,[[["str"],["expected"]],["parseresult"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["position"]],["bool"]]],[11,"ne","","",3,[[["self"],["position"]],["bool"]]],[11,"clone","","",3,[[["self"]],["position"]]],[11,"hash","","",3,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from","","",4,[[["str"]],["text"]]],[11,"peek","","",4,[[["self"]],["option"]]],[11,"peek_slice","","",4,N],[11,"skip_many","","",4,[[["self"],["f"]],["usize"]]],[11,"take_many","","",4,N],[11,"advance","","",4,[[["self"],["usize"]]]],[11,"is_empty","","",4,[[["self"]],["bool"]]],[11,"context","","",4,[[["self"]],["option",["position"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"open","","",5,[[["str"]],["result",["stringfile"]]]],[11,"open_with_cap","","",5,[[["str"],["usize"]],["result",["stringfile"]]]],[11,"new","","",5,[[["file"],["usize"]],["stringfile"]]],[11,"available","","",5,[[["self"]],["usize"]]],[11,"peek","","",5,[[["self"]],["option"]]],[11,"take_many","","",5,N],[11,"skip_many","","",5,[[["self"],["f"]],["usize"]]],[11,"peek_slice","","",5,N],[11,"advance","","",5,[[["self"],["usize"]]]],[11,"is_empty","","",5,[[["self"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["expected"]]],[11,"eq","","",1,[[["self"],["expected"]],["bool"]]],[11,"ne","","",1,[[["self"],["expected"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["parseerror"]]],[11,"eq","","",0,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",0,[[["self"],["parseerror"]],["bool"]]],[11,"custom","","",0,[[["str"],["t"]],["parseresult"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"unwrap","","",2,[[["self"]],["r"]]],[11,"map","","",2,[[["self"],["f"]],["result",["parseerror"]]]],[11,"ok","","",2,[[["self"]],["option"]]],[11,"from","","",2,[[["result"]],["parseresult"]]],[11,"into","","",2,[[["self"]],["result",["parseerror"]]]],[0,"combinators","","",N,N],[5,"many","pear::combinators","",N,[[["i"],["f"]],["parseresult"]]],[5,"surrounded","","",N,[[["i"],["p"],["f"]],["parseresult"]]],[0,"utils","pear","",N,N],[0,"parsers","","",N,N],[5,"eat","pear::parsers","",N,N],[5,"eat_if","","",N,[[["i"],["f"]],["parseresult"]]],[5,"eat_slice","","",N,N],[5,"eat_any","","",N,[[["i"]],["parseresult"]]],[5,"peek","","",N,N],[5,"peek_if","","",N,[[["i"],["f"]],["parseresult"]]],[5,"peek_slice","","",N,N],[5,"skip_while","","",N,[[["i"],["f"]],["parseresult"]]],[5,"take_some_while","","",N,[[["i"],["f"]],["parseresult"]]],[5,"take_while","","",N,[[["i"],["f"]],["parseresult"]]],[5,"take_n","","Takes at most `num` inputs.",N,[[["i"],["usize"]],["parseresult"]]],[5,"take_n_while","","Takes at most `num` inputs as long as `condition` holds.",N,[[["i"],["usize"],["f"]],["parseresult"]]],[5,"delimited","","",N,N],[5,"eof","","",N,[[["i"]],["parseresult"]]],[8,"Length","pear","",N,N],[10,"len","","",6,[[["self"]],["usize"]]],[8,"Input","","",N,N],[16,"Token","","",7,N],[16,"Slice","","",7,N],[16,"InSlice","","",7,N],[16,"Many","","",7,N],[16,"Context","","",7,N],[10,"peek","","",7,[[["self"]],["option"]]],[10,"peek_slice","","",7,N],[10,"advance","","",7,[[["self"],["usize"]]]],[10,"is_empty","","",7,[[["self"]],["bool"]]],[10,"take_many","","",7,N],[10,"skip_many","","",7,[[["self"],["f"]],["usize"]]],[11,"context","","",7,[[["self"]],["option"]]],[14,"switch","","",N,N],[14,"try_switch","","",N,N],[14,"any","","",N,N],[14,"maybe","","",N,N],[14,"repeat","","",N,N],[14,"try_repeat","","",N,N],[14,"try_repeat_while","","",N,N],[14,"repeat_while","","",N,N],[14,"switch_repeat","","",N,N],[14,"collect","","",N,N],[14,"whitelist","","",N,N],[14,"unlift","","",N,N],[14,"from","","",N,N],[14,"parse_error","","",N,N],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"context","","",7,[[["self"]],["option"]]]],"paths":[[3,"ParseError"],[4,"Expected"],[4,"ParseResult"],[3,"Position"],[3,"Text"],[3,"StringFile"],[8,"Length"],[8,"Input"]]};
searchIndex["pear_codegen"]={"doc":"","items":[[5,"plugin_registrar","pear_codegen","Compiler hook for Rust to register plugins.",N,[[["registry"]]]]],"paths":[]};
searchIndex["percent_encoding"]={"doc":"URLs use special chacters to indicate the parts of the request.  For example, a forward slash indicates a path.  In order for that charcter to exist outside of a path separator, that charcter would need to be encoded.","items":[[3,"SIMPLE_ENCODE_SET","percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",N,N],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",N,N],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",N,N],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",N,N],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",N,N],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",N,N],[3,"PercentDecode","","The return type of `percent_decode()`.",N,N],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",N,[[["u8"]],["str"]]],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",N,N],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",N,[[["str"],["e"]],["percentencode"]]],[5,"percent_decode","","Percent-decode the given bytes.",N,N],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",N,N],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",0,[[["self"],["u8"]],["bool"]]],[11,"clone","","",1,[[["self"]],["simple_encode_set"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"contains","","",1,[[["self"],["u8"]],["bool"]]],[11,"clone","","",2,[[["self"]],["query_encode_set"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"contains","","",2,[[["self"],["u8"]],["bool"]]],[11,"clone","","",3,[[["self"]],["default_encode_set"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"contains","","",3,[[["self"],["u8"]],["bool"]]],[11,"clone","","",4,[[["self"]],["path_segment_encode_set"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"contains","","",4,[[["self"],["u8"]],["bool"]]],[11,"clone","","",5,[[["self"]],["userinfo_encode_set"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"contains","","",5,[[["self"],["u8"]],["bool"]]],[11,"clone","","",6,[[["self"]],["percentencode"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"next","","",6,[[["self"]],["option",["str"]]]],[11,"size_hint","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["percentdecode"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"next","","",7,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",7,N],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",7,[[["self"]],["option",["vec"]]]],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",7,[[["self"]],["result",["cow","utf8error"]]]],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",7,[[["self"]],["cow",["str"]]]],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",N,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]]],"paths":[[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"]]};
searchIndex["proc_macro2"]={"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",N,N],[3,"LexError","","Error returned from `TokenStream::from_str`.",N,N],[3,"Span","","A region of source code, along with macro expansion information.",N,N],[3,"Group","","A delimited token stream.",N,N],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",N,N],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",N,N],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",N,N],[13,"Group","","A token stream surrounded by bracket delimiters.",0,N],[13,"Ident","","An identifier.",0,N],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,N],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,N],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",N,N],[13,"Parenthesis","","`( ... )`",1,N],[13,"Brace","","`{ ... }`",1,N],[13,"Bracket","","`[ ... ]`",1,N],[13,"None","","`Ø ... Ø`",1,N],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",N,N],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,N],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,N],[11,"from","","",3,[[["span"]],["span"]]],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",N,N],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",N,N],[11,"next","","",4,[[["self"]],["option",["tokentree"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"into_iter","proc_macro2","",5,[[["self"]],["intoiter"]]],[11,"clone","","",5,[[["self"]],["tokenstream"]]],[11,"new","","Returns an empty `TokenStream` containing no token trees.",5,[[],["tokenstream"]]],[11,"empty","","",5,[[],["tokenstream"]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",5,[[["self"]],["bool"]]],[11,"default","","",5,[[],["self"]]],[11,"from_str","","",5,[[["str"]],["result",["tokenstream","lexerror"]]]],[11,"from","","",5,[[["tokenstream"]],["tokenstream"]]],[11,"extend","","",5,[[["self"],["i"]]]],[11,"extend","","",5,[[["self"],["i"]]]],[11,"from_iter","","",5,[[["i"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["span"]]],[11,"call_site","","The span of the invocation of the current procedural macro.",3,[[],["span"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["tokentree"]]],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,[[["self"]],["span"]]],[11,"set_span","","Configures the span for only this token.",0,[[["self"],["span"]]]],[11,"from","","",0,[[["group"]],["tokentree"]]],[11,"from","","",0,[[["ident"]],["tokentree"]]],[11,"from","","",0,[[["punct"]],["tokentree"]]],[11,"from","","",0,[[["literal"]],["tokentree"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["delimiter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["delimiter"]],["bool"]]],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",7,[[["delimiter"],["tokenstream"]],["group"]]],[11,"delimiter","","Returns the delimiter of this `Group`",7,[[["self"]],["delimiter"]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",7,[[["self"]],["tokenstream"]]],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",7,[[["self"]],["span"]]],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",7,[[["self"],["span"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["punct"]]],[11,"clone","","",2,[[["self"]],["spacing"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["spacing"]],["bool"]]],[11,"new","","Creates a new `Punct` from the given character and spacing.",8,[[["char"],["spacing"]],["punct"]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",8,[[["self"]],["char"]]],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",8,[[["self"]],["spacing"]]],[11,"span","","Returns the span for this punctuation character.",8,[[["self"]],["span"]]],[11,"set_span","","Configure the span for this punctuation character.",8,[[["self"],["span"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["ident"]]],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",9,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",9,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",9,[[["self"],["span"]]]],[11,"eq","","",9,[[["self"],["ident"]],["bool"]]],[11,"eq","","",9,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",9,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["literal"]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"f64_unsuffixed","","",10,[[["f64"]],["literal"]]],[11,"f64_suffixed","","",10,[[["f64"]],["literal"]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",10,[[["f32"]],["literal"]]],[11,"f32_suffixed","","",10,[[["f32"]],["literal"]]],[11,"string","","",10,[[["str"]],["literal"]]],[11,"character","","",10,[[["char"]],["literal"]]],[11,"byte_string","","",10,N],[11,"span","","",10,[[["self"]],["span"]]],[11,"set_span","","",10,[[["self"],["span"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"not_found","","",5,[[["str"],["str"]],["e"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"not_found","","",6,[[["str"],["str"]],["e"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"not_found","","",3,[[["str"],["str"]],["e"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"not_found","","",7,[[["str"],["str"]],["e"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"not_found","","",8,[[["str"],["str"]],["e"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"not_found","","",9,[[["str"],["str"]],["e"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"not_found","","",10,[[["str"],["str"]],["e"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"not_found","","",0,[[["str"],["str"]],["e"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"not_found","","",1,[[["str"],["str"]],["e"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"not_found","","",2,[[["str"],["str"]],["e"]]],[11,"from","proc_macro2::token_stream","",4,[[["t"]],["t"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"not_found","","",4,[[["str"],["str"]],["e"]]]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"Span"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["quote"]={"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",N,N],[10,"append","","",0,[[["self"],["u"]]]],[10,"append_all","","",0,[[["self"],["i"]]]],[10,"append_separated","","",0,[[["self"],["i"],["u"]]]],[10,"append_terminated","","",0,[[["self"],["i"],["u"]]]],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",N,N],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,[[["self"],["tokenstream"]]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]],[14,"quote","","The whole point.",N,N],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",N,N],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["r2d2"]={"doc":"A generic connection pool.","items":[[3,"Builder","r2d2","A builder for a connection pool.",N,N],[3,"NopErrorHandler","","A `HandleError` implementation which does nothing.",N,N],[3,"LoggingErrorHandler","","A `HandleError` implementation which logs at the error level.",N,N],[3,"NopConnectionCustomizer","","A `CustomizeConnection` which does nothing.",N,N],[3,"Pool","","A generic connection pool.",N,N],[3,"Error","","The error type returned by methods in this crate.",N,N],[3,"State","","Information about the state of a `Pool`.",N,N],[12,"connections","","The number of connections currently being managed by the pool.",0,N],[12,"idle_connections","","The number of idle connections.",0,N],[3,"PooledConnection","","A smart pointer wrapping a connection.",N,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["builder"]]],[11,"new","","Constructs a new `Builder`.",1,[[],["builder"]]],[11,"max_size","","Sets the maximum number of connections managed by the pool.",1,[[["self"],["u32"]],["builder"]]],[11,"min_idle","","Sets the minimum idle connection count maintained by the pool.",1,[[["self"],["option",["u32"]]],["builder"]]],[11,"thread_pool","","Sets the thread pool used for asynchronous operations such as connection creation.",1,[[["self"],["arc",["scheduledthreadpool"]]],["builder"]]],[11,"test_on_check_out","","If true, the health of a connection will be verified via a call to `ConnectionManager::is_valid` before it is checked out of the pool.",1,[[["self"],["bool"]],["builder"]]],[11,"max_lifetime","","Sets the maximum lifetime of connections in the pool.",1,[[["self"],["option",["duration"]]],["builder"]]],[11,"idle_timeout","","Sets the idle timeout used by the pool.",1,[[["self"],["option",["duration"]]],["builder"]]],[11,"connection_timeout","","Sets the connection timeout used by the pool.",1,[[["self"],["duration"]],["builder"]]],[11,"error_handler","","Sets the handler for errors reported in the pool.",1,[[["self"],["box",["handleerror"]]],["builder"]]],[11,"connection_customizer","","Sets the connection customizer used by the pool.",1,[[["self"],["box",["customizeconnection"]]],["builder"]]],[11,"build","","Consumes the builder, returning a new, initialized pool.",1,[[["self"],["m"]],["result",["pool","error"]]]],[11,"build_unchecked","","Consumes the builder, returning a new pool.",1,[[["self"],["m"]],["pool"]]],[8,"ManageConnection","","A trait which provides connection-specific functionality.",N,N],[16,"Connection","","The connection type this manager deals with.",2,N],[16,"Error","","The error type returned by `Connection`s.",2,N],[10,"connect","","Attempts to create a new connection.",2,[[["self"]],["result"]]],[10,"is_valid","","Determines if the connection is still connected to the database.",2,N],[10,"has_broken","","Quickly determines if the connection is no longer usable.",2,N],[8,"HandleError","","A trait which handles errors reported by the `ManageConnection`.",N,N],[10,"handle_error","","Handles an error.",3,[[["self"],["e"]]]],[8,"CustomizeConnection","","A trait which allows for customization of connections.",N,N],[11,"on_acquire","","Called with connections immediately after they are returned from `ManageConnection::connect`.",4,[[["self"],["c"]],["result"]]],[11,"on_release","","Called with connections when they are removed from the pool.",4,[[["self"],["c"]]]],[11,"clone","","",5,[[["self"]],["noperrorhandler"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"handle_error","","",5,[[["self"],["e"]]]],[11,"clone","","",6,[[["self"]],["loggingerrorhandler"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"handle_error","","",6,[[["self"],["e"]]]],[11,"clone","","",7,[[["self"]],["nopconnectioncustomizer"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["pool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new connection pool with a default configuration.",8,[[["m"]],["result",["pool","error"]]]],[11,"builder","","Returns a builder type to configure a new pool.",8,[[],["builder"]]],[11,"get","","Retrieves a connection from the pool.",8,[[["self"]],["result",["pooledconnection","error"]]]],[11,"try_get","","Attempts to retrieve a connection from the pool if there is one available.",8,[[["self"]],["option",["pooledconnection"]]]],[11,"state","","Returns information about the current state of the pool.",8,[[["self"]],["state"]]],[11,"max_size","","Returns the configured maximum pool size.",8,[[["self"]],["u32"]]],[11,"min_idle","","Returns the configured mimimum idle connection count.",8,[[["self"]],["option",["u32"]]]],[11,"test_on_check_out","","Returns if the pool is configured to test connections on check out.",8,[[["self"]],["bool"]]],[11,"max_lifetime","","Returns the configured maximum connection lifetime.",8,[[["self"]],["option",["duration"]]]],[11,"idle_timeout","","Returns the configured idle connection timeout.",8,[[["self"]],["option",["duration"]]]],[11,"connection_timeout","","Returns the configured connection timeout.",8,[[["self"]],["duration"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"description","","",9,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"drop","","",10,[[["self"]]]],[11,"deref","","",10,N],[11,"deref_mut","","",10,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]]],"paths":[[3,"State"],[3,"Builder"],[8,"ManageConnection"],[8,"HandleError"],[8,"CustomizeConnection"],[3,"NopErrorHandler"],[3,"LoggingErrorHandler"],[3,"NopConnectionCustomizer"],[3,"Pool"],[3,"Error"],[3,"PooledConnection"]]};
searchIndex["rand"]={"doc":"Utilities for random number generation","items":[[3,"OsRng","rand","A random number generator that retrieves randomness straight from the operating system. Platform sources:",N,N],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm[1].",N,N],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",N,N],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",N,N],[0,"isaac","","The ISAAC random number generator.",N,N],[3,"Isaac64Rng","rand::isaac","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",N,N],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm[1].",N,N],[0,"chacha","rand","The ChaCha random number generator.",N,N],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",N,N],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",N,N],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",N,N],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",0,N],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",N,N],[10,"reseed","","Reseed the given RNG.",1,N],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",N,N],[0,"os","rand","Interfaces to the operating system provided random number generators.",N,N],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",N,N],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",N,N],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",N,N],[8,"Rng","rand","A random number generator.",N,N],[10,"next_u32","","Return the next random u32.",2,[[["self"]],["u32"]]],[11,"next_u64","","Return the next random u64.",2,[[["self"]],["u64"]]],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",2,[[["self"]],["f32"]]],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",2,[[["self"]],["f64"]]],[11,"fill_bytes","","Fill `dest` with random data.",2,N],[11,"gen","","Return a random value of a `Rand` type.",2,[[["self"]],["t"]]],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",2,[[["self"]],["generator"]]],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",2,[[["self"],["t"],["t"]],["t"]]],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",2,[[["self"],["u32"]],["bool"]]],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",2,[[["self"]],["asciigenerator"]]],[11,"choose","","Return a random element from `values`.",2,N],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",2,N],[11,"shuffle","","Shuffle a mutable slice in place.",2,N],[8,"Rand","","A type that can be randomly generated using an `Rng`.",N,N],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",3,[[["r"]],["self"]]],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",N,N],[10,"reseed","","Reseed an RNG with the given seed.",4,N],[10,"from_seed","","Create a new RNG with the given seed.",4,[[["seed"]],["self"]]],[3,"Generator","","Iterator which will generate a stream of random items.",N,N],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",N,N],[3,"XorShiftRng","","An Xorshift[1] random number generator.",N,N],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",N,N],[12,"0","","",5,N],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",N,N],[12,"0","","",6,N],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",N,N],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",N,[[],["xorshiftrng"]]],[3,"ThreadRng","","The thread-local RNG.",N,N],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",N,[[],["threadrng"]]],[5,"random","","Generates a random value using the thread-local random number generator.",N,[[],["t"]]],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",N,[[["r"],["i"],["usize"]],["vec"]]],[0,"distributions","","Sampling from random distributions.",N,N],[3,"Range","rand::distributions","Sample values uniformly between two bounds.",N,N],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",N,N],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",N,N],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",N,N],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[3,"Exp","","The exponential distribution `Exp(lambda)`.",N,N],[0,"range","","Generating numbers between two others.",N,N],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",N,N],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",N,N],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",7,[[["self"],["self"]],["range"]]],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",7,[[["range"],["r"]],["self"]]],[0,"gamma","rand::distributions","The Gamma and derived distributions.",N,N],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",N,N],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",N,N],[0,"normal","rand::distributions","The normal and derived distributions.",N,N],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",N,N],[12,"0","","",8,N],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",N,N],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[0,"exponential","rand::distributions","The exponential distribution.",N,N],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",N,N],[12,"0","","",9,N],[3,"Exp","","The exponential distribution `Exp(lambda)`.",N,N],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",N,N],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",10,[[["self"],["r"]],["support"]]],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",N,N],[10,"ind_sample","","Generate a random value.",11,[[["self"],["r"]],["support"]]],[3,"RandSample","","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",N,N],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",N,N],[12,"weight","","The numerical weight of this item",12,N],[12,"item","","The actual item which is being weighted",12,N],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",N,N],[11,"new","rand::os","Create a new `OsRng`.",13,[[],["result",["osrng","error"]]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"reseed","rand::reseeding","",14,N],[11,"next_u32","rand::read","",15,[[["self"]],["u32"]]],[11,"next_u64","","",15,[[["self"]],["u64"]]],[11,"fill_bytes","","",15,N],[11,"next_u32","rand","",16,[[["self"]],["u32"]]],[11,"next_u32","","",17,[[["self"]],["u32"]]],[11,"next_u64","","",17,[[["self"]],["u64"]]],[11,"next_u32","rand::chacha","",18,[[["self"]],["u32"]]],[11,"next_u32","rand::os","",13,[[["self"]],["u32"]]],[11,"next_u64","","",13,[[["self"]],["u64"]]],[11,"fill_bytes","","",13,N],[11,"next_u32","rand::reseeding","",0,[[["self"]],["u32"]]],[11,"next_u64","","",0,[[["self"]],["u64"]]],[11,"fill_bytes","","",0,N],[11,"next_u32","rand::isaac","",19,[[["self"]],["u32"]]],[11,"next_u32","","",20,[[["self"]],["u32"]]],[11,"next_u64","","",20,[[["self"]],["u64"]]],[11,"next_u32","rand","",21,[[["self"]],["u32"]]],[11,"next_u64","","",21,[[["self"]],["u64"]]],[11,"fill_bytes","","",21,N],[11,"ind_sample","rand::distributions::range","",22,[[["self"],["r"]],["sup"]]],[11,"ind_sample","rand::distributions::exponential","",23,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions","",24,[[["self"],["r"]],["t"]]],[11,"ind_sample","","",25,[[["self"],["r"]],["sup"]]],[11,"ind_sample","rand::distributions::normal","",26,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::gamma","",27,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",28,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",29,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::normal","",30,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::gamma","",31,[[["self"],["r"]],["f64"]]],[11,"fmt","rand::distributions::exponential","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::gamma","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::reseeding","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::normal","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::read","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::range","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::normal","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::os","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::gamma","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::isaac","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::chacha","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::gamma","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::exponential","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::isaac","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::reseeding","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::normal","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"rand","rand","",16,[[["r"]],["xorshiftrng"]]],[11,"rand","","",6,[[["r"]],["closed01",["f64"]]]],[11,"rand","","",5,[[["r"]],["open01",["f64"]]]],[11,"rand","rand::chacha","",18,[[["r"]],["chacharng"]]],[11,"rand","rand::isaac","",19,[[["r"]],["isaacrng"]]],[11,"rand","rand::distributions::exponential","",9,[[["r"]],["exp1"]]],[11,"rand","rand::isaac","",20,[[["r"]],["isaac64rng"]]],[11,"rand","rand::distributions::normal","",8,[[["r"]],["standardnormal"]]],[11,"rand","rand","",6,[[["r"]],["closed01",["f32"]]]],[11,"rand","","",5,[[["r"]],["open01",["f32"]]]],[11,"clone","","",21,[[["self"]],["threadrng"]]],[11,"clone","rand::distributions::gamma","",27,[[["self"]],["fisherf"]]],[11,"clone","rand::distributions::normal","",26,[[["self"]],["normal"]]],[11,"clone","rand::distributions::gamma","",31,[[["self"]],["studentt"]]],[11,"clone","rand::distributions","",25,[[["self"]],["randsample"]]],[11,"clone","","",12,[[["self"]],["weighted"]]],[11,"clone","rand::distributions::exponential","",9,[[["self"]],["exp1"]]],[11,"clone","rand::isaac","",20,[[["self"]],["isaac64rng"]]],[11,"clone","rand","",16,[[["self"]],["xorshiftrng"]]],[11,"clone","rand::isaac","",19,[[["self"]],["isaacrng"]]],[11,"clone","rand::distributions::gamma","",28,[[["self"]],["chisquared"]]],[11,"clone","rand::distributions::normal","",8,[[["self"]],["standardnormal"]]],[11,"clone","","",30,[[["self"]],["lognormal"]]],[11,"clone","rand::distributions::range","",22,[[["self"]],["range"]]],[11,"clone","rand::distributions::exponential","",23,[[["self"]],["exp"]]],[11,"clone","rand::chacha","",18,[[["self"]],["chacharng"]]],[11,"clone","rand::distributions::gamma","",29,[[["self"]],["gamma"]]],[11,"clone","rand","",17,[[["self"]],["stdrng"]]],[11,"clone","rand::reseeding","",14,[[["self"]],["reseedwithdefault"]]],[11,"default","","",14,[[],["reseedwithdefault"]]],[11,"reseed","rand","",17,N],[11,"from_seed","","",17,N],[11,"reseed","rand::isaac","",20,N],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",20,N],[11,"reseed","rand::reseeding","",0,N],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",0,N],[11,"reseed","rand","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",16,N],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",16,N],[11,"reseed","rand::isaac","",19,N],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,N],[11,"reseed","rand::chacha","",18,N],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",18,N],[11,"next","rand","",32,[[["self"]],["option"]]],[11,"next","","",33,[[["self"]],["option",["char"]]]],[11,"sample","rand::distributions","",24,[[["self"],["r"]],["t"]]],[11,"sample","rand::distributions::range","",22,[[["self"],["r"]],["sup"]]],[11,"sample","rand::distributions::gamma","",28,[[["self"],["r"]],["f64"]]],[11,"sample","","",31,[[["self"],["r"]],["f64"]]],[11,"sample","","",27,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::exponential","",23,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::normal","",30,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions","",25,[[["self"],["r"]],["sup"]]],[11,"sample","rand::distributions::gamma","",29,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::normal","",26,[[["self"],["r"]],["f64"]]],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default fixed seed.",19,[[],["isaacrng"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",20,[[],["isaac64rng"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"new_unseeded","rand::chacha","Create an ChaCha random number generator using the default fixed key of 8 zero words.",18,[[],["chacharng"]]],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",0,[[["r"],["u64"],["rsdr"]],["reseedingrng"]]],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"new","rand::read","Create a new `ReadRng` from a `Read`.",15,[[["r"]],["readrng"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","rand","",32,[[["t"]],["t"]]],[11,"into_iter","","",32,[[["self"]],["i"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into_iter","","",33,[[["self"]],["i"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",16,[[],["xorshiftrng"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"new","","Create a randomly seeded instance of `StdRng`.",17,[[],["result",["stdrng","error"]]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",22,[[["x"],["x"]],["range"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)` distribution.",29,[[["f64"],["f64"]],["gamma"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",28,[[["f64"]],["chisquared"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",27,[[["f64"],["f64"]],["fisherf"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",31,[[["f64"]],["studentt"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"new","rand::distributions::normal","Construct a new `Normal` distribution with the given mean and standard deviation.",26,[[["f64"],["f64"]],["normal"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",30,[[["f64"],["f64"]],["lognormal"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"new","rand::distributions::exponential","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",23,[[["f64"]],["exp"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","rand::distributions::normal","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","rand::distributions::exponential","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"new","rand::distributions","",25,[[],["randsample"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"new","","Create a new `WeightedChoice`.",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]]],"paths":[[3,"ReseedingRng"],[8,"Reseeder"],[8,"Rng"],[8,"Rand"],[8,"SeedableRng"],[3,"Open01"],[3,"Closed01"],[8,"SampleRange"],[3,"StandardNormal"],[3,"Exp1"],[8,"Sample"],[8,"IndependentSample"],[3,"Weighted"],[3,"OsRng"],[3,"ReseedWithDefault"],[3,"ReadRng"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ChaChaRng"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ThreadRng"],[3,"Range"],[3,"Exp"],[3,"WeightedChoice"],[3,"RandSample"],[3,"Normal"],[3,"FisherF"],[3,"ChiSquared"],[3,"Gamma"],[3,"LogNormal"],[3,"StudentT"],[3,"Generator"],[3,"AsciiGenerator"]]};
searchIndex["rand_core"]={"doc":"Random number generation traits","items":[[3,"Error","rand_core","Error type of random number generators",N,N],[12,"kind","","The error kind",0,N],[12,"msg","","The error message",0,N],[4,"ErrorKind","","Error kind which can be matched over.",N,N],[13,"Unavailable","","Feature is not available; not recoverable.",1,N],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",1,N],[13,"Transient","","A transient failure which likely can be resolved or worked around.",1,N],[13,"NotReady","","Not ready yet: recommended to try again a little later.",1,N],[11,"eq","","",1,[[["self"],["errorkind"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["errorkind"]]],[11,"should_retry","","True if this kind of error may resolve itself on retry.",1,[[["self"]],["bool"]]],[11,"should_wait","","True if we should retry but wait before retrying",1,[[["self"]],["bool"]]],[11,"description","","A description of this error kind",1,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new instance, with specified kind and a message.",0,[[["errorkind"],["str"]],["self"]]],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",0,[[["errorkind"],["str"],["e"]],["self"]]],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",0,[[["self"]],["option",["box"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["stderror"]]]],[0,"block","","The `BlockRngCore` trait and implementation helpers",N,N],[3,"BlockRng","rand_core::block","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",N,N],[12,"core","","The core part of the RNG, implementing the `generate` function.",2,N],[3,"BlockRng64","","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",N,N],[12,"core","","The core part of the RNG, implementing the `generate` function.",3,N],[8,"BlockRngCore","","A trait for RNGs which do not generate random numbers individually, but in blocks (typically `[u32; N]`). This technique is commonly used by cryptographic RNGs to improve performance.",N,N],[16,"Item","","Results element type, e.g. `u32`.",4,N],[16,"Results","","Results type. This is the 'block' an RNG implementing `BlockRngCore` generates, which will usually be an array like `[u32; 16]`.",4,N],[10,"generate","","Generate a new block of results.",4,N],[11,"clone","","",2,[[["self"]],["blockrng"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",2,[[["r"]],["blockrng"]]],[11,"index","","Get the index into the result buffer.",2,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",2,[[["self"]]]],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",2,[[["self"],["usize"]]]],[11,"next_u32","","",2,[[["self"]],["u32"]]],[11,"next_u64","","",2,[[["self"]],["u64"]]],[11,"fill_bytes","","",2,N],[11,"try_fill_bytes","","",2,N],[11,"from_seed","","",2,N],[11,"from_rng","","",2,[[["s"]],["result",["error"]]]],[11,"clone","","",3,[[["self"]],["blockrng64"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",3,[[["r"]],["blockrng64"]]],[11,"index","","Get the index into the result buffer.",3,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",3,[[["self"]]]],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",3,[[["self"],["usize"]]]],[11,"next_u32","","",3,[[["self"]],["u32"]]],[11,"next_u64","","",3,[[["self"]],["u64"]]],[11,"fill_bytes","","",3,N],[11,"try_fill_bytes","","",3,N],[11,"from_seed","","",3,N],[11,"from_rng","","",3,[[["s"]],["result",["error"]]]],[0,"impls","rand_core","Helper functions for implementing `RngCore` functions.",N,N],[5,"next_u64_via_u32","rand_core::impls","Implement `next_u64` via `next_u32`, little-endian order.",N,[[["r"]],["u64"]]],[5,"fill_bytes_via_next","","Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.",N,N],[5,"fill_via_u32_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",N,N],[5,"fill_via_u64_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",N,N],[5,"next_u32_via_fill","","Implement `next_u32` via `fill_bytes`, little-endian order.",N,[[["r"]],["u32"]]],[5,"next_u64_via_fill","","Implement `next_u64` via `fill_bytes`, little-endian order.",N,[[["r"]],["u64"]]],[0,"le","rand_core","Little-Endian utilities",N,N],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",N,N],[5,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",N,N],[8,"RngCore","rand_core","The core of a random number generator.",N,N],[10,"next_u32","","Return the next random `u32`.",5,[[["self"]],["u32"]]],[10,"next_u64","","Return the next random `u64`.",5,[[["self"]],["u64"]]],[10,"fill_bytes","","Fill `dest` with random data.",5,N],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",5,N],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",N,N],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",N,N],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",6,N],[10,"from_seed","","Create a new PRNG using the given seed.",6,N],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",6,[[["r"]],["result",["error"]]]],[11,"read","","",5,N],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","rand_core::block","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]]],"paths":[[3,"Error"],[4,"ErrorKind"],[3,"BlockRng"],[3,"BlockRng64"],[8,"BlockRngCore"],[8,"RngCore"],[8,"SeedableRng"]]};
searchIndex["ring"]={"doc":"Safe, fast, small crypto using Rust with BoringSSL's cryptography primitives.","items":[[0,"aead","ring","Authenticated Encryption with Associated Data (AEAD).",N,N],[3,"OpeningKey","ring::aead","A key for authenticating and decrypting (“opening”) AEAD-protected data.",N,N],[3,"SealingKey","","A key for encrypting and signing (“sealing”) data.",N,N],[3,"Algorithm","","An AEAD Algorithm.",N,N],[5,"open_in_place","","Authenticates and decrypts (“opens”) data in place. When",N,N],[5,"seal_in_place","","Encrypts and signs (“seals”) data in place.",N,N],[0,"chacha20_poly1305_openssh","","The [chacha20-poly1305@openssh.com] AEAD-ish construct.",N,N],[3,"SealingKey","ring::aead::chacha20_poly1305_openssh","A key for sealing packets.",N,N],[3,"OpeningKey","","A key for opening packets.",N,N],[17,"KEY_LEN","","The length of key.",N,N],[17,"TAG_LEN","","The length of a tag.",N,N],[17,"PACKET_LENGTH_LEN","","The length in bytes of the `packet_length` field in a SSH packet.",N,N],[11,"new","","Constructs a new `SealingKey`.",0,N],[11,"seal_in_place","","Seals (encrypts and signs) a packet.",0,N],[11,"new","","Constructs a new `OpeningKey`.",1,N],[11,"decrypt_packet_length","","Returns the decrypted, but unauthenticated, packet length.",1,N],[11,"open_in_place","","Opens (authenticates and decrypts) a packet.",1,N],[7,"CHACHA20_POLY1305","ring::aead","ChaCha20-Poly1305 as described in [RFC 7539].",N,N],[7,"AES_128_GCM","","AES-128 in GCM mode with 128-bit tags and 96 bit nonces.",N,N],[7,"AES_256_GCM","","AES-256 in GCM mode with 128-bit tags and 96 bit nonces.",N,N],[17,"MAX_TAG_LEN","","The maximum length of a tag for the algorithms in this module.",N,N],[11,"new","","Create a new opening key.",2,N],[11,"algorithm","","The key's AEAD algorithm.",2,[[["self"]],["algorithm"]]],[11,"new","","C analogs: `EVP_AEAD_CTX_init_with_direction` with direction            `evp_aead_seal`, `EVP_AEAD_CTX_init`.",3,N],[11,"algorithm","","The key's AEAD algorithm.",3,[[["self"]],["algorithm"]]],[11,"key_len","","The length of the key.",4,[[["self"]],["usize"]]],[11,"tag_len","","The length of a tag.",4,[[["self"]],["usize"]]],[11,"nonce_len","","The length of the nonces.",4,[[["self"]],["usize"]]],[0,"agreement","ring","Key Agreement: ECDH, including X25519.",N,N],[3,"Algorithm","ring::agreement","A key agreement algorithm.",N,N],[3,"EphemeralPrivateKey","","An ephemeral private key for use (only) with `agree_ephemeral`. The signature of `agree_ephemeral` ensures that an `EphemeralPrivateKey` can be used for at most one key agreement.",N,N],[5,"agree_ephemeral","","Performs a key agreement with an ephemeral private key and the given public key.",N,[[["ephemeralprivatekey"],["algorithm"],["input"],["e"],["f"]],["result"]]],[7,"ECDH_P256","","ECDH using the NSA Suite B P-256 (secp256r1) curve.",N,N],[7,"ECDH_P384","","ECDH using the NSA Suite B P-384 (secp384r1) curve.",N,N],[7,"X25519","","X25519 (ECDH using Curve25519) as described in [RFC 7748].",N,N],[17,"PUBLIC_KEY_MAX_LEN","","The maximum length, in bytes, of an encoded public key.",N,N],[11,"generate","","Generate a new ephemeral private key for the given algorithm.",5,[[["algorithm"],["securerandom"]],["result",["ephemeralprivatekey","unspecified"]]]],[11,"algorithm","","The key exchange algorithm.",5,[[["self"]],["algorithm"]]],[11,"public_key_len","","The size in bytes of the encoded public key.",5,[[["self"]],["usize"]]],[11,"compute_public_key","","Computes the public key from the private key's value and fills `out` with the public point encoded in the standard form for the algorithm.",5,N],[0,"constant_time","ring","Constant-time operations.",N,N],[5,"verify_slices_are_equal","ring::constant_time","Returns `Ok(())` if `a == b` and `Err(error::Unspecified)` otherwise. The comparison of `a` and `b` is done in constant time with respect to the contents of each, but NOT in constant time with respect to the lengths of `a` and `b`.",N,N],[0,"digest","ring","SHA-2 and the legacy SHA-1 digest algorithm.",N,N],[3,"Context","ring::digest","A context for multi-step (Init-Update-Finish) digest calculations.",N,N],[12,"algorithm","","The context's algorithm.",6,N],[3,"Digest","","A calculated digest value.",N,N],[3,"Algorithm","","A digest algorithm.",N,N],[12,"output_len","","C analog: `EVP_MD_size`",7,N],[12,"chaining_len","","The size of the chaining value of the digest function, in bytes. For non-truncated algorithms (SHA-1, SHA-256, SHA-512), this is equal to `output_len`. For truncated algorithms (e.g. SHA-384, SHA-512/256), this is equal to the length before truncation. This is mostly helpful for determining the size of an HMAC key that is appropriate for the digest algorithm.",7,N],[12,"block_len","","C analog: `EVP_MD_block_size`",7,N],[5,"digest","","Returns the digest of `data` using the given digest algorithm.",N,N],[7,"SHA1","","SHA-1 as specified in [FIPS 180-4]. Deprecated.",N,N],[7,"SHA256","","SHA-256 as specified in [FIPS 180-4].",N,N],[7,"SHA384","","SHA-384 as specified in [FIPS 180-4].",N,N],[7,"SHA512","","SHA-512 as specified in [FIPS 180-4].",N,N],[7,"SHA512_256","","SHA-512/256 as specified in [FIPS 180-4].",N,N],[17,"MAX_BLOCK_LEN","","The maximum block length (`Algorithm::block_len`) of all the algorithms in this module.",N,N],[17,"MAX_OUTPUT_LEN","","The maximum output length (`Algorithm::output_len`) of all the algorithms in this module.",N,N],[17,"MAX_CHAINING_LEN","","The maximum chaining length (`Algorithm::chaining_len`) of all the algorithms in this module.",N,N],[17,"SHA1_OUTPUT_LEN","","The length of the output of SHA-1, in bytes.",N,N],[17,"SHA256_OUTPUT_LEN","","The length of the output of SHA-256, in bytes.",N,N],[17,"SHA384_OUTPUT_LEN","","The length of the output of SHA-384, in bytes.",N,N],[17,"SHA512_OUTPUT_LEN","","The length of the output of SHA-512, in bytes.",N,N],[17,"SHA512_256_OUTPUT_LEN","","The length of the output of SHA-512/256, in bytes.",N,N],[11,"new","","Constructs a new context.",6,[[["algorithm"]],["context"]]],[11,"update","","Updates the digest with all the data in `data`. `update` may be called zero or more times until `finish` is called. It must not be called after `finish` has been called.",6,N],[11,"finish","","Finalizes the digest calculation and returns the digest value. `finish` consumes the context so it cannot be (mis-)used after `finish` has been called.",6,[[["self"]],["digest"]]],[11,"algorithm","","The algorithm that this context is using.",6,[[["self"]],["algorithm"]]],[11,"clone","","",6,[[["self"]],["context"]]],[11,"clone","","",8,[[["self"]],["digest"]]],[11,"algorithm","","The algorithm that was used to calculate the digest value.",8,[[["self"]],["algorithm"]]],[11,"as_ref","","",8,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[0,"error","ring","Error reporting.",N,N],[3,"Unspecified","ring::error","An error with absolutely no details.",N,N],[11,"clone","","",9,[[["self"]],["unspecified"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["unspecified"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"cause","","",9,[[["self"]],["option",["error"]]]],[11,"description","","",9,[[["self"]],["str"]]],[11,"from","","",9,[[["endofinput"]],["self"]]],[0,"hkdf","ring","HMAC-based Extract-and-Expand Key Derivation Function.",N,N],[5,"extract_and_expand","ring::hkdf","Fills `out` with the output of the HKDF Extract-and-Expand operation for the given inputs.",N,N],[5,"extract","","The HKDF-Extract operation.",N,N],[5,"expand","","Fills `out` with the output of the HKDF-Expand operation for the given inputs.",N,N],[0,"hmac","ring","HMAC is specified in [RFC 2104].",N,N],[3,"Signature","ring::hmac","An HMAC signature.",N,N],[3,"SigningKey","","A key to use for HMAC signing.",N,N],[3,"SigningContext","","A context for multi-step (Init-Update-Finish) HMAC signing.",N,N],[3,"VerificationKey","","A key to use for HMAC authentication.",N,N],[5,"sign","","Calculates the HMAC of `data` using the key `key` in one step.",N,N],[5,"verify","","Calculates the HMAC of `data` using the key `key`, and verifies whether the resultant value equals `signature`, in one step.",N,N],[5,"verify_with_own_key","","Calculates the HMAC of `data` using the signing key `key`, and verifies whether the resultant value equals `signature`, in one step.",N,N],[5,"recommended_key_len","","Returns the recommended key length for HMAC using the given digest algorithm.",N,[[["algorithm"]],["usize"]]],[11,"clone","","",10,[[["self"]],["signature"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",10,N],[11,"generate","","Generate an HMAC signing key using the given digest algorithm with a random value generated from `rng`.",11,[[["algorithm"],["securerandom"]],["result",["signingkey","unspecified"]]]],[11,"generate_serializable","","Generate an HMAC signing key using the given digest algorithm with a random value generated from `rng`, and puts the raw key value in `key_bytes`.",11,N],[11,"new","","Construct an HMAC signing key using the given digest algorithm and key value.",11,N],[11,"digest_algorithm","","The digest algorithm for the key.",11,[[["self"]],["algorithm"]]],[11,"clone","","",12,[[["self"]],["signingcontext"]]],[11,"with_key","","Constructs a new HMAC signing context using the given digest algorithm and key.",12,[[["signingkey"]],["signingcontext"]]],[11,"update","","Updates the HMAC with all the data in `data`. `update` may be called zero or more times until `finish` is called.",12,N],[11,"sign","","Finalizes the HMAC calculation and returns the HMAC value. `sign` consumes the context so it cannot be (mis-)used after `sign` has been called.",12,[[["self"]],["signature"]]],[11,"new","","Construct an HMAC verification key using the given digest algorithm and key value.",13,N],[0,"pbkdf2","ring","PBKDF2 derivation and verification.",N,N],[5,"derive","ring::pbkdf2","Fills `out` with the key derived using PBKDF2 with the given inputs.",N,N],[5,"verify","","Verifies that a previously-derived (e.g., using `derive`) PBKDF2 value matches the PBKDF2 value derived from the other inputs.",N,N],[0,"rand","ring","Cryptographic pseudo-random number generation.",N,N],[3,"SystemRandom","ring::rand","A secure random number generator where the random values come directly from the operating system.",N,N],[8,"SecureRandom","","A secure random number generator.",N,N],[10,"fill","","Fills `dest` with random bytes.",14,N],[11,"new","","Constructs a new `SystemRandom`.",15,[[],["systemrandom"]]],[11,"fill","","",15,N],[0,"signature","ring","Public key signatures: signing and verification.",N,N],[3,"ECDSAVerificationAlgorithm","ring::signature","An ECDSA verification algorithm.",N,N],[3,"EdDSAParameters","","Parameters for EdDSA signing and verification.",N,N],[3,"Ed25519KeyPair","","An Ed25519 key pair, for signing.",N,N],[3,"PKCS8Document","","A generated PKCS#8 document.",N,N],[3,"RSAParameters","","Parameters for RSA verification.",N,N],[3,"Signature","","A public key signature returned from a signing operation.",N,N],[5,"verify","","Verify the signature `signature` of message `msg` with the public key `public_key` using the algorithm `alg`.",N,[[["verificationalgorithm"],["input"],["input"],["input"]],["result",["unspecified"]]]],[0,"primitive","","Lower-level verification primitives. Usage of `ring::signature::verify()` is preferred when the public key and signature are encoded in standard formats, as it also handles the parsing.",N,N],[5,"verify_rsa","ring::signature::primitive","Lower-level API for the verification of RSA signatures.",N,N],[7,"ECDSA_P256_SHA256_ASN1","ring::signature","Verification of ASN.1 DER-encoded ECDSA signatures using the P-256 curve and SHA-256.",N,N],[7,"ECDSA_P256_SHA256_FIXED","","Verification of fixed-length (PKCS#11 style) ECDSA signatures using the P-256 curve and SHA-256.",N,N],[7,"ECDSA_P256_SHA384_ASN1","","Not recommended. Verification of ASN.1 DER-encoded ECDSA signatures using the P-256 curve and SHA-384.",N,N],[7,"ECDSA_P384_SHA256_ASN1","","Not recommended. Verification of ASN.1 DER-encoded ECDSA signatures using the P-384 curve and SHA-256.",N,N],[7,"ECDSA_P384_SHA384_ASN1","","Verification of ASN.1 DER-encoded ECDSA signatures using the P-384 curve and SHA-384.",N,N],[7,"ECDSA_P384_SHA384_FIXED","","Verification of fixed-length (PKCS#11 style) ECDSA signatures using the P-384 curve and SHA-384.",N,N],[7,"ED25519","","Verification of [Ed25519] signatures.",N,N],[7,"RSA_PKCS1_2048_8192_SHA1","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-1.",N,N],[7,"RSA_PKCS1_2048_8192_SHA256","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-256.",N,N],[7,"RSA_PKCS1_2048_8192_SHA384","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-384.",N,N],[7,"RSA_PKCS1_2048_8192_SHA512","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-512.",N,N],[7,"RSA_PKCS1_3072_8192_SHA384","","Verification of signatures using RSA keys of 3072-8192 bits,              PKCS#1.5 padding, and SHA-384.",N,N],[7,"RSA_PSS_2048_8192_SHA256","","Verification of signatures using RSA keys of 2048-8192 bits,              PSS padding, and SHA-256.",N,N],[7,"RSA_PSS_2048_8192_SHA384","","Verification of signatures using RSA keys of 2048-8192 bits,              PSS padding, and SHA-384.",N,N],[7,"RSA_PSS_2048_8192_SHA512","","Verification of signatures using RSA keys of 2048-8192 bits,              PSS padding, and SHA-512.",N,N],[17,"ED25519_PKCS8_V2_LEN","","The length of a Ed25519 PKCS#8 (v2) private key generated by `Ed25519KeyPair::generate_pkcs8()`. Ed25519 PKCS#8 files generated by other software may have different lengths, and `Ed25519KeyPair::generate_pkcs8()` may generate files of a different length in the future.",N,N],[17,"ED25519_PUBLIC_KEY_LEN","","The length of an Ed25519 public key.",N,N],[8,"VerificationAlgorithm","","A signature verification algorithm.",N,N],[10,"verify","","Verify the signature `signature` of message `msg` with the public key `public_key`.",16,[[["self"],["input"],["input"],["input"]],["result",["unspecified"]]]],[11,"as_ref","","",17,N],[0,"test","ring","Testing framework.",N,N],[3,"TestCase","ring::test","A test case. A test case consists of a set of named attributes. Every attribute in the test case must be consumed exactly once; this helps catch typos and omissions.",N,N],[5,"ring_src_path","","Returns the path for ring source code root.",N,[[],["pathbuf"]]],[5,"from_file","","Reads test cases out of the file with the path given by `test_data_relative_file_path`, calling `f` on each vector until `f` fails or until all the test vectors have been read. `f` can indicate failure either by returning `Err()` or by panicking.",N,[[["str"],["f"]]]],[5,"from_hex","","Decode an string of hex digits into a sequence of bytes. The input must have an even number of digits.",N,[[["str"]],["result",["vec","string"]]]],[0,"rand","","Deterministic implementations of `ring::rand::SecureRandom`.",N,N],[3,"FixedByteRandom","ring::test::rand","An implementation of `SecureRandom` that always fills the output slice with the given byte.",N,N],[12,"byte","","",18,N],[3,"FixedSliceRandom","","An implementation of `SecureRandom` that always fills the output slice with the slice in `bytes`. The length of the slice given to `slice` must match exactly.",N,N],[12,"bytes","","",19,N],[3,"FixedSliceSequenceRandom","","An implementation of `SecureRandom` where each slice in `bytes` is a test vector for one call to `fill()`. Not thread-safe.",N,N],[12,"bytes","","The value.",20,N],[12,"current","","",20,N],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fill","","",18,N],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fill","","",19,N],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fill","","",20,N],[11,"drop","","",20,[[["self"]]]],[11,"fmt","ring::test","",21,[[["self"],["formatter"]],["result"]]],[11,"consume_digest_alg","","Maps the strings \"SHA1\", \"SHA256\", \"SHA384\", and \"SHA512\" to digest algorithms, maps \"SHA224\" to `None`, and panics on other (erroneous) inputs. \"SHA224\" is mapped to None because ring intentionally does not support SHA224, but we need to consume test vectors from NIST that have SHA224 vectors in them.",21,[[["self"],["str"]],["option",["algorithm"]]]],[11,"consume_bytes","","Returns the value of an attribute that is encoded as a sequence of an even number of hex digits, or as a double-quoted UTF-8 string. The empty (zero-length) value is represented as \"\".",21,[[["self"],["str"]],["vec",["u8"]]]],[11,"consume_usize","","Returns the value of an attribute that is an integer, in decimal notation.",21,[[["self"],["str"]],["usize"]]],[11,"consume_usize_bits","","Returns the value of an attribute that is an integer, in decimal notation, as a bit length.",21,[[["self"],["str"]],["bitlength"]]],[11,"consume_string","","Returns the raw value of an attribute, without any unquoting or other interpretation.",21,[[["self"],["str"]],["string"]]],[11,"consume_optional_string","","Like `consume_string()` except it returns `None` if the test case doesn't have the attribute.",21,[[["self"],["str"]],["option",["string"]]]],[11,"from","ring::aead","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","ring::aead::chacha20_poly1305_openssh","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","ring::agreement","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","ring::digest","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","ring::signature","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"generate_pkcs8","","Generates a new key pair and returns the key pair serialized as a PKCS#8 document.",24,[[["securerandom"]],["result",["unspecified"]]]],[11,"from_pkcs8","","Constructs an Ed25519 key pair by parsing an unencrypted PKCS#8 v2 Ed25519 private key.",24,[[["input"]],["result",["ed25519keypair","unspecified"]]]],[11,"from_pkcs8_maybe_unchecked","","Constructs an Ed25519 key pair by parsing an unencrypted PKCS#8 v1 or v2 Ed25519 private key.",24,[[["input"]],["result",["ed25519keypair","unspecified"]]]],[11,"from_seed_and_public_key","","Constructs an Ed25519 key pair from the private key seed `seed` and its public key `public_key`.",24,[[["input"],["input"]],["result",["ed25519keypair","unspecified"]]]],[11,"from_seed_unchecked","","Constructs a Ed25519 key pair from the private key seed `seed`.",24,[[["input"]],["result",["ed25519keypair","unspecified"]]]],[11,"public_key_bytes","","Returns a reference to the little-endian-encoded public key bytes.",24,N],[11,"sign","","Returns the signature of the message `msg`.",24,N],[11,"verify","","",23,[[["self"],["input"],["input"],["input"]],["result",["unspecified"]]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"verify","","",25,[[["self"],["input"],["input"],["input"]],["result",["unspecified"]]]],[11,"from","ring::error","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","ring::hmac","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","ring::signature","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"as_ref","","",26,N],[11,"from","ring::rand","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","ring::signature","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"verify","","",27,[[["self"],["input"],["input"],["input"]],["result",["unspecified"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","ring::test","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","ring::test::rand","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]]],"paths":[[3,"SealingKey"],[3,"OpeningKey"],[3,"OpeningKey"],[3,"SealingKey"],[3,"Algorithm"],[3,"EphemeralPrivateKey"],[3,"Context"],[3,"Algorithm"],[3,"Digest"],[3,"Unspecified"],[3,"Signature"],[3,"SigningKey"],[3,"SigningContext"],[3,"VerificationKey"],[8,"SecureRandom"],[3,"SystemRandom"],[8,"VerificationAlgorithm"],[3,"Signature"],[3,"FixedByteRandom"],[3,"FixedSliceRandom"],[3,"FixedSliceSequenceRandom"],[3,"TestCase"],[3,"Algorithm"],[3,"EdDSAParameters"],[3,"Ed25519KeyPair"],[3,"ECDSAVerificationAlgorithm"],[3,"PKCS8Document"],[3,"RSAParameters"]]};
searchIndex["rocket"]={"doc":"Rocket - Core API Documentation","items":[[3,"Response","rocket","A response, as returned by `Responder`s.",N,N],[3,"Data","","Type representing the data in the body of an incoming request.",N,N],[3,"Config","","Structure for Rocket application configuration.",N,N],[12,"environment","","The environment that this configuration corresponds to.",0,N],[12,"address","","The address to serve on.",0,N],[12,"port","","The port to serve on.",0,N],[12,"workers","","The number of workers to run concurrently.",0,N],[12,"log_level","","How much information to log.",0,N],[12,"limits","","Streaming read size limits.",0,N],[12,"extras","","Extra parameters that aren't part of Rocket's core config.",0,N],[12,"config_path","","The path to the configuration file this config belongs to.",0,N],[3,"Route","","A route: a method, its handler, path, rank, and format/media type.",N,N],[12,"method","","The method this route matches against.",1,N],[12,"handler","","The function that should be called when the route matches.",1,N],[12,"base","","The base mount point of this `Route`.",1,N],[12,"uri","","The uri (in Rocket format) that should be matched against. This uri already includes the base mount point.",1,N],[12,"rank","","The rank of this route. Lower ranks have higher priorities.",1,N],[12,"format","","The media type this route matches against, if any.",1,N],[3,"Request","","The type of an incoming web request.",N,N],[3,"State","","Request guard to retrieve managed state.",N,N],[3,"Catcher","","An error catching route.",N,N],[12,"code","","The HTTP status code to match against.",2,N],[3,"Rocket","","The main `Rocket` type: used to mount routes and catchers and launch the application.",N,N],[4,"Outcome","","An enum representing success (`Success`), failure (`Failure`), or forwarding (`Forward`).",N,N],[13,"Success","","Contains the success value.",3,N],[13,"Failure","","Contains the failure error value.",3,N],[13,"Forward","","Contains the value to forward on.",3,N],[4,"Error","","[unstable] Error type for Rocket. Likely to change.",N,N],[13,"BadMethod","","The request method was bad.",4,N],[13,"BadParse","","The value could not be parsed.",4,N],[13,"NoRoute","","There was no such route.",4,N],[13,"Internal","","The error was internal.",4,N],[13,"NoKey","","The requested key/index does not exist.",4,N],[5,"ignite","","Alias to Rocket::ignite(). Creates a new instance of `Rocket`.",N,[[],["rocket"]]],[5,"custom","","Alias to Rocket::custom(). Creates a new instance of `Rocket` with a custom configuration.",N,[[["config"],["bool"]],["rocket"]]],[0,"local","","Structures for local dispatching of requests, primarily for testing.",N,N],[3,"LocalResponse","rocket::local","A structure representing a response from dispatching a local request.",N,N],[3,"LocalRequest","","A structure representing a local request as created by [`Client`].",N,N],[3,"Client","","A structure to construct requests for local dispatching.",N,N],[11,"inner","","Retrieves the inner `Request` as seen by Rocket.",5,[[["self"]],["request"]]],[11,"header","","Add a header to this request.",5,[[["self"],["h"]],["self"]]],[11,"add_header","","Adds a header to this request without consuming `self`.",5,[[["self"],["h"]]]],[11,"remote","","Set the remote address of this request.",5,[[["self"],["socketaddr"]],["self"]]],[11,"cookie","","Add a cookie to this request.",5,[[["self"],["cookie"]],["self"]]],[11,"body","","Set the body (data) of the request.",5,[[["self"],["s"]],["self"]]],[11,"set_body","","Set the body (data) of the request without consuming `self`.",5,[[["self"],["s"]]]],[11,"dispatch","","Dispatches the request, returning the response.",5,[[["self"]],["localresponse"]]],[11,"cloned_dispatch","","Dispatches the request, returning the response.",5,[[["self"]],["localresponse"]]],[11,"mut_dispatch","","Dispatches the request, returning the response.",5,[[["self"]],["localresponse"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"deref","","",6,[[["self"]],["response"]]],[11,"deref_mut","","",6,[[["self"]],["response"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Client` from an instance of `Rocket`.",7,[[["rocket"]],["result",["client","launcherror"]]]],[11,"rocket","","Returns the instance of `Rocket` this client is creating requests for.",7,[[["self"]],["rocket"]]],[11,"get","","Create a local `GET` request to the URI `uri`.",7,[[["self"],["u"]],["localrequest"]]],[11,"put","","Create a local `PUT` request to the URI `uri`.",7,[[["self"],["u"]],["localrequest"]]],[11,"post","","Create a local `POST` request to the URI `uri`.",7,[[["self"],["u"]],["localrequest"]]],[11,"delete","","Create a local `DELETE` request to the URI `uri`.",7,[[["self"],["u"]],["localrequest"]]],[11,"options","","Create a local `OPTIONS` request to the URI `uri`.",7,[[["self"],["u"]],["localrequest"]]],[11,"head","","Create a local `HEAD` request to the URI `uri`.",7,[[["self"],["u"]],["localrequest"]]],[11,"patch","","Create a local `PATCH` request to the URI `uri`.",7,[[["self"],["u"]],["localrequest"]]],[11,"req","","Create a local request with method `method` to the URI `uri`.",7,[[["self"],["method"],["u"]],["localrequest"]]],[0,"http","rocket","Types that map to concepts in HTTP.",N,N],[3,"Cookie","rocket::http","Representation of an HTTP cookie.",N,N],[3,"ContentType","","Representation of HTTP Content-Types.",N,N],[12,"0","","",8,N],[3,"Accept","","The HTTP Accept header.",N,N],[3,"QMediaType","","A `MediaType` with an associated quality value.",N,N],[12,"0","","",9,N],[12,"1","","",9,N],[3,"Status","","Structure representing an HTTP status: an integer code and a reason phrase.",N,N],[12,"code","","The HTTP status code associated with this status.",10,N],[12,"reason","","The HTTP reason phrase associated with this status.",10,N],[3,"Header","","Simple representation of an HTTP header.",N,N],[12,"name","","The name of the header.",11,N],[12,"value","","The value of the header.",11,N],[3,"HeaderMap","","A collection of headers, mapping a header name to its many ordered values.",N,N],[3,"RawStr","","A reference to a string inside of a raw HTTP message.",N,N],[3,"MediaType","","An HTTP media type.",N,N],[4,"Method","","Representation of HTTP methods.",N,N],[13,"Get","","",12,N],[13,"Put","","",12,N],[13,"Post","","",12,N],[13,"Delete","","",12,N],[13,"Options","","",12,N],[13,"Head","","",12,N],[13,"Trace","","",12,N],[13,"Connect","","",12,N],[13,"Patch","","",12,N],[4,"StatusClass","","Enumeration of HTTP status classes.",N,N],[13,"Informational","","Indicates a provisional response: a status code of 1XX.",13,N],[13,"Success","","Indicates that a request has succeeded: a status code of 2XX.",13,N],[13,"Redirection","","Indicates that further action needs to be taken by the user agent in order to fulfill the request: a status code of 3XX.",13,N],[13,"ClientError","","Intended for cases in which the client seems to have erred: a status code of 4XX.",13,N],[13,"ServerError","","Indicates cases in which the server is aware that it has erred or is incapable of performing the request: a status code of 5XX.",13,N],[13,"Unknown","","Indicates that the status code is nonstandard and unknown: all other status codes.",13,N],[4,"Cookies","","Collection of one or more HTTP cookies.",N,N],[0,"hyper","","Re-exported hyper HTTP library types.",N,N],[0,"mime","rocket::http::hyper","Re-exporting the mime crate, for convenience.",N,N],[14,"mime","rocket::http::hyper::mime","Easily create a Mime without having to import so many enums.",N,N],[4,"TopLevel","","",N,N],[13,"Star","","",14,N],[13,"Text","","",14,N],[13,"Image","","",14,N],[13,"Audio","","",14,N],[13,"Video","","",14,N],[13,"Application","","",14,N],[13,"Multipart","","",14,N],[13,"Message","","",14,N],[13,"Model","","",14,N],[13,"Ext","","",14,N],[4,"Value","","",N,N],[13,"Utf8","","",15,N],[13,"Ext","","",15,N],[3,"Mime","","Mime, or Media Type. Encapsulates common registers types.",N,N],[12,"0","","",16,N],[12,"1","","",16,N],[12,"2","","",16,N],[4,"Attr","","",N,N],[13,"Charset","","",17,N],[13,"Boundary","","",17,N],[13,"Q","","",17,N],[13,"Ext","","",17,N],[6,"Param","","",N,N],[4,"SubLevel","","",N,N],[13,"Star","","",18,N],[13,"Plain","","",18,N],[13,"Html","","",18,N],[13,"Xml","","",18,N],[13,"Javascript","","",18,N],[13,"Css","","",18,N],[13,"EventStream","","",18,N],[13,"Json","","",18,N],[13,"WwwFormUrlEncoded","","",18,N],[13,"Msgpack","","",18,N],[13,"OctetStream","","",18,N],[13,"FormData","","",18,N],[13,"Png","","",18,N],[13,"Gif","","",18,N],[13,"Bmp","","",18,N],[13,"Jpeg","","",18,N],[13,"Mpeg","","",18,N],[13,"Mp4","","",18,N],[13,"Ogg","","",18,N],[13,"Ext","","",18,N],[0,"header","rocket::http::hyper","Reexported Hyper header types.",N,N],[3,"Accept","rocket::http::hyper::header","`Accept` header, defined in RFC7231",N,N],[12,"0","","",19,N],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",N,N],[12,"0","","",20,N],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",N,N],[12,"0","","",21,N],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",N,N],[12,"0","","",22,N],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",N,N],[12,"0","","",23,N],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",N,N],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",N,N],[12,"0","","",24,N],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",N,N],[12,"0","","",25,N],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",N,N],[12,"0","","",26,N],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",N,N],[12,"0","","",27,N],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",N,N],[12,"0","","",28,N],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",N,N],[12,"0","","",29,N],[3,"Allow","","`Allow` header, defined in RFC7231",N,N],[12,"0","","",30,N],[3,"Authorization","","`Authorization` header, defined in RFC7235",N,N],[12,"0","","",31,N],[3,"Basic","","Credential holder for Basic Authentication",N,N],[12,"username","","The username as a possibly empty string",32,N],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input.",32,N],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",N,N],[12,"token","","Actual bearer token as a string",33,N],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",N,N],[12,"0","","",34,N],[3,"Connection","","`Connection` header, defined in RFC7230",N,N],[12,"0","","",35,N],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266",N,N],[12,"disposition","","The disposition",36,N],[12,"parameters","","Disposition parameters",36,N],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",N,N],[12,"0","","",37,N],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",N,N],[12,"0","","",38,N],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",N,N],[12,"0","","",39,N],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",N,N],[12,"0","","",40,N],[3,"ContentType","","`Content-Type` header, defined in RFC7231",N,N],[12,"0","","",41,N],[3,"Date","","`Date` header, defined in RFC7231",N,N],[12,"0","","",42,N],[3,"ETag","","`ETag` header, defined in RFC7232",N,N],[12,"0","","",43,N],[3,"EntityTag","","An entity tag, defined in RFC7232",N,N],[12,"weak","","Weakness indicator for the tag",44,N],[3,"Expires","","`Expires` header, defined in RFC7234",N,N],[12,"0","","",45,N],[3,"From","","`From` header, defined in RFC7231",N,N],[12,"0","","",46,N],[3,"Headers","","A map of header fields on requests and responses.",N,N],[3,"Host","","The `Host` header.",N,N],[12,"hostname","","The hostname, such a example.domain.",47,N],[12,"port","","An optional port number.",47,N],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",N,N],[12,"0","","",48,N],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",N,N],[12,"0","","",49,N],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",N,N],[12,"0","","",50,N],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",N,N],[12,"0","","",51,N],[3,"Location","","`Location` header, defined in RFC7231",N,N],[12,"0","","",52,N],[3,"Origin","","The `Origin` header.",N,N],[12,"scheme","","The scheme, such as http or https",53,N],[12,"host","","The host, such as Host{hostname: \"hyper.rs\".to_owned(), port: None}",53,N],[3,"Prefer","","`Prefer` header, defined in RFC7240",N,N],[12,"0","","",54,N],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",N,N],[12,"0","","",55,N],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",N,N],[12,"name","","The protocol identifier",56,N],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",56,N],[3,"Quality","","Represents a quality used in quality values.",N,N],[12,"0","","",57,N],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",N,N],[12,"item","","The actual contents of the field.",58,N],[12,"quality","","The quality (client or server preference) for the value.",58,N],[3,"Referer","","`Referer` header, defined in RFC7231",N,N],[12,"0","","",59,N],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",N,N],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",60,N],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",60,N],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",N,N],[12,"0","","",61,N],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",N,N],[12,"0","","",62,N],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",N,N],[12,"0","","",63,N],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",N,N],[13,"Any","","Allow all origins",64,N],[13,"Null","","A hidden origin",64,N],[13,"Value","","Allow one particular origin",64,N],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",N,N],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",65,N],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",65,N],[13,"Last","","Get last x bytes (\"-x\")",65,N],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",N,N],[13,"NoCache","","\"no-cache\"",66,N],[13,"NoStore","","\"no-store\"",66,N],[13,"NoTransform","","\"no-transform\"",66,N],[13,"OnlyIfCached","","\"only-if-cached\"",66,N],[13,"MaxAge","","\"max-age=delta\"",66,N],[13,"MaxStale","","\"max-stale=delta\"",66,N],[13,"MinFresh","","\"min-fresh=delta\"",66,N],[13,"MustRevalidate","","\"must-revalidate\"",66,N],[13,"Public","","\"public\"",66,N],[13,"Private","","\"private\"",66,N],[13,"ProxyRevalidate","","\"proxy-revalidate\"",66,N],[13,"SMaxAge","","\"s-maxage=delta\"",66,N],[13,"Extension","","Extension directives. Optionally include an argument.",66,N],[4,"Charset","","A Mime charset.",N,N],[13,"Us_Ascii","","US ASCII",67,N],[13,"Iso_8859_1","","ISO-8859-1",67,N],[13,"Iso_8859_2","","ISO-8859-2",67,N],[13,"Iso_8859_3","","ISO-8859-3",67,N],[13,"Iso_8859_4","","ISO-8859-4",67,N],[13,"Iso_8859_5","","ISO-8859-5",67,N],[13,"Iso_8859_6","","ISO-8859-6",67,N],[13,"Iso_8859_7","","ISO-8859-7",67,N],[13,"Iso_8859_8","","ISO-8859-8",67,N],[13,"Iso_8859_9","","ISO-8859-9",67,N],[13,"Iso_8859_10","","ISO-8859-10",67,N],[13,"Shift_Jis","","Shift_JIS",67,N],[13,"Euc_Jp","","EUC-JP",67,N],[13,"Iso_2022_Kr","","ISO-2022-KR",67,N],[13,"Euc_Kr","","EUC-KR",67,N],[13,"Iso_2022_Jp","","ISO-2022-JP",67,N],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",67,N],[13,"Iso_8859_6_E","","ISO-8859-6-E",67,N],[13,"Iso_8859_6_I","","ISO-8859-6-I",67,N],[13,"Iso_8859_8_E","","ISO-8859-8-E",67,N],[13,"Iso_8859_8_I","","ISO-8859-8-I",67,N],[13,"Gb2312","","GB2312",67,N],[13,"Big5","","Big5",67,N],[13,"Koi8_R","","KOI8-R",67,N],[13,"Ext","","An arbitrary charset specified as a string",67,N],[4,"ConnectionOption","","Values that can be in the `Connection` header.",N,N],[13,"KeepAlive","","The `keep-alive` connection value.",68,N],[13,"Close","","The `close` connection value.",68,N],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",68,N],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",N,N],[13,"Bytes","","Byte range",69,N],[12,"range","rocket::http::hyper::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",69,N],[12,"instance_length","","Total length of the instance, can be omitted if unknown",69,N],[13,"Unregistered","rocket::http::hyper::header","Custom range, with unit not registered at IANA",69,N],[12,"unit","rocket::http::hyper::header::ContentRangeSpec","other-range-unit",69,N],[12,"resp","","other-range-resp",69,N],[4,"DispositionParam","rocket::http::hyper::header","A parameter to the disposition type",N,N],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",70,N],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",70,N],[4,"DispositionType","","The implied disposition of the content of the HTTP body",N,N],[13,"Inline","","Inline implies default processing",71,N],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",71,N],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",71,N],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",N,N],[13,"Chunked","","The `chunked` encoding.",72,N],[13,"Gzip","","The `gzip` encoding.",72,N],[13,"Deflate","","The `deflate` encoding.",72,N],[13,"Compress","","The `compress` encoding.",72,N],[13,"Identity","","The `identity` encoding.",72,N],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",72,N],[4,"Expect","","The `Expect` header.",N,N],[13,"Continue","","The value `100-continue`.",73,N],[4,"IfMatch","","`If-Match` header, defined in RFC7232",N,N],[13,"Any","","Any value is a match",74,N],[13,"Items","","Only the listed items are a match",74,N],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",N,N],[13,"Any","","Any value is a match",75,N],[13,"Items","","Only the listed items are a match",75,N],[4,"IfRange","","`If-Range` header, defined in RFC7233",N,N],[13,"EntityTag","","The entity-tag the client has of the resource",76,N],[13,"Date","","The date when the client retrieved the resource",76,N],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",N,N],[13,"NoCache","","Corresponds to the `no-cache` value.",77,N],[13,"Ext","","Every value other than `no-cache`.",77,N],[4,"Preference","","Prefer contains a list of these preferences.",N,N],[13,"RespondAsync","","\"respond-async\"",78,N],[13,"ReturnRepresentation","","\"return=representation\"",78,N],[13,"ReturnMinimal","","\"return=minimal\"",78,N],[13,"HandlingStrict","","\"handling=strict\"",78,N],[13,"HandlingLeniant","","\"handling=leniant\"",78,N],[13,"Wait","","\"wait=delta\"",78,N],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",78,N],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive except for the `WebSocket` value.",N,N],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",79,N],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",79,N],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",79,N],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",79,N],[13,"Unregistered","","Any other protocol name not known to hyper",79,N],[4,"Range","","`Range` header, defined in RFC7233",N,N],[13,"Bytes","","Byte range",80,N],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",80,N],[4,"RangeUnit","","Range Units, described in RFC7233",N,N],[13,"Bytes","","Indicating byte-range requests are supported.",81,N],[13,"None","","Reserved as keyword, indicating no ranges are supported.",81,N],[13,"Unregistered","","The given range unit is not registered at IANA.",81,N],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",N,N],[13,"NoReferrer","","`no-referrer`",82,N],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",82,N],[13,"SameOrigin","","`same-origin`",82,N],[13,"Origin","","`origin`",82,N],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",82,N],[13,"UnsafeUrl","","`unsafe-url`",82,N],[13,"StrictOrigin","","`strict-origin`",82,N],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",82,N],[4,"Vary","","`Vary` header, defined in RFC7231",N,N],[13,"Any","","Any value is a match",83,N],[13,"Items","","Only the listed items are a match",83,N],[8,"Scheme","","An Authorization scheme to be used in the header.",N,N],[10,"scheme","","An optional Scheme name.",84,[[],["option",["str"]]]],[10,"fmt_scheme","","Format the Scheme data into a header value.",84,[[["self"],["formatter"]],["result",["error"]]]],[5,"q","","Convenience function to create a `Quality` from a float.",N,[[["f32"]],["quality"]]],[5,"qitem","","Convinience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",N,[[["t"]],["qualityitem"]]],[11,"from","rocket::http","",11,[[["accept"]],["header"]]],[11,"from","","",11,[[["accesscontrolallowcredentials"]],["header"]]],[11,"from","","",11,[[["accesscontrolallowheaders"]],["header"]]],[11,"from","","",11,[[["accesscontrolallowmethods"]],["header"]]],[11,"from","","",11,[[["accesscontrolalloworigin"]],["header"]]],[11,"from","","",11,[[["accesscontrolexposeheaders"]],["header"]]],[11,"from","","",11,[[["accesscontrolmaxage"]],["header"]]],[11,"from","","",11,[[["accesscontrolrequestheaders"]],["header"]]],[11,"from","","",11,[[["accesscontrolrequestmethod"]],["header"]]],[11,"from","","",11,[[["acceptcharset"]],["header"]]],[11,"from","","",11,[[["acceptencoding"]],["header"]]],[11,"from","","",11,[[["acceptlanguage"]],["header"]]],[11,"from","","",11,[[["acceptranges"]],["header"]]],[11,"from","","",11,[[["allow"]],["header"]]],[11,"from","","",11,[[["cachecontrol"]],["header"]]],[11,"from","","",11,[[["connection"]],["header"]]],[11,"from","","",11,[[["contentdisposition"]],["header"]]],[11,"from","","",11,[[["contentencoding"]],["header"]]],[11,"from","","",11,[[["contentlanguage"]],["header"]]],[11,"from","","",11,[[["contentlength"]],["header"]]],[11,"from","","",11,[[["contentrange"]],["header"]]],[11,"from","","",11,[[["date"]],["header"]]],[11,"from","","",11,[[["etag"]],["header"]]],[11,"from","","",11,[[["expect"]],["header"]]],[11,"from","","",11,[[["expires"]],["header"]]],[11,"from","","",11,[[["host"]],["header"]]],[11,"from","","",11,[[["ifmatch"]],["header"]]],[11,"from","","",11,[[["ifmodifiedsince"]],["header"]]],[11,"from","","",11,[[["ifnonematch"]],["header"]]],[11,"from","","",11,[[["ifrange"]],["header"]]],[11,"from","","",11,[[["ifunmodifiedsince"]],["header"]]],[11,"from","","",11,[[["lastmodified"]],["header"]]],[11,"from","","",11,[[["location"]],["header"]]],[11,"from","","",11,[[["origin"]],["header"]]],[11,"from","","",11,[[["pragma"]],["header"]]],[11,"from","","",11,[[["prefer"]],["header"]]],[11,"from","","",11,[[["preferenceapplied"]],["header"]]],[11,"from","","",11,[[["range"]],["header"]]],[11,"from","","",11,[[["referer"]],["header"]]],[11,"from","","",11,[[["referrerpolicy"]],["header"]]],[11,"from","","",11,[[["stricttransportsecurity"]],["header"]]],[11,"from","","",11,[[["transferencoding"]],["header"]]],[11,"from","","",11,[[["upgrade"]],["header"]]],[11,"from","","",11,[[["useragent"]],["header"]]],[11,"from","","",11,[[["vary"]],["header"]]],[0,"uri","","Borrowed and owned string types for absolute URIs.",N,N],[3,"URI","rocket::http::uri","Borrowed string type for absolute URIs.",N,N],[3,"Segments","","Iterator over the segments of an absolute URI path. Skips empty segments.",N,N],[12,"0","","",85,N],[4,"SegmentError","","Errors which can occur when attempting to interpret a segment string as a valid path segment.",N,N],[13,"Utf8","","The segment contained invalid UTF8 characters when percent decoded.",86,N],[13,"BadStart","","The segment started with the wrapped invalid character.",86,N],[13,"BadChar","","The segment contained the wrapped invalid character.",86,N],[13,"BadEnd","","The segment ended with the wrapped invalid character.",86,N],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructs a new URI from a given string. The URI is assumed to be an absolute, well formed URI.",87,[[["t"]],["uri"]]],[11,"segment_count","","Returns the number of segments in the URI. Empty segments, which are invalid according to RFC#3986, are not counted.",87,[[["self"]],["usize"]]],[11,"segments","","Returns an iterator over the segments of the path in this URI. Skips empty segments.",87,[[["self"]],["segments"]]],[11,"path","","Returns the path part of this URI.",87,[[["self"]],["str"]]],[11,"query","","Returns the query part of this URI without the question mark, if there is any.",87,[[["self"]],["option",["str"]]]],[11,"fragment","","Returns the fargment part of this URI without the hash mark, if there is any.",87,[[["self"]],["option",["str"]]]],[11,"percent_decode","","Returns a URL-decoded version of the string. If the percent encoded values are not valid UTF-8, an `Err` is returned.",87,N],[11,"percent_decode_lossy","","Returns a URL-decoded version of the path. Any invalid UTF-8 percent-encoded byte sequences will be replaced � U+FFFD, the replacement character.",87,N],[11,"percent_encode","","Returns a URL-encoded version of the string. Any characters outside of visible ASCII-range are encoded as well as ' ', '\"', '#', '<', '>', '`', '?', '{', '}', '%', and '/'.",87,[[["str"]],["cow",["str"]]]],[11,"as_str","","Returns the inner string of this URI.",87,[[["self"]],["str"]]],[11,"clone","","",87,[[["self"]],["uri"]]],[11,"eq","","",87,[[["self"],["uri"]],["bool"]]],[11,"from","","",87,[[["str"]],["uri"]]],[11,"from","","",87,[[["string"]],["uri"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"clone","","",85,[[["self"]],["segments"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"next","","",85,[[["self"]],["option"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"eq","","",86,[[["self"],["segmenterror"]],["bool"]]],[11,"ne","","",86,[[["self"],["segmenterror"]],["bool"]]],[11,"clone","","",86,[[["self"]],["segmenterror"]]],[11,"get","rocket::http","Returns a reference to the `Cookie` inside this container with the name `name`. If no such cookie exists, returns `None`.",88,[[["self"],["str"]],["option",["cookie"]]]],[11,"get_private","","Returns a reference to the `Cookie` inside this collection with the name `name` and authenticates and decrypts the cookie's value, returning a `Cookie` with the decrypted value. If the cookie cannot be found, or the cookie fails to authenticate or decrypt, `None` is returned.",88,[[["self"],["str"]],["option",["cookie"]]]],[11,"add","","Adds `cookie` to this collection.",88,[[["self"],["cookie"]]]],[11,"add_private","","Adds `cookie` to the collection. The cookie's value is encrypted with authenticated encryption assuring confidentiality, integrity, and authenticity. The cookie can later be retrieved using `get_private` and removed using `remove_private`.",88,[[["self"],["cookie"]]]],[11,"remove","","Removes `cookie` from this collection and generates a \"removal\" cookies to send to the client on response. For correctness, `cookie` must contain the same `path` and `domain` as the cookie that was initially set. Failure to provide the initual `path` and `domain` will result in cookies that are not properly removed.",88,[[["self"],["cookie"]]]],[11,"remove_private","","Removes the private `cookie` from the collection.",88,[[["self"],["cookie"]]]],[11,"iter","","Returns an iterator over all of the cookies present in this collection.",88,N],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"from","","",11,[[["cookie"]],["header"]]],[11,"clone","","",12,[[["self"]],["method"]]],[11,"eq","","",12,[[["self"],["method"]],["bool"]]],[11,"hash","","",12,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"supports_payload","","Returns `true` if an HTTP request with the method represented by `self` supports a payload.",12,[[["self"]],["bool"]]],[11,"as_str","","Returns the string representation of `self`.",12,[[["self"]],["str"]]],[11,"from_str","","",12,[[["str"]],["result",["method","error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"clone","","",89,[[["self"]],["mediatype"]]],[11,"new","","Creates a new `MediaType` with top-level type `top` and subtype `sub`. This should only be used to construct uncommon or custom media types. Use an associated constant for everything else.",89,[[["t"],["s"]],["mediatype"]]],[11,"with_params","","Creates a new `MediaType` with top-level type `top`, subtype `sub`, and parameters `ps`. This should only be used to construct uncommon or custom media types. Use an associated constant for everything else.",89,[[["t"],["s"],["p"]],["mediatype"]]],[11,"from_extension","","Returns the Media-Type associated with the extension `ext`. Not all extensions are recognized. If an extensions is not recognized, `None` is returned. The currently recognized extensions are",89,[[["str"]],["option",["mediatype"]]]],[11,"top","","Returns the top-level type for this media type. The return type, `UncasedStr`, has caseless equality comparison and hashing.",89,[[["self"]],["uncasedstr"]]],[11,"sub","","Returns the subtype for this media type. The return type, `UncasedStr`, has caseless equality comparison and hashing.",89,[[["self"]],["uncasedstr"]]],[11,"specificity","","Returns a `u8` representing how specific the top-level type and subtype of this media type are.",89,[[["self"]],["u8"]]],[11,"exact_eq","","Compares `self` with `other` and returns `true` if `self` and `other` are exactly equal to eachother, including with respect to their parameters.",89,[[["self"],["mediatype"]],["bool"]]],[11,"params","","Returns an iterator over the (key, value) pairs of the media type's parameter list. The iterator will be empty if the media type has no parameters.",89,N],[18,"Any","","Media type for  any media type :  * / * ",89,N],[11,"is_any","","Returns `true` if `self` is the media type for  any media type , ",89,[[["self"]],["bool"]]],[18,"Binary","","Media type for  binary data :  application / octet-stream ",89,N],[11,"is_binary","","Returns `true` if `self` is the media type for  binary data , ",89,[[["self"]],["bool"]]],[18,"HTML","","Media type for  HTML :  text / html ;  charset  =  utf-8 ",89,N],[11,"is_html","","Returns `true` if `self` is the media type for  HTML , ",89,[[["self"]],["bool"]]],[18,"Plain","","Media type for  plain text :  text / plain ;  charset  =  utf-8 ",89,N],[11,"is_plain","","Returns `true` if `self` is the media type for  plain text , ",89,[[["self"]],["bool"]]],[18,"JSON","","Media type for  JSON :  application / json ",89,N],[11,"is_json","","Returns `true` if `self` is the media type for  JSON , ",89,[[["self"]],["bool"]]],[18,"MsgPack","","Media type for  MessagePack :  application / msgpack ",89,N],[11,"is_msgpack","","Returns `true` if `self` is the media type for  MessagePack , ",89,[[["self"]],["bool"]]],[18,"Form","","Media type for  forms :  application / x-www-form-urlencoded ",89,N],[11,"is_form","","Returns `true` if `self` is the media type for  forms , ",89,[[["self"]],["bool"]]],[18,"JavaScript","","Media type for  JavaScript :  application / javascript ",89,N],[11,"is_javascript","","Returns `true` if `self` is the media type for  JavaScript , ",89,[[["self"]],["bool"]]],[18,"CSS","","Media type for  CSS :  text / css ;  charset  =  utf-8 ",89,N],[11,"is_css","","Returns `true` if `self` is the media type for  CSS , ",89,[[["self"]],["bool"]]],[18,"FormData","","Media type for  multipart form data :  multipart / form-data ",89,N],[11,"is_form_data","","Returns `true` if `self` is the media type for  multipart form data , ",89,[[["self"]],["bool"]]],[18,"XML","","Media type for  XML :  text / xml ;  charset  =  utf-8 ",89,N],[11,"is_xml","","Returns `true` if `self` is the media type for  XML , ",89,[[["self"]],["bool"]]],[18,"CSV","","Media type for  CSV :  text / csv ;  charset  =  utf-8 ",89,N],[11,"is_csv","","Returns `true` if `self` is the media type for  CSV , ",89,[[["self"]],["bool"]]],[18,"PNG","","Media type for  PNG :  image / png ",89,N],[11,"is_png","","Returns `true` if `self` is the media type for  PNG , ",89,[[["self"]],["bool"]]],[18,"GIF","","Media type for  GIF :  image / gif ",89,N],[11,"is_gif","","Returns `true` if `self` is the media type for  GIF , ",89,[[["self"]],["bool"]]],[18,"BMP","","Media type for  BMP :  image / bmp ",89,N],[11,"is_bmp","","Returns `true` if `self` is the media type for  BMP , ",89,[[["self"]],["bool"]]],[18,"JPEG","","Media type for  JPEG :  image / jpeg ",89,N],[11,"is_jpeg","","Returns `true` if `self` is the media type for  JPEG , ",89,[[["self"]],["bool"]]],[18,"WEBP","","Media type for  WEBP :  image / webp ",89,N],[11,"is_webp","","Returns `true` if `self` is the media type for  WEBP , ",89,[[["self"]],["bool"]]],[18,"SVG","","Media type for  SVG :  image / svg+xml ",89,N],[11,"is_svg","","Returns `true` if `self` is the media type for  SVG , ",89,[[["self"]],["bool"]]],[18,"WEBM","","Media type for  WEBM :  video / webm ",89,N],[11,"is_webm","","Returns `true` if `self` is the media type for  WEBM , ",89,[[["self"]],["bool"]]],[18,"OGG","","Media type for  OGG :  video / ogg ",89,N],[11,"is_ogg","","Returns `true` if `self` is the media type for  OGG , ",89,[[["self"]],["bool"]]],[18,"WAV","","Media type for  WAV :  audio / wav ",89,N],[11,"is_wav","","Returns `true` if `self` is the media type for  WAV , ",89,[[["self"]],["bool"]]],[18,"PDF","","Media type for  PDF :  application / pdf ",89,N],[11,"is_pdf","","Returns `true` if `self` is the media type for  PDF , ",89,[[["self"]],["bool"]]],[18,"TTF","","Media type for  TTF :  application / font-sfnt ",89,N],[11,"is_ttf","","Returns `true` if `self` is the media type for  TTF , ",89,[[["self"]],["bool"]]],[18,"OTF","","Media type for  OTF :  application / font-sfnt ",89,N],[11,"is_otf","","Returns `true` if `self` is the media type for  OTF , ",89,[[["self"]],["bool"]]],[18,"WOFF","","Media type for  WOFF :  application / font-woff ",89,N],[11,"is_woff","","Returns `true` if `self` is the media type for  WOFF , ",89,[[["self"]],["bool"]]],[18,"WOFF2","","Media type for  WOFF2 :  font / woff2 ",89,N],[11,"is_woff2","","Returns `true` if `self` is the media type for  WOFF2 , ",89,[[["self"]],["bool"]]],[18,"WASM","","Media type for  WASM :  application / wasm ",89,N],[11,"is_wasm","","Returns `true` if `self` is the media type for  WASM , ",89,[[["self"]],["bool"]]],[18,"JsonApi","","Media type for  JSON API :  application / vnd.api+json ",89,N],[11,"is_json_api","","Returns `true` if `self` is the media type for  JSON API , ",89,[[["self"]],["bool"]]],[11,"is_known","","Returns `true` if this MediaType is known to Rocket, that is, there is an associated constant for `self`.",89,[[["self"]],["bool"]]],[11,"from_str","","",89,[[["str"]],["result",["mediatype","string"]]]],[11,"eq","","",89,[[["self"],["mediatype"]],["bool"]]],[11,"hash","","",89,[[["self"],["h"]]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["contenttype"]]],[11,"eq","","",8,[[["self"],["contenttype"]],["bool"]]],[11,"ne","","",8,[[["self"],["contenttype"]],["bool"]]],[11,"hash","","",8,N],[11,"new","","Creates a new `ContentType` with top-level type `top` and subtype `sub`. This should only be used to construct uncommon or custom content types. Use an associated constant for everything else.",8,[[["t"],["s"]],["contenttype"]]],[11,"from_extension","","Returns the Content-Type associated with the extension `ext` if the extension is recognized. Not all extensions are recognized. If an extensions is not recognized, then this method returns `None`. The currently recognized extensions are txt, html, htm, xml, csv, js, css, json, png, gif, bmp, jpeg, jpg, webp, svg, pdf, ttf, otf, woff, and woff2. Extensions are matched case-insensitively.",8,[[["str"]],["option",["contenttype"]]]],[11,"with_params","","Creates a new `ContentType` with top-level type `top`, subtype `sub`, and parameters `ps`. This should only be used to construct uncommon or custom content types. Use an associated constant for everything else.",8,[[["t"],["s"],["p"]],["contenttype"]]],[11,"media_type","","Borrows the inner `MediaType` of `self`.",8,[[["self"]],["mediatype"]]],[18,"Any","","Content-Type for  any media type :  * / * ",8,N],[18,"Binary","","Content-Type for  binary data :  application / octet-stream ",8,N],[18,"HTML","","Content-Type for  HTML :  text / html ;  charset  =  utf-8 ",8,N],[18,"Plain","","Content-Type for  plain text :  text / plain ;  charset  =  utf-8 ",8,N],[18,"JSON","","Content-Type for  JSON :  application / json ",8,N],[18,"MsgPack","","Content-Type for  MessagePack :  application / msgpack ",8,N],[18,"Form","","Content-Type for  forms :  application / x-www-form-urlencoded ",8,N],[18,"JavaScript","","Content-Type for  JavaScript :  application / javascript ",8,N],[18,"CSS","","Content-Type for  CSS :  text / css ;  charset  =  utf-8 ",8,N],[18,"FormData","","Content-Type for  multipart form data :  multipart / form-data ",8,N],[18,"XML","","Content-Type for  XML :  text / xml ;  charset  =  utf-8 ",8,N],[18,"CSV","","Content-Type for  CSV :  text / csv ;  charset  =  utf-8 ",8,N],[18,"PNG","","Content-Type for  PNG :  image / png ",8,N],[18,"GIF","","Content-Type for  GIF :  image / gif ",8,N],[18,"BMP","","Content-Type for  BMP :  image / bmp ",8,N],[18,"JPEG","","Content-Type for  JPEG :  image / jpeg ",8,N],[18,"WEBP","","Content-Type for  WEBP :  image / webp ",8,N],[18,"SVG","","Content-Type for  SVG :  image / svg+xml ",8,N],[18,"WEBM","","Content-Type for  WEBM :  video / webm ",8,N],[18,"OGG","","Content-Type for  OGG :  video / ogg ",8,N],[18,"WAV","","Content-Type for  WAV :  audio / wav ",8,N],[18,"PDF","","Content-Type for  PDF :  application / pdf ",8,N],[18,"TTF","","Content-Type for  TTF :  application / font-sfnt ",8,N],[18,"OTF","","Content-Type for  OTF :  application / font-sfnt ",8,N],[18,"WOFF","","Content-Type for  WOFF :  application / font-woff ",8,N],[18,"WOFF2","","Content-Type for  WOFF2 :  font / woff2 ",8,N],[18,"WASM","","Content-Type for  WASM :  application / wasm ",8,N],[18,"JsonApi","","Content-Type for  JSON API :  application / vnd.api+json ",8,N],[11,"default","","Returns a ContentType of `Any`, or `*/*`.",8,[[],["contenttype"]]],[11,"deref","","",8,[[["self"]],["mediatype"]]],[11,"from_str","","Parses a `ContentType` from a given Content-Type header value.",8,[[["str"]],["result",["contenttype","string"]]]],[11,"fmt","","Formats the ContentType as an HTTP Content-Type value.",8,[[["self"],["formatter"]],["result"]]],[11,"into","","",8,[[["self"]],["header"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["statusclass"]]],[11,"hash","","",13,N],[11,"eq","","",13,[[["self"],["statusclass"]],["bool"]]],[11,"is_informational","","Returns `true` if `self` is a `StatusClass` of",13,[[["self"]],["bool"]]],[11,"is_success","","Returns `true` if `self` is a `StatusClass` of",13,[[["self"]],["bool"]]],[11,"is_redirection","","Returns `true` if `self` is a `StatusClass` of",13,[[["self"]],["bool"]]],[11,"is_client_error","","Returns `true` if `self` is a `StatusClass` of",13,[[["self"]],["bool"]]],[11,"is_server_error","","Returns `true` if `self` is a `StatusClass` of",13,[[["self"]],["bool"]]],[11,"is_unknown","","Returns `true` if `self` is a `StatusClass` of",13,[[["self"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["status"]]],[11,"hash","","",10,N],[11,"eq","","",10,[[["self"],["status"]],["bool"]]],[11,"ne","","",10,[[["self"],["status"]],["bool"]]],[11,"new","","Creates a new `Status` with `code` and `reason`. This should be only to construct non-standard HTTP statuses. Use an associated constant for standard statuses.",10,[[["u16"],["str"]],["status"]]],[11,"class","","Returns the class of a given status.",10,[[["self"]],["statusclass"]]],[18,"Continue","","Status with code  100  and reason  Continue .",10,N],[18,"SwitchingProtocols","","Status with code  101  and reason  Switching Protocols .",10,N],[18,"Processing","","Status with code  102  and reason  Processing .",10,N],[18,"Ok","","Status with code  200  and reason  OK .",10,N],[18,"Created","","Status with code  201  and reason  Created .",10,N],[18,"Accepted","","Status with code  202  and reason  Accepted .",10,N],[18,"NonAuthoritativeInformation","","Status with code  203  and reason  Non-Authoritative Information .",10,N],[18,"NoContent","","Status with code  204  and reason  No Content .",10,N],[18,"ResetContent","","Status with code  205  and reason  Reset Content .",10,N],[18,"PartialContent","","Status with code  206  and reason  Partial Content .",10,N],[18,"MultiStatus","","Status with code  207  and reason  Multi-Status .",10,N],[18,"AlreadyReported","","Status with code  208  and reason  Already Reported .",10,N],[18,"ImUsed","","Status with code  226  and reason  IM Used .",10,N],[18,"MultipleChoices","","Status with code  300  and reason  Multiple Choices .",10,N],[18,"MovedPermanently","","Status with code  301  and reason  Moved Permanently .",10,N],[18,"Found","","Status with code  302  and reason  Found .",10,N],[18,"SeeOther","","Status with code  303  and reason  See Other .",10,N],[18,"NotModified","","Status with code  304  and reason  Not Modified .",10,N],[18,"UseProxy","","Status with code  305  and reason  Use Proxy .",10,N],[18,"TemporaryRedirect","","Status with code  307  and reason  Temporary Redirect .",10,N],[18,"PermanentRedirect","","Status with code  308  and reason  Permanent Redirect .",10,N],[18,"BadRequest","","Status with code  400  and reason  Bad Request .",10,N],[18,"Unauthorized","","Status with code  401  and reason  Unauthorized .",10,N],[18,"PaymentRequired","","Status with code  402  and reason  Payment Required .",10,N],[18,"Forbidden","","Status with code  403  and reason  Forbidden .",10,N],[18,"NotFound","","Status with code  404  and reason  Not Found .",10,N],[18,"MethodNotAllowed","","Status with code  405  and reason  Method Not Allowed .",10,N],[18,"NotAcceptable","","Status with code  406  and reason  Not Acceptable .",10,N],[18,"ProxyAuthenticationRequired","","Status with code  407  and reason  Proxy Authentication Required .",10,N],[18,"RequestTimeout","","Status with code  408  and reason  Request Timeout .",10,N],[18,"Conflict","","Status with code  409  and reason  Conflict .",10,N],[18,"Gone","","Status with code  410  and reason  Gone .",10,N],[18,"LengthRequired","","Status with code  411  and reason  Length Required .",10,N],[18,"PreconditionFailed","","Status with code  412  and reason  Precondition Failed .",10,N],[18,"PayloadTooLarge","","Status with code  413  and reason  Payload Too Large .",10,N],[18,"UriTooLong","","Status with code  414  and reason  URI Too Long .",10,N],[18,"UnsupportedMediaType","","Status with code  415  and reason  Unsupported Media Type .",10,N],[18,"RangeNotSatisfiable","","Status with code  416  and reason  Range Not Satisfiable .",10,N],[18,"ExpectationFailed","","Status with code  417  and reason  Expectation Failed .",10,N],[18,"ImATeapot","","Status with code  418  and reason  I'm a teapot .",10,N],[18,"MisdirectedRequest","","Status with code  421  and reason  Misdirected Request .",10,N],[18,"UnprocessableEntity","","Status with code  422  and reason  Unprocessable Entity .",10,N],[18,"Locked","","Status with code  423  and reason  Locked .",10,N],[18,"FailedDependency","","Status with code  424  and reason  Failed Dependency .",10,N],[18,"UpgradeRequired","","Status with code  426  and reason  Upgrade Required .",10,N],[18,"PreconditionRequired","","Status with code  428  and reason  Precondition Required .",10,N],[18,"TooManyRequests","","Status with code  429  and reason  Too Many Requests .",10,N],[18,"RequestHeaderFieldsTooLarge","","Status with code  431  and reason  Request Header Fields Too Large .",10,N],[18,"UnavailableForLegalReasons","","Status with code  451  and reason  Unavailable For Legal Reasons .",10,N],[18,"InternalServerError","","Status with code  500  and reason  Internal Server Error .",10,N],[18,"NotImplemented","","Status with code  501  and reason  Not Implemented .",10,N],[18,"BadGateway","","Status with code  502  and reason  Bad Gateway .",10,N],[18,"ServiceUnavailable","","Status with code  503  and reason  Service Unavailable .",10,N],[18,"GatewayTimeout","","Status with code  504  and reason  Gateway Timeout .",10,N],[18,"HttpVersionNotSupported","","Status with code  505  and reason  HTTP Version Not Supported .",10,N],[18,"VariantAlsoNegotiates","","Status with code  506  and reason  Variant Also Negotiates .",10,N],[18,"InsufficientStorage","","Status with code  507  and reason  Insufficient Storage .",10,N],[18,"LoopDetected","","Status with code  508  and reason  Loop Detected .",10,N],[18,"NotExtended","","Status with code  510  and reason  Not Extended .",10,N],[18,"NetworkAuthenticationRequired","","Status with code  511  and reason  Network Authentication Required .",10,N],[11,"from_code","","Returns a Status given a standard status code `code`. If `code` is not a known status code, `None` is returned.",10,[[["u16"]],["option",["status"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["header"]]],[11,"hash","","",11,N],[11,"eq","","",11,[[["self"],["header"]],["bool"]]],[11,"ne","","",11,[[["self"],["header"]],["bool"]]],[11,"new","","Constructs a new header. This method should be used rarely and only for non-standard headers. Instead, prefer to use the `Into<Header>` implementations of many types, including ContentType and all of the headers in http::hyper::header.",11,[[["n"],["v"]],["header"]]],[11,"name","","Returns the name of this header with casing preserved. To do a case-insensitive equality check, use `.name` directly.",11,[[["self"]],["str"]]],[11,"value","","Returns the value of this header.",11,[[["self"]],["str"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",90,[[["self"]],["headermap"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"eq","","",90,[[["self"],["headermap"]],["bool"]]],[11,"ne","","",90,[[["self"],["headermap"]],["bool"]]],[11,"default","","",90,[[],["headermap"]]],[11,"new","","Returns an empty collection.",90,[[],["headermap"]]],[11,"contains","","Returns true if `self` contains a header with the name `name`.",90,[[["self"],["str"]],["bool"]]],[11,"len","","Returns the number of values stored in the map.",90,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if there are no headers stored in the map. Otherwise returns `false`.",90,[[["self"]],["bool"]]],[11,"get","","Returns an iterator over all of the values stored in `self` for the header with name `name`. The headers are returned in FIFO order.",90,N],[11,"get_one","","Returns the first value stored for the header with name `name` if there is one.",90,[[["self"],["str"]],["option",["str"]]]],[11,"replace","","Replace any header that matches the name of `header.name` with `header`. If there is no such header in `self`, add `header`. If the matching header had multiple values, all of the values are removed, and only the value in `header` will remain.",90,[[["self"],["h"]],["bool"]]],[11,"replace_raw","","A convenience method to replace a header using a raw name and value. Aliases `replace(Header::new(name, value))`. Should be used rarely.",90,[[["self"],["n"],["v"]],["bool"]]],[11,"replace_all","","Replaces all of the values for a header with name `name` with `values`. This a low-level method and should rarely be used.",90,[[["self"],["h"],["vec",["cow"]]]]],[11,"add","","Adds `header` into the map. If a header with `header.name` was previously added, that header will have one more value.",90,[[["self"],["h"]]]],[11,"add_raw","","A convenience method to add a header using a raw name and value. Aliases `add(Header::new(name, value))`. Should be used rarely.",90,[[["self"],["n"],["v"]]]],[11,"add_all","","Adds all of the values to a header with name `name`. This a low-level method and should rarely be used. `values` will be empty when this method returns.",90,[[["self"],["h"],["vec"]]]],[11,"remove","","Remove all of the values for header with name `name`.",90,[[["self"],["str"]]]],[11,"remove_all","","Removes all of the headers stored in this map and returns a vector containing them. Header names are returned in no specific order, but all values for a given header name are grouped together, and values are in FIFO order.",90,[[["self"]],["vec",["header"]]]],[11,"iter","","Returns an iterator over all of the `Header`s stored in the map. Header names are returned in no specific order, but all values for a given header name are grouped together, and values are in FIFO order.",90,N],[11,"into_iter","","Consumes `self` and returns an iterator over all of the `Header`s stored in the map. Header names are returned in no specific order, but all values for a given header name are grouped together, and values are in FIFO order.",90,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["qmediatype"]]],[11,"eq","","",9,[[["self"],["qmediatype"]],["bool"]]],[11,"ne","","",9,[[["self"],["qmediatype"]],["bool"]]],[11,"weight","","Retrieve the weight of the media type, if there is any.",9,[[["self"]],["option",["f32"]]]],[11,"weight_or","","Retrieve the weight of the media type or a given default value.",9,[[["self"],["f32"]],["f32"]]],[11,"media_type","","Borrow the internal `MediaType`.",9,[[["self"]],["mediatype"]]],[11,"from","","",9,[[["mediatype"]],["qmediatype"]]],[11,"deref","","",9,[[["self"]],["mediatype"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"clone","","",91,[[["self"]],["accept"]]],[11,"eq","","",91,[[["self"],["accept"]],["bool"]]],[11,"ne","","",91,[[["self"],["accept"]],["bool"]]],[11,"from","","",91,[[["t"]],["accept"]]],[11,"new","","Constructs a new `Accept` header from one or more media types.",91,[[["t"]],["accept"]]],[11,"preferred","","Retrieve the client's preferred media type. This method follows [RFC 7231 5.3.2]. If the list of media types is empty, this method returns a media type of any with no quality value: (`*/*`).",91,[[["self"]],["qmediatype"]]],[11,"first","","Retrieve the first media type in `self`, if any.",91,[[["self"]],["option",["qmediatype"]]]],[11,"iter","","Returns an iterator over all of the (quality) media types in `self`. Media types are returned in the order in which they appear in the header.",91,N],[11,"media_types","","Returns an iterator over all of the (bare) media types in `self`. Media types are returned in the order in which they appear in the header.",91,N],[18,"Any","","An `Accept` header with the single media type for  any media type :  * / * ",91,N],[18,"Binary","","An `Accept` header with the single media type for  binary data :  application / octet-stream ",91,N],[18,"HTML","","An `Accept` header with the single media type for  HTML :  text / html ",91,N],[18,"Plain","","An `Accept` header with the single media type for  plain text :  text / plain ",91,N],[18,"JSON","","An `Accept` header with the single media type for  JSON :  application / json ",91,N],[18,"MsgPack","","An `Accept` header with the single media type for  MessagePack :  application / msgpack ",91,N],[18,"Form","","An `Accept` header with the single media type for  forms :  application / x-www-form-urlencoded ",91,N],[18,"JavaScript","","An `Accept` header with the single media type for  JavaScript :  application / javascript ",91,N],[18,"CSS","","An `Accept` header with the single media type for  CSS :  text / css ",91,N],[18,"FormData","","An `Accept` header with the single media type for  multipart form data :  multipart / form-data ",91,N],[18,"XML","","An `Accept` header with the single media type for  XML :  text / xml ",91,N],[18,"CSV","","An `Accept` header with the single media type for  CSV :  text / csv ",91,N],[18,"PNG","","An `Accept` header with the single media type for  PNG :  image / png ",91,N],[18,"GIF","","An `Accept` header with the single media type for  GIF :  image / gif ",91,N],[18,"BMP","","An `Accept` header with the single media type for  BMP :  image / bmp ",91,N],[18,"JPEG","","An `Accept` header with the single media type for  JPEG :  image / jpeg ",91,N],[18,"WEBP","","An `Accept` header with the single media type for  WEBP :  image / webp ",91,N],[18,"SVG","","An `Accept` header with the single media type for  SVG :  image / svg+xml ",91,N],[18,"WEBM","","An `Accept` header with the single media type for  WEBM :  video / webm ",91,N],[18,"OGG","","An `Accept` header with the single media type for  OGG :  video / ogg ",91,N],[18,"WAV","","An `Accept` header with the single media type for  WAV :  audio / wav ",91,N],[18,"PDF","","An `Accept` header with the single media type for  PDF :  application / pdf ",91,N],[18,"TTF","","An `Accept` header with the single media type for  TTF :  application / font-sfnt ",91,N],[18,"OTF","","An `Accept` header with the single media type for  OTF :  application / font-sfnt ",91,N],[18,"WOFF","","An `Accept` header with the single media type for  WOFF :  application / font-woff ",91,N],[18,"WOFF2","","An `Accept` header with the single media type for  WOFF2 :  font / woff2 ",91,N],[18,"WASM","","An `Accept` header with the single media type for  WASM :  application / wasm ",91,N],[18,"JsonApi","","An `Accept` header with the single media type for  JSON API :  application / vnd.api+json ",91,N],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",91,[[["str"]],["result",["accept","string"]]]],[11,"into","","",91,[[["self"]],["header"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"eq","","",92,[[["self"],["rawstr"]],["bool"]]],[11,"ne","","",92,[[["self"],["rawstr"]],["bool"]]],[11,"partial_cmp","","",92,[[["self"],["rawstr"]],["option",["ordering"]]]],[11,"lt","","",92,[[["self"],["rawstr"]],["bool"]]],[11,"le","","",92,[[["self"],["rawstr"]],["bool"]]],[11,"gt","","",92,[[["self"],["rawstr"]],["bool"]]],[11,"ge","","",92,[[["self"],["rawstr"]],["bool"]]],[11,"cmp","","",92,[[["self"],["rawstr"]],["ordering"]]],[11,"hash","","",92,N],[11,"from_str","","Constructs an `&RawStr` from an `&str` at no cost.",92,[[["str"]],["rawstr"]]],[11,"percent_decode","","Returns a percent-decoded version of the string.",92,[[["self"]],["result",["cow","utf8error"]]]],[11,"percent_decode_lossy","","Returns a percent-decoded version of the string. Any invalid UTF-8 percent-encoded byte sequences will be replaced � U+FFFD, the replacement character.",92,[[["self"]],["cow",["str"]]]],[11,"url_decode","","Returns a URL-decoded version of the string. This is identical to percent decoding except that `+` characters are converted into spaces. This is the encoding used by form values.",92,[[["self"]],["result",["string","utf8error"]]]],[11,"html_escape","","Returns an HTML escaped version of `self`. Allocates only when characters need to be escaped.",92,[[["self"]],["cow",["str"]]]],[11,"as_str","","Converts `self` into an `&str`.",92,[[["self"]],["str"]]],[11,"as_uncased_str","","Converts `self` into an `&UncasedStr`.",92,[[["self"]],["uncasedstr"]]],[11,"eq","","",92,[[["self"],["str"]],["bool"]]],[11,"eq","","",92,[[["self"],["string"]],["bool"]]],[11,"partial_cmp","","",92,[[["self"],["str"]],["option",["ordering"]]]],[11,"as_ref","","",92,[[["self"]],["str"]]],[11,"as_ref","","",92,N],[11,"to_string","","",92,[[["self"]],["string"]]],[11,"deref","","",92,[[["self"]],["str"]]],[11,"deref_mut","","",92,[[["self"]],["str"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[0,"uncased","","Contains types that encapsulate uncased ASCII strings.",N,N],[3,"UncasedStr","rocket::http::uncased","A reference to an uncased (case-preserving) ASCII string. This is typically created from an `&str` as follows:",N,N],[3,"Uncased","","An uncased (case-preserving), owned or borrowed ASCII string.",N,N],[5,"uncased_eq","","Returns true if `s1` and `s2` are equal without considering case.",N,[[["s1"],["s2"]],["bool"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a reference to an `UncasedStr` from an `&str`.",93,[[["str"]],["uncasedstr"]]],[11,"as_str","","Returns `self` as an `&str`.",93,[[["self"]],["str"]]],[11,"into_uncased","","Converts a `Box<UncasedStr>` into an `Uncased` without copying or allocating.",93,[[["box",["uncasedstr"]]],["uncased"]]],[11,"eq","","",93,[[["self"],["uncasedstr"]],["bool"]]],[11,"eq","","",93,[[["self"],["str"]],["bool"]]],[11,"eq","","",93,[[["self"],["str"]],["bool"]]],[11,"hash","","",93,[[["self"],["h"]]]],[11,"partial_cmp","","",93,[[["self"],["uncasedstr"]],["option",["ordering"]]]],[11,"cmp","","",93,[[["self"],["self"]],["ordering"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"clone","","",94,[[["self"]],["uncased"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `Uncased` string from `string` without allocating.",94,[[["s"]],["uncased"]]],[11,"into_string","","Converts `self` into an owned `String`, allocating if necessary.",94,[[["self"]],["string"]]],[11,"into_boxed_uncased","","Converts `self` into a `Box<UncasedStr>`.",94,[[["self"]],["box",["uncasedstr"]]]],[11,"deref","","",94,[[["self"]],["uncasedstr"]]],[11,"as_ref","","",94,[[["self"]],["uncasedstr"]]],[11,"borrow","","",94,[[["self"]],["uncasedstr"]]],[11,"from","","",94,[[["str"]],["self"]]],[11,"from","","",94,[[["string"]],["self"]]],[11,"from","","",94,[[["cow",["str"]]],["self"]]],[11,"from","","",94,[[["t"]],["self"]]],[11,"partial_cmp","","",94,[[["self"],["uncased"]],["option",["ordering"]]]],[11,"cmp","","",94,[[["self"],["self"]],["ordering"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"eq","","",94,[[["self"],["uncased"]],["bool"]]],[11,"eq","","",94,[[["self"],["str"]],["bool"]]],[11,"eq","","",94,[[["self"],["str"]],["bool"]]],[11,"hash","","",94,[[["self"],["h"]]]],[0,"request","rocket","Types and traits for request parsing and handling.",N,N],[3,"Request","rocket::request","The type of an incoming web request.",N,N],[3,"Form","","A `FromData` type for parsing `FromForm` types strictly.",N,N],[3,"LenientForm","","A `FromData` type for parsing `FromForm` types leniently.",N,N],[3,"FormItems","","Iterator over the key/value pairs of a given HTTP form string.",N,N],[3,"State","","Request guard to retrieve managed state.",N,N],[11,"clone","rocket","",95,[[["self"]],["request"]]],[11,"method","","Retrieve the method from `self`.",95,[[["self"]],["method"]]],[11,"set_method","","Set the method of `self`.",95,[[["self"],["method"]]]],[11,"uri","","Borrow the URI from `self`, which is guaranteed to be an absolute URI.",95,[[["self"]],["uri"]]],[11,"set_uri","","Set the URI in `self`. The `uri` parameter can be of any type that implements `Into<URI>` including `&str` and `String`; it must be a valid, absolute URI.",95,[[["self"],["u"]]]],[11,"remote","","Returns the address of the remote connection that initiated this request if the address is known. If the address is not known, `None` is returned.",95,[[["self"]],["option",["socketaddr"]]]],[11,"set_remote","","Sets the remote address of `self` to `address`.",95,[[["self"],["socketaddr"]]]],[11,"headers","","Returns a `HeaderMap` of all of the headers in `self`.",95,[[["self"]],["headermap"]]],[11,"add_header","","Add `header` to `self`'s headers. The type of `header` can be any type that implements the `Into<Header>` trait. This includes common types such as `ContentType` and `Accept`.",95,[[["self"],["h"]]]],[11,"replace_header","","Replaces the value of the header with name `header.name` with `header.value`. If no such header exists, `header` is added as a header to `self`.",95,[[["self"],["h"]]]],[11,"cookies","","Returns a wrapped borrow to the cookies in `self`.",95,[[["self"]],["cookies"]]],[11,"content_type","","Returns the Content-Type header of `self`. If the header is not present, returns `None`. The Content-Type header is cached after the first call to this function. As a result, subsequent calls will always return the same value.",95,[[["self"]],["option",["contenttype"]]]],[11,"accept","","Returns the Accept header of `self`. If the header is not present, returns `None`. The Accept header is cached after the first call to this function. As a result, subsequent calls will always return the same value.",95,[[["self"]],["option",["accept"]]]],[11,"format","","Returns the media type \"format\" of the request.",95,[[["self"]],["option",["mediatype"]]]],[11,"limits","","Returns the configured application receive limits.",95,[[["self"]],["limits"]]],[11,"route","","Get the presently matched route, if any.",95,[[["self"]],["option",["route"]]]],[11,"guard","","Invokes the request guard implemention for `T`, returning its outcome.",95,[[["self"]],["outcome"]]],[11,"get_param","","Retrieves and parses into `T` the 0-indexed `n`th dynamic parameter from the request. Returns `Error::NoKey` if `n` is greater than the number of params. Returns `Error::BadParse` if the parameter type `T` can't be parsed from the parameter.",95,[[["self"],["usize"]],["result",["error"]]]],[11,"get_segments","","Retrieves and parses into `T` all of the path segments in the request URI beginning at the 0-indexed `n`th dynamic parameter. `T` must implement FromSegments, which is used to parse the segments.",95,[[["self"],["usize"]],["result",["error"]]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Pretty prints a Request. This is primarily used by Rocket's logging infrastructure.",95,[[["self"],["formatter"]],["result"]]],[11,"from_segments","rocket::http::uri","",85,[[["segments"]],["result",["segments"]]]],[11,"completed","rocket::request","Returns `true` if the form string was parsed to completion. Returns `false` otherwise. All valid form strings will parse to completion, while invalid form strings will not.",96,[[["self"]],["bool"]]],[11,"exhaust","","Parses all remaining key/value pairs and returns `true` if parsing ran to completion. All valid form strings will parse to completion, while invalid form strings will not.",96,[[["self"]],["bool"]]],[11,"inner_str","","Retrieves the original string being parsed by this iterator. The string returned by this method does not change, regardless of the status of the iterator.",96,[[["self"]],["rawstr"]]],[11,"from","","Returns an iterator over the key/value pairs in the `x-www-form-urlencoded` form `string`.",96,[[["rawstr"]],["formitems"]]],[11,"from","","Returns an iterator over the key/value pairs in the `x-www-form-urlencoded` form `string`.",96,[[["str"]],["formitems"]]],[11,"next","","",96,[[["self"]],["option"]]],[11,"get","","Immutably borrow the parsed type.",97,[[["self"]],["t"]]],[11,"raw_form_string","","Returns the raw form string that was used to parse the encapsulated object.",97,[[["self"]],["str"]]],[11,"into_inner","","Consumes `self` and returns the parsed value. For safety reasons, this method may only be called when the parsed value contains no non-`'static` references.",97,[[["self"]],["t"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"from_data","","Parses a `Form` from incoming form data.",97,[[["request"],["data"]],["outcome"]]],[11,"get","","Immutably borrow the parsed type.",98,[[["self"]],["t"]]],[11,"raw_form_string","","Returns the raw form string that was used to parse the encapsulated object.",98,[[["self"]],["str"]]],[11,"into_inner","","Consumes `self` and returns the parsed value. For safety reasons, this method may only be called when the parsed value contains no non-`'static` references.",98,[[["self"]],["t"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"from_data","","Parses a `LenientForm` from incoming form data.",98,[[["request"],["data"]],["outcome"]]],[11,"from_request","rocket::http","",12,[[["request"]],["outcome"]]],[11,"from_request","","",88,[[["request"]],["outcome"]]],[11,"fmt","rocket","",99,[[["self"],["formatter"]],["result"]]],[11,"eq","","",99,[[["self"],["state"]],["bool"]]],[11,"ne","","",99,[[["self"],["state"]],["bool"]]],[11,"partial_cmp","","",99,[[["self"],["state"]],["option",["ordering"]]]],[11,"lt","","",99,[[["self"],["state"]],["bool"]]],[11,"le","","",99,[[["self"],["state"]],["bool"]]],[11,"gt","","",99,[[["self"],["state"]],["bool"]]],[11,"ge","","",99,[[["self"],["state"]],["bool"]]],[11,"cmp","","",99,[[["self"],["state"]],["ordering"]]],[11,"hash","","",99,N],[11,"inner","","Retrieve a borrow to the underyling value with a lifetime of `'r`.",99,[[["self"]],["t"]]],[11,"from_request","","",99,[[["request"]],["outcome",["state"]]]],[11,"deref","","",99,[[["self"]],["t"]]],[6,"Outcome","rocket::request","Type alias for the `Outcome` of a `FromRequest` conversion.",N,N],[6,"FlashMessage","","Type alias to retrieve Flash messages from a request.",N,N],[8,"FromRequest","","Trait implemented by request guards to derive a value from incoming requests.",N,N],[16,"Error","","The associated error to be returned if derivation fails.",100,N],[10,"from_request","","Derives an instance of `Self` from the incoming request metadata.",100,[[["request"]],["outcome"]]],[8,"FromParam","","Trait to convert a dynamic path segment string to a concrete value.",N,N],[16,"Error","","The associated error to be returned when parsing fails.",101,N],[10,"from_param","","Parses an instance of `Self` from a dynamic path parameter string or returns an `Error` if one cannot be parsed.",101,[[["rawstr"]],["result"]]],[8,"FromSegments","","Trait to convert many dynamic path segment strings to a concrete value.",N,N],[16,"Error","","The associated error to be returned when parsing fails.",102,N],[10,"from_segments","","Parses an instance of `Self` from many dynamic path parameter strings or returns an `Error` if one cannot be parsed.",102,[[["segments"]],["result"]]],[8,"FromForm","","Trait to create an instance of some type from an HTTP form. Form requires its generic type to implement this trait.",N,N],[16,"Error","","The associated error to be returned when parsing fails.",103,N],[10,"from_form","","Parses an instance of `Self` from the iterator of form items `it`.",103,[[["formitems"],["bool"]],["result"]]],[8,"FromFormValue","","Trait to create instance of some type from a form value; expected from field types in structs deriving `FromForm`.",N,N],[16,"Error","","The associated error which can be returned from parsing. It is a good idea to have the return type be or contain an `&'v str` so that the unparseable string can be examined after a bad parse.",104,N],[10,"from_form_value","","Parses an instance of `Self` from an HTTP form field value or returns an `Error` if one cannot be parsed.",104,[[["rawstr"]],["result"]]],[11,"default","","Returns a default value to be used when the form field does not exist. If this returns `None`, then the field is required. Otherwise, this should return `Some(default_value)`. The default implementation simply returns `None`.",104,[[],["option"]]],[0,"response","rocket","Types and traits to build and send responses.",N,N],[3,"Response","rocket::response","A response, as returned by `Responder`s.",N,N],[3,"ResponseBuilder","","Type for easily building `Response`s.",N,N],[3,"Redirect","","An empty redirect response to a given URL.",N,N],[3,"Flash","","Sets a \"flash\" cookie that will be removed when it is accessed. The anologous request type is FlashMessage.",N,N],[3,"NamedFile","","A file with an associated name; responds with the Content-Type based on the file extension.",N,N],[3,"Stream","","Streams a response to a client from an arbitrary `Read`er type.",N,N],[3,"Failure","","A failing response; simply forwards to the catcher for the given `Status`.",N,N],[12,"0","","",105,N],[3,"Content","","Sets the Content-Type of a `Responder` to a chosen value.",N,N],[12,"0","","",106,N],[12,"1","","",106,N],[4,"Body","","The body of a response: can be sized or streamed/chunked.",N,N],[13,"Sized","","A fixed-size body.",107,N],[13,"Chunked","","A streamed/chunked body, akin to `Transfer-Encoding: chunked`.",107,N],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"to","","Construct a temporary \"see other\" (303) redirect response. This is the typical response when redirecting a user to another page. This type of redirect indicates that the client should look elsewhere, but always via a `GET` request, for a given resource.",108,[[["str"]],["redirect"]]],[11,"temporary","","Construct a \"temporary\" (307) redirect response. This response instructs the client to reissue the current request to a different URL, maintaining the contents of the request identically. This means that, for example, a `POST` request will be resent, contents included, to the requested URL.",108,[[["str"]],["redirect"]]],[11,"permanent","","Construct a \"permanent\" (308) redirect response. This redirect must only be used for permanent redirects as it is cached by clients. This response instructs the client to reissue requests for the current URL to a different URL, now and in the future, maintaining the contents of the request identically. This means that, for example, a `POST` request will be resent, contents included, to the requested URL.",108,[[["str"]],["redirect"]]],[11,"found","","Construct a temporary \"found\" (302) redirect response. This response instructs the client to reissue the current request to a different URL, ideally maintaining the contents of the request identically. Unfortunately, different clients may respond differently to this type of redirect, so `303` or `307` redirects, which disambiguate, are preferred.",108,[[["str"]],["redirect"]]],[11,"moved","","Construct a permanent \"moved\" (301) redirect response. This response should only be used for permanent redirects as it can be cached by browsers. Because different clients may respond differently to this type of redirect, a `308` redirect, which disambiguates, is preferred.",108,[[["str"]],["redirect"]]],[11,"respond_to","","",108,[[["self"],["request"]],["result",["response","status"]]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructs a new `Flash` message with the given `name`, `msg`, and underlying `responder`.",109,[[["r"],["n"],["m"]],["flash"]]],[11,"success","","Constructs a \"success\" `Flash` message with the given `responder` and `msg`.",109,[[["r"],["s"]],["flash"]]],[11,"warning","","Constructs a \"warning\" `Flash` message with the given `responder` and `msg`.",109,[[["r"],["s"]],["flash"]]],[11,"error","","Constructs an \"error\" `Flash` message with the given `responder` and `msg`.",109,[[["r"],["s"]],["flash"]]],[11,"respond_to","","",109,[[["self"],["request"]],["result",["response","status"]]]],[11,"name","","Returns the `name` of this message.",109,[[["self"]],["str"]]],[11,"msg","","Returns the `msg` contents of this message.",109,[[["self"]],["str"]]],[11,"from_request","","",109,[[["request"]],["outcome"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"open","","Attempts to open a file in read-only mode.",110,[[["p"]],["result",["namedfile"]]]],[11,"file","","Retrieve the underlying `File`.",110,[[["self"]],["file"]]],[11,"take_file","","Take the underlying `File`.",110,[[["self"]],["file"]]],[11,"file_mut","","Retrieve a mutable borrow to the underlying `File`.",110,[[["self"]],["file"]]],[11,"path","","Retrieve the path of this file.",110,[[["self"]],["path"]]],[11,"respond_to","","",110,[[["self"],["request"]],["result"]]],[11,"deref","","",110,[[["self"]],["file"]]],[11,"deref_mut","","",110,[[["self"]],["file"]]],[11,"read","","",110,N],[11,"read_to_end","","",110,[[["self"],["vec"]],["result",["usize"]]]],[11,"write","","",110,N],[11,"flush","","",110,[[["self"]],["result"]]],[11,"seek","","",110,[[["self"],["seekfrom"]],["result",["u64"]]]],[11,"chunked","","Create a new stream from the given `reader` and sets the chunk size for each streamed chunk to `chunk_size` bytes.",111,[[["t"],["u64"]],["stream"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"from","","",111,[[["t"]],["self"]]],[11,"respond_to","","",111,[[["self"],["request"]],["result",["response","status"]]]],[11,"eq","","",107,[[["self"],["body"]],["bool"]]],[11,"ne","","",107,[[["self"],["body"]],["bool"]]],[11,"clone","","",107,[[["self"]],["body"]]],[11,"hash","","",107,N],[11,"as_mut","","Returns a new `Body` with a mutable borrow to `self`'s inner type.",107,[[["self"]],["body"]]],[11,"map","","Consumes `self`. Passes the inner type as a parameter to `f` and constructs a new body with the size of `self` and the return value of the call to `f`.",107,[[["self"],["f"]],["body"]]],[11,"into_inner","","Consumes `self` and returns the inner body.",107,[[["self"]],["t"]]],[11,"is_sized","","Returns `true` if `self` is a `Body::Sized`.",107,[[["self"]],["bool"]]],[11,"is_chunked","","Returns `true` if `self` is a `Body::Chunked`.",107,[[["self"]],["bool"]]],[11,"into_bytes","","Attepts to read `self` into a `Vec` and returns it. If reading fails, returns `None`.",107,[[["self"]],["option",["vec"]]]],[11,"into_string","","Attepts to read `self` into a `String` and returns it. If reading or conversion fails, returns `None`.",107,[[["self"]],["option",["string"]]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `ResponseBuilder` that will build on top of the `base` `Response`.",112,[[["response"]],["responsebuilder"]]],[11,"status","","Sets the status of the `Response` being built to `status`.",112,[[["self"],["status"]],["responsebuilder"]]],[11,"raw_status","","Sets the status of the `Response` being built to a custom status constructed from the `code` and `reason` phrase.",112,[[["self"],["u16"],["str"]],["responsebuilder"]]],[11,"header","","Adds `header` to the `Response`, replacing any header with the same name that already exists in the response. If multiple headers with the same name exist, they are all removed, and only the new header and value will remain.",112,[[["self"],["h"]],["responsebuilder"]]],[11,"header_adjoin","","Adds `header` to the `Response` by adjoining the header with any existing headers with the same name that already exist in the `Response`. This allow for multiple headers with the same name and potentially different values to be present in the `Response`.",112,[[["self"],["h"]],["responsebuilder"]]],[11,"raw_header","","Adds custom a header to the `Response` with the given name and value, replacing any header with the same name that already exists in the response. If multiple headers with the same name exist, they are all removed, and only the new header and value will remain.",112,[[["self"],["n"],["v"]],["responsebuilder"]]],[11,"raw_header_adjoin","","Adds custom header to the `Response` with the given name and value, adjoining the header with any existing headers with the same name that already exist in the `Response`. This allow for multiple headers with the same name and potentially different values to be present in the `Response`.",112,[[["self"],["n"],["v"]],["responsebuilder"]]],[11,"sized_body","","Sets the body of the `Response` to be the fixed-sized `body`.",112,[[["self"],["b"]],["responsebuilder"]]],[11,"streamed_body","","Sets the body of the `Response` to be the streamed `body`.",112,[[["self"],["b"]],["responsebuilder"]]],[11,"chunked_body","","Sets the body of the `Response` to be the streamed `body` with a custom chunk size, in bytes.",112,[[["self"],["b"],["u64"]],["responsebuilder"]]],[11,"raw_body","","Sets the body of `self` to be `body`. This method should typically not be used, opting instead for one of `sized_body`, `streamed_body`, or `chunked_body`.",112,[[["self"],["body"]],["responsebuilder"]]],[11,"merge","","Merges the `other` `Response` into `self` by setting any fields in `self` to the corresponding value in `other` if they are set in `other`. Fields in `self` are unchanged if they are not set in `other`. If a header is set in both `self` and `other`, the values in `other` are kept. Headers set only in `self` remain.",112,[[["self"],["response"]],["responsebuilder"]]],[11,"join","","Joins the `other` `Response` into `self` by setting any fields in `self` to the corresponding value in `other` if they are set in `self`. Fields in `self` are unchanged if they are already set. If a header is set in both `self` and `other`, the values are adjoined, with the values in `self` coming first. Headers only in `self` or `other` are set in `self`.",112,[[["self"],["response"]],["responsebuilder"]]],[11,"finalize","","Retrieve the built `Response`.",112,[[["self"]],["response"]]],[11,"ok","","Retrieve the built `Response` wrapped in `Ok`.",112,[[["self"]],["result",["response"]]]],[11,"default","rocket","",113,[[],["response"]]],[11,"new","","Creates a new, empty `Response` without a status, body, or headers. Because all HTTP responses must have a status, if a default `Response` is written to the client without a status, the status defaults to `200 Ok`.",113,[[],["response"]]],[11,"build","","Returns a `ResponseBuilder` with a base of `Response::new()`.",113,[[],["responsebuilder"]]],[11,"build_from","","Returns a `ResponseBuilder` with a base of `other`.",113,[[["response"]],["responsebuilder"]]],[11,"status","","Returns the status of `self`.",113,[[["self"]],["status"]]],[11,"set_status","","Sets the status of `self` to `status`.",113,[[["self"],["status"]]]],[11,"content_type","","Returns the Content-Type header of `self`. If the header is not present or is malformed, returns `None`.",113,[[["self"]],["option",["contenttype"]]]],[11,"set_raw_status","","Sets the status of `self` to a custom `status` with status code `code` and reason phrase `reason`. This method should be used sparingly; prefer to use set_status instead.",113,[[["self"],["u16"],["str"]]]],[11,"headers","","Returns a `HeaderMap` of all of the headers in `self`.",113,[[["self"]],["headermap"]]],[11,"set_header","","Sets the header `header` in `self`. Any existing headers with the name `header.name` will be lost, and only `header` will remain. The type of `header` can be any type that implements `Into<Header>`. This includes `Header` itself, `ContentType` and `hyper::header` types.",113,[[["self"],["h"]],["bool"]]],[11,"set_raw_header","","Sets the custom header with name `name` and value `value` in `self`. Any existing headers with the same `name` will be lost, and the new custom header will remain. This method should be used sparingly; prefer to use set_header instead.",113,[[["self"],["n"],["v"]],["bool"]]],[11,"adjoin_header","","Adds the header `header` to `self`. If `self` contains headers with the name `header.name`, another header with the same name and value `header.value` is added. The type of `header` can be any type that implements `Into<Header>`. This includes `Header` itself, `ContentType` and `hyper::header` types.",113,[[["self"],["h"]]]],[11,"adjoin_raw_header","","Adds a custom header with name `name` and value `value` to `self`. If `self` already contains headers with the name `name`, another header with the same `name` and `value` is added. The type of `header` can be any type that implements `Into<Header>`. This includes `Header` itself, `ContentType` and `hyper::header` types.",113,[[["self"],["n"],["v"]]]],[11,"remove_header","","Removes all headers with the name `name`.",113,[[["self"],["str"]]]],[11,"body","","Returns a mutable borrow of the body of `self`, if there is one. The body is borrowed mutably to allow for reading.",113,[[["self"]],["option",["body"]]]],[11,"body_string","","Consumes `self's` body and reads it into a string. If `self` doesn't have a body, reading fails, or string conversion (for non-UTF-8 bodies) fails, returns `None`. Note that `self`'s `body` is consumed after a call to this method.",113,[[["self"]],["option",["string"]]]],[11,"body_bytes","","Consumes `self's` body and reads it into a `Vec` of `u8` bytes. If `self` doesn't have a body or reading fails returns `None`. Note that `self`'s `body` is consumed after a call to this method.",113,[[["self"]],["option",["vec"]]]],[11,"take_body","","Moves the body of `self` out and returns it, if there is one, leaving no body in its place.",113,[[["self"]],["option",["body"]]]],[11,"set_sized_body","","Sets the body of `self` to be the fixed-sized `body`. The size of the body is obtained by `seek`ing to the end and then `seek`ing back to the start.",113,[[["self"],["b"]]]],[11,"set_streamed_body","","Sets the body of `self` to be `body`, which will be streamed. The chunk size of the stream is DEFAULT_CHUNK_SIZE. Use set_chunked_body for custom chunk sizes.",113,[[["self"],["b"]]]],[11,"set_chunked_body","","Sets the body of `self` to be `body`, which will be streamed with chunk size `chunk_size`.",113,[[["self"],["b"],["u64"]]]],[11,"set_raw_body","","Sets the body of `self` to be `body`. This method should typically not be used, opting instead for one of `set_sized_body`, `set_streamed_body`, or `set_chunked_body`.",113,[[["self"],["body"]]]],[11,"merge","","Replaces this response's status and body with that of `other`, if they exist in `other`. Any headers that exist in `other` replace the ones in `self`. Any in `self` that aren't in `other` remain in `self`.",113,[[["self"],["response"]]]],[11,"join","","Sets `self`'s status and body to that of `other` if they are not already set in `self`. Any headers present in both `other` and `self` are adjoined.",113,[[["self"],["response"]]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"respond_to","","This is the identity implementation. It simply returns `Ok(self)`.",113,[[["self"],["request"]],["result",["response","status"]]]],[11,"fmt","rocket::response","",105,[[["self"],["formatter"]],["result"]]],[11,"respond_to","","",105,[[["self"],["request"]],["result",["response","status"]]]],[11,"from","","",105,[[["status"]],["self"]]],[0,"content","","Contains types that set the Content-Type of a response.",N,N],[3,"Content","rocket::response::content","Sets the Content-Type of a `Responder` to a chosen value.",N,N],[12,"0","","",106,N],[12,"1","","",106,N],[3,"Json","","Override the `Content-Type` of the response to  JSON , or  application/json .",N,N],[12,"0","","",114,N],[3,"Xml","","Override the `Content-Type` of the response to  XML , or  text/xml .",N,N],[12,"0","","",115,N],[3,"MsgPack","","Override the `Content-Type` of the response to  MessagePack , or  application/msgpack .",N,N],[12,"0","","",116,N],[3,"Html","","Override the `Content-Type` of the response to  HTML , or  text/html .",N,N],[12,"0","","",117,N],[3,"Plain","","Override the `Content-Type` of the response to  plain text , or  text/plain .",N,N],[12,"0","","",118,N],[3,"Css","","Override the `Content-Type` of the response to  CSS , or  text/css .",N,N],[12,"0","","",119,N],[3,"JavaScript","","Override the `Content-Type` of the response to  JavaScript , or  application/javascript .",N,N],[12,"0","","",120,N],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"clone","","",106,[[["self"]],["content"]]],[11,"eq","","",106,[[["self"],["content"]],["bool"]]],[11,"ne","","",106,[[["self"],["content"]],["bool"]]],[11,"respond_to","","",106,[[["self"],["request"]],["result",["response","status"]]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"clone","","",114,[[["self"]],["json"]]],[11,"eq","","",114,[[["self"],["json"]],["bool"]]],[11,"ne","","",114,[[["self"],["json"]],["bool"]]],[11,"respond_to","","",114,[[["self"],["request"]],["result",["response","status"]]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"clone","","",115,[[["self"]],["xml"]]],[11,"eq","","",115,[[["self"],["xml"]],["bool"]]],[11,"ne","","",115,[[["self"],["xml"]],["bool"]]],[11,"respond_to","","",115,[[["self"],["request"]],["result",["response","status"]]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"clone","","",116,[[["self"]],["msgpack"]]],[11,"eq","","",116,[[["self"],["msgpack"]],["bool"]]],[11,"ne","","",116,[[["self"],["msgpack"]],["bool"]]],[11,"respond_to","","",116,[[["self"],["request"]],["result",["response","status"]]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"clone","","",117,[[["self"]],["html"]]],[11,"eq","","",117,[[["self"],["html"]],["bool"]]],[11,"ne","","",117,[[["self"],["html"]],["bool"]]],[11,"respond_to","","",117,[[["self"],["request"]],["result",["response","status"]]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"clone","","",118,[[["self"]],["plain"]]],[11,"eq","","",118,[[["self"],["plain"]],["bool"]]],[11,"ne","","",118,[[["self"],["plain"]],["bool"]]],[11,"respond_to","","",118,[[["self"],["request"]],["result",["response","status"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"clone","","",119,[[["self"]],["css"]]],[11,"eq","","",119,[[["self"],["css"]],["bool"]]],[11,"ne","","",119,[[["self"],["css"]],["bool"]]],[11,"respond_to","","",119,[[["self"],["request"]],["result",["response","status"]]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"clone","","",120,[[["self"]],["javascript"]]],[11,"eq","","",120,[[["self"],["javascript"]],["bool"]]],[11,"ne","","",120,[[["self"],["javascript"]],["bool"]]],[11,"respond_to","","",120,[[["self"],["request"]],["result",["response","status"]]]],[0,"status","rocket::response","Contains types that set the status code and corresponding headers of a response.",N,N],[3,"Created","rocket::response::status","Sets the status of the response to 201 (Created).",N,N],[12,"0","","",121,N],[12,"1","","",121,N],[3,"Accepted","","Sets the status of the response to 202 (Accepted).",N,N],[12,"0","","",122,N],[3,"NoContent","","Sets the status of the response to 204 (No Content).",N,N],[3,"Reset","","Sets the status of the response to 205 (Reset Content).",N,N],[3,"BadRequest","","Sets the status of the response to 400 (Bad Request).",N,N],[12,"0","","",123,N],[3,"NotFound","","Sets the status of the response to 404 (Not Found).",N,N],[12,"0","","",124,N],[3,"Custom","","Creates a response with the given status code and underyling responder.",N,N],[12,"0","","",125,N],[12,"1","","",125,N],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"clone","","",121,[[["self"]],["created"]]],[11,"eq","","",121,[[["self"],["created"]],["bool"]]],[11,"ne","","",121,[[["self"],["created"]],["bool"]]],[11,"respond_to","","",121,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","","",121,[[["self"],["request"]],["result",["response","status"]]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"clone","","",122,[[["self"]],["accepted"]]],[11,"eq","","",122,[[["self"],["accepted"]],["bool"]]],[11,"ne","","",122,[[["self"],["accepted"]],["bool"]]],[11,"respond_to","","",122,[[["self"],["request"]],["result",["response","status"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"clone","","",126,[[["self"]],["nocontent"]]],[11,"eq","","",126,[[["self"],["nocontent"]],["bool"]]],[11,"respond_to","","",126,[[["self"],["request"]],["result",["response","status"]]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"clone","","",127,[[["self"]],["reset"]]],[11,"eq","","",127,[[["self"],["reset"]],["bool"]]],[11,"respond_to","","",127,[[["self"],["request"]],["result",["response","status"]]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"clone","","",123,[[["self"]],["badrequest"]]],[11,"eq","","",123,[[["self"],["badrequest"]],["bool"]]],[11,"ne","","",123,[[["self"],["badrequest"]],["bool"]]],[11,"respond_to","","",123,[[["self"],["request"]],["result",["response","status"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"clone","","",124,[[["self"]],["notfound"]]],[11,"eq","","",124,[[["self"],["notfound"]],["bool"]]],[11,"ne","","",124,[[["self"],["notfound"]],["bool"]]],[11,"respond_to","","",124,[[["self"],["request"]],["result",["response","status"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"clone","","",125,[[["self"]],["custom"]]],[11,"eq","","",125,[[["self"],["custom"]],["bool"]]],[11,"ne","","",125,[[["self"],["custom"]],["bool"]]],[11,"respond_to","","",125,[[["self"],["request"]],["result",["response","status"]]]],[6,"Result","rocket::response","Type alias for the `Result` of a `Responder::respond` call.",N,N],[17,"DEFAULT_CHUNK_SIZE","","The default size, in bytes, of a chunk for streamed responses.",N,N],[8,"Responder","","Trait implemented by types that generate responses for clients.",N,N],[10,"respond_to","","Returns `Ok` if a `Response` could be generated successfully. Otherwise, returns an `Err` with a failing `Status`.",128,[[["self"],["request"]],["result",["response","status"]]]],[0,"outcome","rocket","Success, failure, and forward handling.",N,N],[4,"Outcome","rocket::outcome","An enum representing success (`Success`), failure (`Failure`), or forwarding (`Forward`).",N,N],[13,"Success","","Contains the success value.",3,N],[13,"Failure","","Contains the failure error value.",3,N],[13,"Forward","","Contains the value to forward on.",3,N],[8,"IntoOutcome","","Conversion trait from some type into an Outcome type.",N,N],[16,"Failure","","The type to use when returning an `Outcome::Failure`.",129,N],[16,"Forward","","The type to use when returning an `Outcome::Forward`.",129,N],[10,"into_outcome","","Converts `self` into an `Outcome`. If `self` represents a success, an `Outcome::Success` is returned. Otherwise, an `Outcome::Failure` is returned with `failure` as the inner value.",129,N],[10,"or_forward","","Converts `self` into an `Outcome`. If `self` represents a success, an `Outcome::Success` is returned. Otherwise, an `Outcome::Forward` is returned with `forward` as the inner value.",129,N],[11,"clone","","",3,[[["self"]],["outcome"]]],[11,"eq","","",3,[[["self"],["outcome"]],["bool"]]],[11,"ne","","",3,[[["self"],["outcome"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["outcome"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["outcome"]],["bool"]]],[11,"le","","",3,[[["self"],["outcome"]],["bool"]]],[11,"gt","","",3,[[["self"],["outcome"]],["bool"]]],[11,"ge","","",3,[[["self"],["outcome"]],["bool"]]],[11,"cmp","","",3,[[["self"],["outcome"]],["ordering"]]],[11,"hash","","",3,N],[11,"unwrap","","Unwraps the Outcome, yielding the contents of a Success.",3,[[["self"]],["s"]]],[11,"expect","","Unwraps the Outcome, yielding the contents of a Success.",3,[[["self"],["str"]],["s"]]],[11,"is_success","","Return true if this `Outcome` is a `Success`.",3,[[["self"]],["bool"]]],[11,"is_failure","","Return true if this `Outcome` is a `Failure`.",3,[[["self"]],["bool"]]],[11,"is_forward","","Return true if this `Outcome` is a `Forward`.",3,[[["self"]],["bool"]]],[11,"succeeded","","Converts from `Outcome<S, E, F>` to `Option<S>`.",3,[[["self"]],["option"]]],[11,"failed","","Converts from `Outcome<S, E, F>` to `Option<E>`.",3,[[["self"]],["option"]]],[11,"forwarded","","Converts from `Outcome<S, E, F>` to `Option<F>`.",3,[[["self"]],["option"]]],[11,"success_or","","Converts from `Outcome<S, E, F>` to `Result<S, T>` for a given `T`.",3,[[["self"],["t"]],["result"]]],[11,"success_or_else","","Converts from `Outcome<S, E, F>` to `Result<S, T>` for a given `T` produced from a supplied function or closure.",3,[[["self"],["v"]],["result"]]],[11,"as_ref","","Converts from `Outcome<S, E, F>` to `Outcome<&S, &E, &F>`.",3,[[["self"]],["outcome"]]],[11,"map","","Maps an `Outcome<S, E, F>` to an `Outcome<T, E, F>` by applying the function `f` to the value of type `S` in `self` if `self` is an `Outcome::Success`.",3,[[["self"],["m"]],["outcome"]]],[11,"map_failure","","Maps an `Outcome<S, E, F>` to an `Outcome<S, T, F>` by applying the function `f` to the value of type `E` in `self` if `self` is an `Outcome::Failure`.",3,[[["self"],["m"]],["outcome"]]],[11,"map_forward","","Maps an `Outcome<S, E, F>` to an `Outcome<S, E, T>` by applying the function `f` to the value of type `F` in `self` if `self` is an `Outcome::Forward`.",3,[[["self"],["m"]],["outcome"]]],[11,"as_mut","","Converts from `Outcome<S, E, F>` to `Outcome<&mut S, &mut E, &mut F>`.",3,[[["self"]],["outcome"]]],[11,"into_result","","",3,[[["self"]],["result"]]],[11,"from_error","","",3,N],[11,"from_ok","","",3,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[0,"config","rocket","Application configuration and configuration parameter retrieval.",N,N],[6,"Array","rocket::config","Type representing a TOML array, payload of the `Value::Array` variant",N,N],[6,"Table","","Type representing a TOML table, payload of the `Value::Table` variant",N,N],[4,"Value","","Representation of a TOML value.",N,N],[13,"String","","Represents a TOML string",130,N],[13,"Integer","","Represents a TOML integer",130,N],[13,"Float","","Represents a TOML float",130,N],[13,"Boolean","","Represents a TOML boolean",130,N],[13,"Datetime","","Represents a TOML datetime",130,N],[13,"Array","","Represents a TOML array",130,N],[13,"Table","","Represents a TOML table",130,N],[3,"Datetime","","A parsed TOML datetime value",N,N],[3,"Limits","","Mapping from data type to size limits.",N,N],[3,"Config","","Structure for Rocket application configuration.",N,N],[12,"environment","","The environment that this configuration corresponds to.",0,N],[12,"address","","The address to serve on.",0,N],[12,"port","","The port to serve on.",0,N],[12,"workers","","The number of workers to run concurrently.",0,N],[12,"log_level","","How much information to log.",0,N],[12,"limits","","Streaming read size limits.",0,N],[12,"extras","","Extra parameters that aren't part of Rocket's core config.",0,N],[12,"config_path","","The path to the configuration file this config belongs to.",0,N],[3,"ConfigBuilder","","Structure following the builder pattern for building `Config` structures.",N,N],[12,"environment","","The environment that this configuration corresponds to.",131,N],[12,"address","","The address to serve on.",131,N],[12,"port","","The port to serve on.",131,N],[12,"workers","","The number of workers to run in parallel.",131,N],[12,"log_level","","How much information to log.",131,N],[12,"secret_key","","The secret key.",131,N],[12,"tls","","TLS configuration (path to certificates file, path to private key file).",131,N],[12,"limits","","Size limits.",131,N],[12,"extras","","Any extra parameters that aren't part of Rocket's config.",131,N],[12,"root","","The root directory of this config.",131,N],[4,"ConfigError","","The type of a configuration error.",N,N],[13,"BadCWD","","The current working directory could not be determined.",132,N],[13,"NotFound","","The configuration file was not found.",132,N],[13,"IoError","","There was an I/O error while reading the configuration file.",132,N],[13,"Io","","There was an I/O error while setting a configuration parameter.",132,N],[13,"BadFilePath","","The path at which the configuration file was found was invalid.",132,N],[13,"BadEnv","","An environment specified in `ROCKET_ENV` is invalid.",132,N],[13,"BadEntry","","An environment specified as a table `[environment]` is invalid.",132,N],[13,"BadType","","A config key was specified with a value of the wrong type.",132,N],[13,"ParseError","","There was a TOML parsing error.",132,N],[13,"BadEnvVal","","There was a TOML parsing error in a config environment variable.",132,N],[13,"UnknownKey","","The entry (key) is unknown.",132,N],[4,"Environment","","An enum corresponding to the valid configuration environments.",N,N],[13,"Development","","The development environment.",133,N],[13,"Staging","","The staging environment.",133,N],[13,"Production","","The production environment.",133,N],[4,"LoggingLevel","","Defines the different levels for log messages.",N,N],[13,"Critical","","Only shows errors and warning.",134,N],[13,"Normal","","Shows everything except debug and trace information.",134,N],[13,"Debug","","Shows everything.",134,N],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"pretty_print","","Prints this configuration error with Rocket formatting.",132,[[["self"]]]],[11,"is_not_found","","Returns `true` if `self` is of `NotFound` variant.",132,[[["self"]],["bool"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"description","","",132,[[["self"]],["str"]]],[11,"eq","","",132,[[["self"],["configerror"]],["bool"]]],[11,"hash","","",133,N],[11,"eq","","",133,[[["self"],["environment"]],["bool"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"clone","","",133,[[["self"]],["environment"]]],[11,"is_dev","","Returns `true` if `self` is `Environment::Development`.",133,[[["self"]],["bool"]]],[11,"is_stage","","Returns `true` if `self` is `Environment::Staging`.",133,[[["self"]],["bool"]]],[11,"is_prod","","Returns `true` if `self` is `Environment::Production`.",133,[[["self"]],["bool"]]],[11,"active","","Retrieves the \"active\" environment as determined by the `ROCKET_ENV` environment variable. If `ROCKET_ENV` is not set, returns `Development`.",133,[[],["result",["environment","configerror"]]]],[11,"from_str","","Parses a configuration environment from a string. Should be used indirectly via `str`'s `parse` method.",133,[[["str"]],["result"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"clone","rocket","",0,[[["self"]],["config"]]],[11,"build","","Returns a builder for `Config` structure where the default parameters are set to those of `env`. The root configuration directory is set to the current working directory.",0,[[["environment"]],["configbuilder"]]],[11,"new","","Creates a new configuration using the default parameters for the environment `env`. The root configuration directory is set to the current working directory.",0,[[["environment"]],["result",["config"]]]],[11,"development","","Returns a builder for `Config` structure where the default parameters are set to those of the development environment. The root configuration directory is set to the current working directory.",0,[[],["result",["config"]]]],[11,"staging","","Creates a new configuration using the default parameters from the staging environment. The root configuration directory is set to the current working directory.",0,[[],["result",["config"]]]],[11,"production","","Creates a new configuration using the default parameters from the production environment. The root configuration directory is set to the current working directory.",0,[[],["result",["config"]]]],[11,"set_root","","Sets the root directory of this configuration to `root`.",0,[[["self"],["p"]]]],[11,"set_address","","Sets the address of `self` to `address`.",0,[[["self"],["a"]],["result"]]],[11,"set_port","","Sets the `port` of `self` to `port`.",0,[[["self"],["u16"]]]],[11,"set_workers","","Sets the number of `workers` in `self` to `workers`.",0,[[["self"],["u16"]]]],[11,"set_secret_key","","Sets the `secret_key` in `self` to `key` which must be a 256-bit base64 encoded string.",0,[[["self"],["k"]],["result"]]],[11,"set_log_level","","Sets the logging level for `self` to `log_level`.",0,[[["self"],["logginglevel"]]]],[11,"set_limits","","Set the receive limits in `self` to `limits`.",0,[[["self"],["limits"]]]],[11,"set_extras","","Sets the extras for `self` to be the key/value pairs in `extras`. encoded string.",0,[[["self"],["hashmap",["string","value"]]]]],[11,"extras","","Returns an iterator over the names and values of all of the extras in `self`.",0,N],[11,"get_str","","Attempts to retrieve the extra named `name` as a string.",0,[[["self"],["str"]],["result",["str"]]]],[11,"get_int","","Attempts to retrieve the extra named `name` as an integer.",0,[[["self"],["str"]],["result",["i64"]]]],[11,"get_bool","","Attempts to retrieve the extra named `name` as a boolean.",0,[[["self"],["str"]],["result",["bool"]]]],[11,"get_float","","Attempts to retrieve the extra named `name` as a float.",0,[[["self"],["str"]],["result",["f64"]]]],[11,"get_slice","","Attempts to retrieve the extra named `name` as a slice of an array.",0,[[["self"],["str"]],["result",["array"]]]],[11,"get_table","","Attempts to retrieve the extra named `name` as a table.",0,[[["self"],["str"]],["result",["table"]]]],[11,"get_datetime","","Attempts to retrieve the extra named `name` as a datetime value.",0,[[["self"],["str"]],["result",["datetime"]]]],[11,"root","","Returns the path at which the configuration file for `self` is stored. For instance, if the configuration file is at `/tmp/Rocket.toml`, the path `/tmp` is returned.",0,[[["self"]],["path"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["config"]],["bool"]]],[11,"clone","rocket::config","",131,[[["self"]],["configbuilder"]]],[11,"new","","Create a new `ConfigBuilder` instance using the default parameters from the given `environment`. The root configuration directory is set to the current working directory.",131,[[["environment"]],["configbuilder"]]],[11,"address","","Sets the `address` in the configuration being built.",131,[[["self"],["a"]],["self"]]],[11,"port","","Sets the `port` in the configuration being built.",131,[[["self"],["u16"]],["self"]]],[11,"workers","","Sets `workers` in the configuration being built.",131,[[["self"],["u16"]],["self"]]],[11,"log_level","","Sets the `log_level` in the configuration being built.",131,[[["self"],["logginglevel"]],["self"]]],[11,"secret_key","","Sets the `secret_key` in the configuration being built.",131,[[["self"],["k"]],["self"]]],[11,"limits","","Sets the `limits` in the configuration being built.",131,[[["self"],["limits"]],["self"]]],[11,"tls","","Sets the TLS configuration in the configuration being built.",131,[[["self"],["c"],["k"]],["self"]]],[11,"environment","","Sets the `environment` in the configuration being built.",131,[[["self"],["environment"]],["self"]]],[11,"root","","Sets the `root` in the configuration being built.",131,[[["self"],["p"]],["self"]]],[11,"extra","","Adds an extra configuration parameter with `name` and `value` to the configuration being built. The value can be any type that implements `Into<Value>` including `&str`, `String`, `Vec<V: Into<Value>>`, `HashMap<S: Into<String>, V: Into<Value>>`, and most integer and float types.",131,[[["self"],["str"],["v"]],["self"]]],[11,"finalize","","Return the `Config` structure that was being built by this builder.",131,[[["self"]],["result",["config"]]]],[11,"unwrap","","Return the `Config` structure that was being built by this builder.",131,[[["self"]],["config"]]],[11,"expect","","Returns the `Config` structure that was being built by this builder.",131,[[["self"],["str"]],["config"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"clone","","",135,[[["self"]],["limits"]]],[11,"default","","",135,[[],["limits"]]],[11,"new","","Construct a new `Limits` structure with the default limits set.",135,[[],["self"]]],[11,"limit","","Adds or replaces a limit in `self`, consuming `self` and returning a new `Limits` structure with the added or replaced limit.",135,[[["self"],["s"],["u64"]],["self"]]],[11,"get","","Retrieve the set limit, if any, for the data type with name `name`.",135,[[["self"],["str"]],["option",["u64"]]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[6,"Result","","Wraps `std::result` with the error type of ConfigError.",N,N],[0,"data","rocket","Types and traits for handling incoming body data.",N,N],[3,"Data","rocket::data","Type representing the data in the body of an incoming request.",N,N],[3,"DataStream","","Raw data stream of a request body.",N,N],[11,"open","rocket","Returns the raw data stream.",136,[[["self"]],["datastream"]]],[11,"peek","","Retrieve the `peek` buffer.",136,N],[11,"peek_complete","","Returns true if the `peek` buffer contains all of the data in the body of the request. Returns `false` if it does not or if it is not known if it does.",136,[[["self"]],["bool"]]],[11,"stream_to","","A helper method to write the body of the request to any `Write` type.",136,[[["self"],["w"]],["result",["u64"]]]],[11,"stream_to_file","","A helper method to write the body of the request to a file at the path determined by `path`.",136,[[["self"],["p"]],["result",["u64"]]]],[11,"drop","","",136,[[["self"]]]],[11,"read","rocket::data","",137,N],[11,"drop","","",137,[[["self"]]]],[11,"from_data","rocket","",136,[[["request"],["data"]],["outcome"]]],[6,"Outcome","rocket::data","Type alias for the `Outcome` of a `FromData` conversion.",N,N],[8,"FromData","","Trait implemented by data guards to derive a value from request body data.",N,N],[16,"Error","","The associated error to be returned when the guard fails.",138,N],[10,"from_data","","Validates, parses, and converts an instance of `Self` from the incoming request body data.",138,[[["request"],["data"]],["outcome"]]],[0,"handler","rocket","The types of request and error handlers and their return values.",N,N],[6,"Outcome","rocket::handler","Type alias for the `Outcome` of a `Handler`.",N,N],[6,"Handler","","The type of a request handler.",N,N],[6,"ErrorHandler","","The type of an error handler.",N,N],[11,"from","","Return the `Outcome` of response to `req` from `responder`.",139,[[["request"],["t"]],["outcome"]]],[11,"failure","","Return an `Outcome` of `Failure` with the status code `code`. This is equivalent to `Outcome::Failure(code)`.",139,[[["status"]],["outcome"]]],[11,"forward","","Return an `Outcome` of `Forward` with the data `data`. This is equivalent to `Outcome::Forward(data)`.",139,[[["data"]],["outcome"]]],[0,"fairing","rocket","Fairings: callbacks at attach, launch, request, and response time.",N,N],[3,"Info","rocket::fairing","Information about a `Fairing`.",N,N],[12,"name","","The name of the fairing.",140,N],[12,"kind","","A set representing the callbacks the fairing wishes to receive.",140,N],[3,"Kind","","A bitset representing the kinds of callbacks a `Fairing` wishes to receive.",N,N],[4,"AdHoc","","A ad-hoc fairing that can be created from a function or closure.",N,N],[11,"on_attach","","Constructs an `AdHoc` attach fairing. The function `f` will be called by Rocket when this fairing is attached.",141,[[["f"]],["adhoc"]]],[11,"on_launch","","Constructs an `AdHoc` launch fairing. The function `f` will be called by Rocket just prior to launching.",141,[[["f"]],["adhoc"]]],[11,"on_request","","Constructs an `AdHoc` request fairing. The function `f` will be called by Rocket when a new request is received.",141,[[["f"]],["adhoc"]]],[11,"on_response","","Constructs an `AdHoc` response fairing. The function `f` will be called by Rocket when a response is ready to be sent.",141,[[["f"]],["adhoc"]]],[11,"info","","",141,[[["self"]],["info"]]],[11,"on_attach","","",141,[[["self"],["rocket"]],["result",["rocket","rocket"]]]],[11,"on_launch","","",141,[[["self"],["rocket"]]]],[11,"on_request","","",141,[[["self"],["request"],["data"]]]],[11,"on_response","","",141,[[["self"],["request"],["response"]]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[11,"clone","","",142,[[["self"]],["kind"]]],[18,"Attach","","`Kind` flag representing a request for an 'attach' callback.",142,N],[18,"Launch","","`Kind` flag representing a request for a 'launch' callback.",142,N],[18,"Request","","`Kind` flag representing a request for a 'request' callback.",142,N],[18,"Response","","`Kind` flag representing a request for a 'response' callback.",142,N],[11,"is","","Returns `true` if `self` is a superset of `other`. In other words, returns `true` if all of the kinds in `other` are also in `self`.",142,[[["self"],["kind"]],["bool"]]],[11,"is_exactly","","Returns `true` if `self` is exactly `other`.",142,[[["self"],["kind"]],["bool"]]],[11,"bitor","","",142,[[["self"],["self"]],["self"]]],[8,"Fairing","","Trait implemented by fairings: Rocket's structured middleware.",N,N],[10,"info","","Returns an `Info` structure containing the `name` and `Kind` of this fairing. The `name` can be any arbitrary string. `Kind` must be an `or`d set of `Kind` variants.",143,[[["self"]],["info"]]],[11,"on_attach","","The attach callback. Returns `Ok` if launch should proceed and `Err` if launch should be aborted.",143,[[["self"],["rocket"]],["result",["rocket","rocket"]]]],[11,"on_launch","","The launch callback.",143,[[["self"],["rocket"]]]],[11,"on_request","","The request callback.",143,[[["self"],["request"],["data"]]]],[11,"on_response","","The response callback.",143,[[["self"],["request"],["response"]]]],[0,"error","rocket","Types representing various errors that can occur in a Rocket application.",N,N],[3,"LaunchError","rocket::error","An error that occurs during launch.",N,N],[4,"Error","","[unstable] Error type for Rocket. Likely to change.",N,N],[13,"BadMethod","","The request method was bad.",4,N],[13,"BadParse","","The value could not be parsed.",4,N],[13,"NoRoute","","There was no such route.",4,N],[13,"Internal","","The error was internal.",4,N],[13,"NoKey","","The requested key/index does not exist.",4,N],[4,"LaunchErrorKind","","The kind of launch error that occured.",N,N],[13,"Io","","",144,N],[13,"Collision","","",144,N],[13,"FailedFairing","","",144,N],[13,"Unknown","","",144,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["error"]]],[11,"eq","","",4,[[["self"],["error"]],["bool"]]],[11,"hash","","",4,N],[11,"fmt","","",144,[[["self"],["formatter"]],["result"]]],[11,"kind","","Retrieve the `kind` of the launch error.",145,[[["self"]],["launcherrorkind"]]],[11,"from","","",145,[[["launcherrorkind"]],["launcherror"]]],[11,"from","","",145,[[["error"]],["launcherror"]]],[11,"from","","",145,[[["error"]],["launcherror"]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result"]]],[11,"description","","",145,[[["self"]],["str"]]],[11,"drop","","",145,[[["self"]]]],[11,"new","rocket","Creates a new route with the given method, path, and handler with a base of `/`.",1,[[["method"],["s"],["handler"]],["route"]]],[11,"ranked","","Creates a new route with the given rank, method, path, and handler with a base of `/`.",1,[[["isize"],["method"],["s"],["handler"]],["route"]]],[11,"base","","Retrieves the path of the base mount point of this route as an `&str`.",1,[[["self"]],["str"]]],[11,"set_base","","Sets the base mount point of the route. Does not update the rank or any other parameters.",1,[[["self"],["s"]]]],[11,"set_uri","","Sets the path of the route. Does not update the rank or any other parameters.",1,[[["self"],["s"]]]],[11,"clone","","",1,[[["self"]],["route"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"ignite","","Create a new `Rocket` application using the configuration information in `Rocket.toml`. If the file does not exist or if there is an I/O error reading the file, the defaults are used. See the config documentation for more information on defaults.",146,[[],["rocket"]]],[11,"custom","","Creates a new `Rocket` application using the supplied custom configuration information. The `Rocket.toml` file, if present, is ignored. Any environment variables setting config parameters are ignored. If `log` is `true`, logging is enabled.",146,[[["config"],["bool"]],["rocket"]]],[11,"mount","","Mounts all of the routes in the supplied vector at the given `base` path. Mounting a route with path `path` at path `base` makes the route available at `base/path`.",146,[[["self"],["str"],["vec",["route"]]],["self"]]],[11,"catch","","Registers all of the catchers in the supplied vector.",146,[[["self"],["vec",["catcher"]]],["self"]]],[11,"manage","","Add `state` to the state managed by this instance of Rocket.",146,[[["self"],["t"]],["self"]]],[11,"attach","","Attaches a fairing to this instance of Rocket.",146,[[["self"],["f"]],["self"]]],[11,"launch","","Starts the application server and begins listening for and dispatching requests to mounted routes and catchers. Unless there is an error, this function does not return and blocks until program termination.",146,[[["self"]],["launcherror"]]],[11,"routes","","Returns an iterator over all of the routes mounted on this instance of Rocket.",146,N],[11,"state","","Returns `Some` of the managed state value for the type `T` if it is being managed by `self`. Otherwise, returns `None`.",146,[[["self"]],["option"]]],[11,"config","","Returns the active configuration.",146,[[["self"]],["config"]]],[11,"new","","Creates a catcher for the given status code using the given error handler. This should only be used when routing manually.",2,[[["u16"],["errorhandler"]],["catcher"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[6,"Handler","","The type of a request handler.",N,N],[6,"ErrorHandler","","The type of an error handler.",N,N],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","","",95,[[["self"]],["string"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"handle","","",146,N],[11,"to_string","rocket::outcome","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","rocket::error","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_string","rocket::config","",134,[[["self"]],["string"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,N],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"eq","","",134,[[["self"],["logginglevel"]],["bool"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"clone","","",134,[[["self"]],["logginglevel"]]],[11,"from_str","","",134,[[["str"]],["result"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"from","rocket::local","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"new","rocket::http","Creates a new `Cookie` with the given name and value.",147,[[["n"],["v"]],["cookie"]]],[11,"named","","Creates a new `Cookie` with the given name and an empty value.",147,[[["n"]],["cookie"]]],[11,"build","","Creates a new `CookieBuilder` instance from the given key and value strings.",147,[[["n"],["v"]],["cookiebuilder"]]],[11,"parse","","Parses a `Cookie` from the given HTTP cookie header value string. Does not perform any percent-decoding.",147,[[["s"]],["result",["cookie","parseerror"]]]],[11,"parse_encoded","","Parses a `Cookie` from the given HTTP cookie header value string where the name and value fields are percent-encoded. Percent-decodes the name/value fields.",147,[[["s"]],["result",["cookie","parseerror"]]]],[11,"encoded","","Wraps `self` in an `EncodedCookie`: a cost-free wrapper around `Cookie` whose `Display` implementation percent-encodes the name and value of the wrapped `Cookie`.",147,[[["self"]],["encodedcookie"]]],[11,"into_owned","","Converts `self` into a `Cookie` with a static lifetime. This method results in at most one allocation.",147,[[["self"]],["cookie"]]],[11,"name","","Returns the name of `self`.",147,[[["self"]],["str"]]],[11,"value","","Returns the value of `self`.",147,[[["self"]],["str"]]],[11,"name_value","","Returns the name and value of `self` as a tuple of `(name, value)`.",147,N],[11,"http_only","","Returns whether this cookie was marked `HttpOnly` or not.",147,[[["self"]],["bool"]]],[11,"secure","","Returns whether this cookie was marked `Secure` or not.",147,[[["self"]],["bool"]]],[11,"same_site","","Returns the `SameSite` attribute of this cookie if one was specified.",147,[[["self"]],["option",["samesite"]]]],[11,"max_age","","Returns the specified max-age of the cookie if one was specified.",147,[[["self"]],["option",["duration"]]]],[11,"path","","Returns the `Path` of the cookie if one was specified.",147,[[["self"]],["option",["str"]]]],[11,"domain","","Returns the `Domain` of the cookie if one was specified.",147,[[["self"]],["option",["str"]]]],[11,"expires","","Returns the `Expires` time of the cookie if one was specified.",147,[[["self"]],["option",["tm"]]]],[11,"set_name","","Sets the name of `self` to `name`.",147,N],[11,"set_value","","Sets the value of `self` to `value`.",147,N],[11,"set_http_only","","Sets the value of `http_only` in `self` to `value`.",147,N],[11,"set_secure","","Sets the value of `secure` in `self` to `value`.",147,N],[11,"set_same_site","","Sets the value of `same_site` in `self` to `value`.",147,N],[11,"set_max_age","","Sets the value of `max_age` in `self` to `value`.",147,N],[11,"set_path","","Sets the `path` of `self` to `path`.",147,N],[11,"set_domain","","Sets the `domain` of `self` to `domain`.",147,N],[11,"set_expires","","Sets the expires field of `self` to `time`.",147,N],[11,"make_permanent","","Makes `self` a \"permanent\" cookie by extending its expiration and max age 20 years into the future.",147,N],[11,"name_raw","","Returns the name of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, returns `None`.",147,[[["self"]],["option",["str"]]]],[11,"value_raw","","Returns the value of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, returns `None`.",147,[[["self"]],["option",["str"]]]],[11,"path_raw","","Returns the `Path` of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, or if `self` doesn't contain a `Path`, or if the `Path` has changed since parsing, returns `None`.",147,[[["self"]],["option",["str"]]]],[11,"domain_raw","","Returns the `Domain` of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, or if `self` doesn't contain a `Domain`, or if the `Domain` has changed since parsing, returns `None`.",147,[[["self"]],["option",["str"]]]],[11,"to_string","","",147,[[["self"]],["string"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"to_owned","","",147,[[["self"]],["t"]]],[11,"clone_into","","",147,N],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"scheme","rocket::http::hyper::header","",32,[[],["option",["str"]]]],[11,"fmt_scheme","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"scheme","","",33,[[],["option",["str"]]]],[11,"fmt_scheme","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",58,[[["self"],["qualityitem"]],["option",["ordering"]]]],[11,"partial_cmp","","",57,[[["self"],["quality"]],["option",["ordering"]]]],[11,"lt","","",57,[[["self"],["quality"]],["bool"]]],[11,"le","","",57,[[["self"],["quality"]],["bool"]]],[11,"gt","","",57,[[["self"],["quality"]],["bool"]]],[11,"ge","","",57,[[["self"],["quality"]],["bool"]]],[11,"partial_cmp","","",48,[[["self"],["httpdate"]],["option",["ordering"]]]],[11,"lt","","",48,[[["self"],["httpdate"]],["bool"]]],[11,"le","","",48,[[["self"],["httpdate"]],["bool"]]],[11,"gt","","",48,[[["self"],["httpdate"]],["bool"]]],[11,"ge","","",48,[[["self"],["httpdate"]],["bool"]]],[11,"from_iter","","",149,[[["i"]],["headers"]]],[11,"deref_mut","","",40,[[["self"]],["contentrangespec"]]],[11,"deref_mut","","",24,[[["self"]],["vec"]]],[11,"deref_mut","","",27,[[["self"]],["u32"]]],[11,"deref_mut","","",37,[[["self"]],["vec"]]],[11,"deref_mut","","",25,[[["self"]],["vec"]]],[11,"deref_mut","","",59,[[["self"]],["string"]]],[11,"deref_mut","","",35,[[["self"]],["vec"]]],[11,"deref_mut","","",20,[[["self"]],["vec"]]],[11,"deref_mut","","",45,[[["self"]],["httpdate"]]],[11,"deref_mut","","",52,[[["self"]],["string"]]],[11,"deref_mut","","",50,[[["self"]],["httpdate"]]],[11,"deref_mut","","",51,[[["self"]],["httpdate"]]],[11,"deref_mut","","",49,[[["self"]],["httpdate"]]],[11,"deref_mut","","",61,[[["self"]],["vec"]]],[11,"deref_mut","","",46,[[["self"]],["string"]]],[11,"deref_mut","","",54,[[["self"]],["vec"]]],[11,"deref_mut","","",22,[[["self"]],["vec"]]],[11,"deref_mut","","",28,[[["self"]],["vec"]]],[11,"deref_mut","","",31,[[["self"]],["s"]]],[11,"deref_mut","","",41,[[["self"]],["mime"]]],[11,"deref_mut","","",34,[[["self"]],["vec"]]],[11,"deref_mut","","",63,[[["self"]],["string"]]],[11,"deref_mut","","",62,[[["self"]],["vec"]]],[11,"deref_mut","","",39,[[["self"]],["u64"]]],[11,"deref_mut","","",23,[[["self"]],["vec"]]],[11,"deref_mut","","",29,[[["self"]],["method"]]],[11,"deref_mut","","",30,[[["self"]],["vec"]]],[11,"deref_mut","","",38,[[["self"]],["vec"]]],[11,"deref_mut","","",42,[[["self"]],["httpdate"]]],[11,"deref_mut","","",55,[[["self"]],["vec"]]],[11,"deref_mut","","",26,[[["self"]],["vec"]]],[11,"deref_mut","","",43,[[["self"]],["entitytag"]]],[11,"deref_mut","","",21,[[["self"]],["vec"]]],[11,"deref_mut","","",19,[[["self"]],["vec"]]],[11,"default","","",57,[[],["quality"]]],[11,"from_str","","",32,[[["str"]],["result",["basic","error"]]]],[11,"from_str","","",80,[[["str"]],["result",["range","error"]]]],[11,"from_str","","",69,[[["str"]],["result",["contentrangespec","error"]]]],[11,"from_str","","",58,[[["str"]],["result",["qualityitem","error"]]]],[11,"from_str","","",79,[[["str"]],["result",["protocolname"]]]],[11,"from_str","","",68,[[["str"]],["result",["connectionoption"]]]],[11,"from_str","","",48,[[["str"]],["result",["httpdate","error"]]]],[11,"from_str","","",53,[[["str"]],["result",["origin","error"]]]],[11,"from_str","","",65,[[["str"]],["result",["byterangespec","error"]]]],[11,"from_str","","",56,[[["str"]],["result",["protocol"]]]],[11,"from_str","","",67,[[["str"]],["result",["charset","error"]]]],[11,"from_str","","",47,[[["str"]],["result",["host","error"]]]],[11,"from_str","","",78,[[["str"]],["result",["preference","option"]]]],[11,"from_str","","",44,[[["str"]],["result",["entitytag","error"]]]],[11,"from_str","","",33,[[["str"]],["result",["bearer","error"]]]],[11,"from_str","","",72,[[["str"]],["result",["encoding","error"]]]],[11,"from_str","","",60,[[["str"]],["result",["stricttransportsecurity","error"]]]],[11,"from_str","","",81,[[["str"]],["result",["rangeunit","error"]]]],[11,"from_str","","",66,[[["str"]],["result",["cachedirective","option"]]]],[11,"cmp","","",48,[[["self"],["httpdate"]],["ordering"]]],[11,"cmp","","",57,[[["self"],["quality"]],["ordering"]]],[11,"eq","","",32,[[["self"],["basic"]],["bool"]]],[11,"ne","","",32,[[["self"],["basic"]],["bool"]]],[11,"eq","","",56,[[["self"],["protocol"]],["bool"]]],[11,"ne","","",56,[[["self"],["protocol"]],["bool"]]],[11,"eq","","",53,[[["self"],["origin"]],["bool"]]],[11,"eq","","",70,[[["self"],["dispositionparam"]],["bool"]]],[11,"ne","","",70,[[["self"],["dispositionparam"]],["bool"]]],[11,"eq","","",72,[[["self"],["encoding"]],["bool"]]],[11,"ne","","",72,[[["self"],["encoding"]],["bool"]]],[11,"eq","","",21,[[["self"],["acceptencoding"]],["bool"]]],[11,"ne","","",21,[[["self"],["acceptencoding"]],["bool"]]],[11,"eq","","",29,[[["self"],["accesscontrolrequestmethod"]],["bool"]]],[11,"ne","","",29,[[["self"],["accesscontrolrequestmethod"]],["bool"]]],[11,"eq","","",62,[[["self"],["upgrade"]],["bool"]]],[11,"ne","","",62,[[["self"],["upgrade"]],["bool"]]],[11,"eq","","",69,[[["self"],["contentrangespec"]],["bool"]]],[11,"ne","","",69,[[["self"],["contentrangespec"]],["bool"]]],[11,"eq","","",19,[[["self"],["accept"]],["bool"]]],[11,"ne","","",19,[[["self"],["accept"]],["bool"]]],[11,"eq","","",82,[[["self"],["referrerpolicy"]],["bool"]]],[11,"eq","","",30,[[["self"],["allow"]],["bool"]]],[11,"ne","","",30,[[["self"],["allow"]],["bool"]]],[11,"eq","","",49,[[["self"],["ifmodifiedsince"]],["bool"]]],[11,"ne","","",49,[[["self"],["ifmodifiedsince"]],["bool"]]],[11,"eq","","",38,[[["self"],["contentlanguage"]],["bool"]]],[11,"ne","","",38,[[["self"],["contentlanguage"]],["bool"]]],[11,"eq","","",37,[[["self"],["contentencoding"]],["bool"]]],[11,"ne","","",37,[[["self"],["contentencoding"]],["bool"]]],[11,"eq","","",74,[[["self"],["ifmatch"]],["bool"]]],[11,"ne","","",74,[[["self"],["ifmatch"]],["bool"]]],[11,"eq","","",35,[[["self"],["connection"]],["bool"]]],[11,"ne","","",35,[[["self"],["connection"]],["bool"]]],[11,"eq","","",41,[[["self"],["contenttype"]],["bool"]]],[11,"ne","","",41,[[["self"],["contenttype"]],["bool"]]],[11,"eq","","",68,[[["self"],["connectionoption"]],["bool"]]],[11,"ne","","",68,[[["self"],["connectionoption"]],["bool"]]],[11,"eq","","",79,[[["self"],["protocolname"]],["bool"]]],[11,"ne","","",79,[[["self"],["protocolname"]],["bool"]]],[11,"eq","","",71,[[["self"],["dispositiontype"]],["bool"]]],[11,"ne","","",71,[[["self"],["dispositiontype"]],["bool"]]],[11,"eq","","",55,[[["self"],["preferenceapplied"]],["bool"]]],[11,"ne","","",55,[[["self"],["preferenceapplied"]],["bool"]]],[11,"eq","","",25,[[["self"],["accesscontrolallowmethods"]],["bool"]]],[11,"ne","","",25,[[["self"],["accesscontrolallowmethods"]],["bool"]]],[11,"eq","","",23,[[["self"],["acceptranges"]],["bool"]]],[11,"ne","","",23,[[["self"],["acceptranges"]],["bool"]]],[11,"eq","","",58,[[["self"],["qualityitem"]],["bool"]]],[11,"ne","","",58,[[["self"],["qualityitem"]],["bool"]]],[11,"eq","","",33,[[["self"],["bearer"]],["bool"]]],[11,"ne","","",33,[[["self"],["bearer"]],["bool"]]],[11,"eq","","",43,[[["self"],["etag"]],["bool"]]],[11,"ne","","",43,[[["self"],["etag"]],["bool"]]],[11,"eq","","",22,[[["self"],["acceptlanguage"]],["bool"]]],[11,"ne","","",22,[[["self"],["acceptlanguage"]],["bool"]]],[11,"eq","","",36,[[["self"],["contentdisposition"]],["bool"]]],[11,"ne","","",36,[[["self"],["contentdisposition"]],["bool"]]],[11,"eq","","",51,[[["self"],["lastmodified"]],["bool"]]],[11,"ne","","",51,[[["self"],["lastmodified"]],["bool"]]],[11,"eq","","",31,[[["self"],["authorization"]],["bool"]]],[11,"ne","","",31,[[["self"],["authorization"]],["bool"]]],[11,"eq","","",76,[[["self"],["ifrange"]],["bool"]]],[11,"ne","","",76,[[["self"],["ifrange"]],["bool"]]],[11,"eq","","",52,[[["self"],["location"]],["bool"]]],[11,"ne","","",52,[[["self"],["location"]],["bool"]]],[11,"eq","","",83,[[["self"],["vary"]],["bool"]]],[11,"ne","","",83,[[["self"],["vary"]],["bool"]]],[11,"eq","","",80,[[["self"],["range"]],["bool"]]],[11,"ne","","",80,[[["self"],["range"]],["bool"]]],[11,"eq","","",63,[[["self"],["useragent"]],["bool"]]],[11,"ne","","",63,[[["self"],["useragent"]],["bool"]]],[11,"eq","","",67,[[["self"],["charset"]],["bool"]]],[11,"ne","","",67,[[["self"],["charset"]],["bool"]]],[11,"eq","","",57,[[["self"],["quality"]],["bool"]]],[11,"ne","","",57,[[["self"],["quality"]],["bool"]]],[11,"eq","","",28,[[["self"],["accesscontrolrequestheaders"]],["bool"]]],[11,"ne","","",28,[[["self"],["accesscontrolrequestheaders"]],["bool"]]],[11,"eq","","",64,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"ne","","",64,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"eq","","",65,[[["self"],["byterangespec"]],["bool"]]],[11,"ne","","",65,[[["self"],["byterangespec"]],["bool"]]],[11,"eq","","",44,[[["self"],["entitytag"]],["bool"]]],[11,"ne","","",44,[[["self"],["entitytag"]],["bool"]]],[11,"eq","","",54,[[["self"],["prefer"]],["bool"]]],[11,"ne","","",54,[[["self"],["prefer"]],["bool"]]],[11,"eq","","",60,[[["self"],["stricttransportsecurity"]],["bool"]]],[11,"ne","","",60,[[["self"],["stricttransportsecurity"]],["bool"]]],[11,"eq","","",61,[[["self"],["transferencoding"]],["bool"]]],[11,"ne","","",61,[[["self"],["transferencoding"]],["bool"]]],[11,"eq","","",75,[[["self"],["ifnonematch"]],["bool"]]],[11,"ne","","",75,[[["self"],["ifnonematch"]],["bool"]]],[11,"eq","","",34,[[["self"],["cachecontrol"]],["bool"]]],[11,"ne","","",34,[[["self"],["cachecontrol"]],["bool"]]],[11,"eq","","",40,[[["self"],["contentrange"]],["bool"]]],[11,"ne","","",40,[[["self"],["contentrange"]],["bool"]]],[11,"eq","","",20,[[["self"],["acceptcharset"]],["bool"]]],[11,"ne","","",20,[[["self"],["acceptcharset"]],["bool"]]],[11,"eq","","",77,[[["self"],["pragma"]],["bool"]]],[11,"ne","","",77,[[["self"],["pragma"]],["bool"]]],[11,"eq","","",66,[[["self"],["cachedirective"]],["bool"]]],[11,"ne","","",66,[[["self"],["cachedirective"]],["bool"]]],[11,"eq","","",46,[[["self"],["from"]],["bool"]]],[11,"ne","","",46,[[["self"],["from"]],["bool"]]],[11,"eq","","",48,[[["self"],["httpdate"]],["bool"]]],[11,"ne","","",48,[[["self"],["httpdate"]],["bool"]]],[11,"eq","","",45,[[["self"],["expires"]],["bool"]]],[11,"ne","","",45,[[["self"],["expires"]],["bool"]]],[11,"eq","","",81,[[["self"],["rangeunit"]],["bool"]]],[11,"ne","","",81,[[["self"],["rangeunit"]],["bool"]]],[11,"eq","","",47,[[["self"],["host"]],["bool"]]],[11,"ne","","",47,[[["self"],["host"]],["bool"]]],[11,"eq","","",27,[[["self"],["accesscontrolmaxage"]],["bool"]]],[11,"ne","","",27,[[["self"],["accesscontrolmaxage"]],["bool"]]],[11,"eq","","",149,[[["self"],["headers"]],["bool"]]],[11,"eq","","",42,[[["self"],["date"]],["bool"]]],[11,"ne","","",42,[[["self"],["date"]],["bool"]]],[11,"eq","","",78,[[["self"],["preference"]],["bool"]]],[11,"ne","","",78,[[["self"],["preference"]],["bool"]]],[11,"eq","","",59,[[["self"],["referer"]],["bool"]]],[11,"ne","","",59,[[["self"],["referer"]],["bool"]]],[11,"eq","","",73,[[["self"],["expect"]],["bool"]]],[11,"eq","","",39,[[["self"],["contentlength"]],["bool"]]],[11,"ne","","",39,[[["self"],["contentlength"]],["bool"]]],[11,"eq","","",148,[[["self"],["accesscontrolallowcredentials"]],["bool"]]],[11,"eq","","",24,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"ne","","",24,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"eq","","",26,[[["self"],["accesscontrolexposeheaders"]],["bool"]]],[11,"ne","","",26,[[["self"],["accesscontrolexposeheaders"]],["bool"]]],[11,"eq","","",50,[[["self"],["ifunmodifiedsince"]],["bool"]]],[11,"ne","","",50,[[["self"],["ifunmodifiedsince"]],["bool"]]],[11,"deref","","",19,[[["self"]],["vec"]]],[11,"deref","","",46,[[["self"]],["string"]]],[11,"deref","","",39,[[["self"]],["u64"]]],[11,"deref","","",37,[[["self"]],["vec"]]],[11,"deref","","",30,[[["self"]],["vec"]]],[11,"deref","","",50,[[["self"]],["httpdate"]]],[11,"deref","","",34,[[["self"]],["vec"]]],[11,"deref","","",45,[[["self"]],["httpdate"]]],[11,"deref","","",51,[[["self"]],["httpdate"]]],[11,"deref","","",52,[[["self"]],["string"]]],[11,"deref","","",22,[[["self"]],["vec"]]],[11,"deref","","",59,[[["self"]],["string"]]],[11,"deref","","",23,[[["self"]],["vec"]]],[11,"deref","","",35,[[["self"]],["vec"]]],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",44,[[["bool"],["string"]],["entitytag"]]],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",44,[[["string"]],["entitytag"]]],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",44,[[["string"]],["entitytag"]]],[11,"tag","","Get the tag.",44,[[["self"]],["str"]]],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",44,N],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",44,[[["self"],["entitytag"]],["bool"]]],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",44,[[["self"],["entitytag"]],["bool"]]],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",44,[[["self"],["entitytag"]],["bool"]]],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",44,[[["self"],["entitytag"]],["bool"]]],[11,"deref","","",43,[[["self"]],["entitytag"]]],[11,"deref","","",38,[[["self"]],["vec"]]],[11,"deref","","",29,[[["self"]],["method"]]],[11,"deref","","",26,[[["self"]],["vec"]]],[11,"deref","","",27,[[["self"]],["u32"]]],[11,"deref","","",63,[[["self"]],["string"]]],[11,"deref","","",21,[[["self"]],["vec"]]],[11,"deref","","",42,[[["self"]],["httpdate"]]],[11,"deref","","",61,[[["self"]],["vec"]]],[11,"deref","","",28,[[["self"]],["vec"]]],[11,"deref","","",54,[[["self"]],["vec"]]],[11,"deref","","",20,[[["self"]],["vec"]]],[11,"deref","","",49,[[["self"]],["httpdate"]]],[11,"get_param","rocket::http::hyper::mime","",16,[[["self"],["a"]],["option",["value"]]]],[11,"deref","rocket::http::hyper::header","",41,[[["self"]],["mime"]]],[11,"deref","","",31,[[["self"]],["s"]]],[11,"deref","","",55,[[["self"]],["vec"]]],[11,"deref","","",40,[[["self"]],["contentrangespec"]]],[11,"deref","","",25,[[["self"]],["vec"]]],[11,"deref","","",24,[[["self"]],["vec"]]],[11,"deref","","",62,[[["self"]],["vec"]]],[11,"fmt_header","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"extend","","",149,N],[11,"header_name","","",49,[[],["str"]]],[11,"parse_header","","",49,N],[11,"header_name","","",75,[[],["str"]]],[11,"parse_header","","",75,N],[11,"header_name","","",46,[[],["str"]]],[11,"parse_header","","",46,N],[11,"header_name","","",31,[[],["str"]]],[11,"parse_header","","",31,N],[11,"header_name","","",26,[[],["str"]]],[11,"parse_header","","",26,N],[11,"header_name","","",64,[[],["str"]]],[11,"parse_header","","",64,N],[11,"header_name","","",61,[[],["str"]]],[11,"parse_header","","",61,N],[11,"header_name","","",42,[[],["str"]]],[11,"parse_header","","",42,N],[11,"header_name","","",76,[[],["str"]]],[11,"parse_header","","",76,N],[11,"header_name","","",23,[[],["str"]]],[11,"parse_header","","",23,N],[11,"header_name","","",29,[[],["str"]]],[11,"parse_header","","",29,N],[11,"header_name","","",28,[[],["str"]]],[11,"parse_header","","",28,N],[11,"header_name","","",21,[[],["str"]]],[11,"parse_header","","",21,N],[11,"header_name","","",37,[[],["str"]]],[11,"parse_header","","",37,N],[11,"header_name","","",40,[[],["str"]]],[11,"parse_header","","",40,N],[11,"header_name","","",45,[[],["str"]]],[11,"parse_header","","",45,N],[11,"header_name","","",47,[[],["str"]]],[11,"parse_header","","",47,N],[11,"header_name","","",35,[[],["str"]]],[11,"parse_header","","",35,N],[11,"header_name","","",53,[[],["str"]]],[11,"parse_header","","",53,N],[11,"header_name","","",62,[[],["str"]]],[11,"parse_header","","",62,N],[11,"header_name","","",43,[[],["str"]]],[11,"parse_header","","",43,N],[11,"header_name","","",60,[[],["str"]]],[11,"parse_header","","",60,N],[11,"header_name","","",63,[[],["str"]]],[11,"parse_header","","",63,N],[11,"header_name","","",30,[[],["str"]]],[11,"parse_header","","",30,N],[11,"header_name","","",36,[[],["str"]]],[11,"parse_header","","",36,N],[11,"header_name","","",54,[[],["str"]]],[11,"parse_header","","",54,N],[11,"header_name","","",25,[[],["str"]]],[11,"parse_header","","",25,N],[11,"header_name","","",22,[[],["str"]]],[11,"parse_header","","",22,N],[11,"header_name","","",41,[[],["str"]]],[11,"parse_header","","",41,N],[11,"header_name","","",74,[[],["str"]]],[11,"parse_header","","",74,N],[11,"header_name","","",73,[[],["str"]]],[11,"parse_header","","",73,N],[11,"header_name","","",34,[[],["str"]]],[11,"parse_header","","",34,N],[11,"header_name","","",77,[[],["str"]]],[11,"parse_header","","",77,N],[11,"header_name","","",50,[[],["str"]]],[11,"parse_header","","",50,N],[11,"header_name","","",83,[[],["str"]]],[11,"parse_header","","",83,N],[11,"header_name","","",39,[[],["str"]]],[11,"parse_header","","",39,N],[11,"header_name","","",38,[[],["str"]]],[11,"parse_header","","",38,N],[11,"header_name","","",24,[[],["str"]]],[11,"parse_header","","",24,N],[11,"header_name","","",148,[[],["str"]]],[11,"parse_header","","",148,N],[11,"header_name","","",20,[[],["str"]]],[11,"parse_header","","",20,N],[11,"header_name","","",51,[[],["str"]]],[11,"parse_header","","",51,N],[11,"header_name","","",82,[[],["str"]]],[11,"parse_header","","",82,N],[11,"header_name","","",27,[[],["str"]]],[11,"parse_header","","",27,N],[11,"header_name","","",52,[[],["str"]]],[11,"parse_header","","",52,N],[11,"header_name","","",19,[[],["str"]]],[11,"parse_header","","",19,N],[11,"header_name","","",80,[[],["str"]]],[11,"parse_header","","",80,N],[11,"header_name","","",59,[[],["str"]]],[11,"parse_header","","",59,N],[11,"header_name","","",55,[[],["str"]]],[11,"parse_header","","",55,N],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",29,[[["self"]],["accesscontrolrequestmethod"]]],[11,"clone","","",149,[[["self"]],["headers"]]],[11,"clone","","",41,[[["self"]],["contenttype"]]],[11,"clone","","",50,[[["self"]],["ifunmodifiedsince"]]],[11,"clone","","",57,[[["self"]],["quality"]]],[11,"clone","","",68,[[["self"]],["connectionoption"]]],[11,"clone","","",27,[[["self"]],["accesscontrolmaxage"]]],[11,"clone","","",39,[[["self"]],["contentlength"]]],[11,"clone","","",40,[[["self"]],["contentrange"]]],[11,"clone","","",60,[[["self"]],["stricttransportsecurity"]]],[11,"clone","","",30,[[["self"]],["allow"]]],[11,"clone","","",45,[[["self"]],["expires"]]],[11,"clone","","",42,[[["self"]],["date"]]],[11,"clone","","",62,[[["self"]],["upgrade"]]],[11,"clone","","",51,[[["self"]],["lastmodified"]]],[11,"clone","","",53,[[["self"]],["origin"]]],[11,"clone","","",26,[[["self"]],["accesscontrolexposeheaders"]]],[11,"clone","","",78,[[["self"]],["preference"]]],[11,"clone","","",79,[[["self"]],["protocolname"]]],[11,"clone","","",38,[[["self"]],["contentlanguage"]]],[11,"clone","","",35,[[["self"]],["connection"]]],[11,"clone","","",54,[[["self"]],["prefer"]]],[11,"clone","","",83,[[["self"]],["vary"]]],[11,"clone","","",73,[[["self"]],["expect"]]],[11,"clone","","",36,[[["self"]],["contentdisposition"]]],[11,"clone","","",69,[[["self"]],["contentrangespec"]]],[11,"clone","","",75,[[["self"]],["ifnonematch"]]],[11,"clone","","",20,[[["self"]],["acceptcharset"]]],[11,"clone","","",82,[[["self"]],["referrerpolicy"]]],[11,"clone","","",148,[[["self"]],["accesscontrolallowcredentials"]]],[11,"clone","","",48,[[["self"]],["httpdate"]]],[11,"clone","","",81,[[["self"]],["rangeunit"]]],[11,"clone","","",25,[[["self"]],["accesscontrolallowmethods"]]],[11,"clone","","",31,[[["self"]],["authorization"]]],[11,"clone","","",37,[[["self"]],["contentencoding"]]],[11,"clone","","",59,[[["self"]],["referer"]]],[11,"clone","","",33,[[["self"]],["bearer"]]],[11,"clone","","",44,[[["self"]],["entitytag"]]],[11,"clone","","",67,[[["self"]],["charset"]]],[11,"clone","","",64,[[["self"]],["accesscontrolalloworigin"]]],[11,"clone","","",22,[[["self"]],["acceptlanguage"]]],[11,"clone","","",63,[[["self"]],["useragent"]]],[11,"clone","","",24,[[["self"]],["accesscontrolallowheaders"]]],[11,"clone","","",80,[[["self"]],["range"]]],[11,"clone","","",77,[[["self"]],["pragma"]]],[11,"clone","","",28,[[["self"]],["accesscontrolrequestheaders"]]],[11,"clone","","",74,[[["self"]],["ifmatch"]]],[11,"clone","","",23,[[["self"]],["acceptranges"]]],[11,"clone","","",61,[[["self"]],["transferencoding"]]],[11,"clone","","",58,[[["self"]],["qualityitem"]]],[11,"clone","","",52,[[["self"]],["location"]]],[11,"clone","","",21,[[["self"]],["acceptencoding"]]],[11,"clone","","",76,[[["self"]],["ifrange"]]],[11,"clone","","",70,[[["self"]],["dispositionparam"]]],[11,"clone","","",72,[[["self"]],["encoding"]]],[11,"clone","","",65,[[["self"]],["byterangespec"]]],[11,"clone","","",34,[[["self"]],["cachecontrol"]]],[11,"clone","","",49,[[["self"]],["ifmodifiedsince"]]],[11,"clone","","",47,[[["self"]],["host"]]],[11,"clone","","",32,[[["self"]],["basic"]]],[11,"clone","","",55,[[["self"]],["preferenceapplied"]]],[11,"clone","","",66,[[["self"]],["cachedirective"]]],[11,"clone","","",56,[[["self"]],["protocol"]]],[11,"clone","","",43,[[["self"]],["etag"]]],[11,"clone","","",71,[[["self"]],["dispositiontype"]]],[11,"clone","","",46,[[["self"]],["from"]]],[11,"clone","","",19,[[["self"]],["accept"]]],[11,"eq","rocket::http::hyper::mime","",18,[[["self"],["string"]],["bool"]]],[11,"eq","","",14,[[["self"],["string"]],["bool"]]],[11,"eq","","",18,[[["self"],["sublevel"]],["bool"]]],[11,"eq","","",15,[[["self"],["value"]],["bool"]]],[11,"eq","","",15,[[["self"],["str"]],["bool"]]],[11,"eq","","",15,[[["self"],["str"]],["bool"]]],[11,"eq","","",14,[[["self"],["str"]],["bool"]]],[11,"eq","","",17,[[["self"],["string"]],["bool"]]],[11,"eq","","",18,[[["self"],["str"]],["bool"]]],[11,"eq","","",18,[[["self"],["str"]],["bool"]]],[11,"eq","","",15,[[["self"],["string"]],["bool"]]],[11,"eq","","",14,[[["self"],["str"]],["bool"]]],[11,"eq","","",14,[[["self"],["toplevel"]],["bool"]]],[11,"eq","","",17,[[["self"],["str"]],["bool"]]],[11,"eq","","",17,[[["self"],["str"]],["bool"]]],[11,"eq","","",16,[[["self"],["mime"]],["bool"]]],[11,"eq","","",17,[[["self"],["attr"]],["bool"]]],[11,"deref","","",14,[[["self"]],["str"]]],[11,"deref","","",18,[[["self"]],["str"]]],[11,"deref","","",15,[[["self"]],["str"]]],[11,"deref","","",17,[[["self"]],["str"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",15,[[["self"],["value"]],["option",["ordering"]]]],[11,"lt","","",15,[[["self"],["value"]],["bool"]]],[11,"le","","",15,[[["self"],["value"]],["bool"]]],[11,"gt","","",15,[[["self"],["value"]],["bool"]]],[11,"ge","","",15,[[["self"],["value"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["mime"]],["option",["ordering"]]]],[11,"lt","","",16,[[["self"],["mime"]],["bool"]]],[11,"le","","",16,[[["self"],["mime"]],["bool"]]],[11,"gt","","",16,[[["self"],["mime"]],["bool"]]],[11,"ge","","",16,[[["self"],["mime"]],["bool"]]],[11,"partial_cmp","","",14,[[["self"],["toplevel"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["toplevel"]],["bool"]]],[11,"le","","",14,[[["self"],["toplevel"]],["bool"]]],[11,"gt","","",14,[[["self"],["toplevel"]],["bool"]]],[11,"ge","","",14,[[["self"],["toplevel"]],["bool"]]],[11,"partial_cmp","","",17,[[["self"],["attr"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["attr"]],["bool"]]],[11,"le","","",17,[[["self"],["attr"]],["bool"]]],[11,"gt","","",17,[[["self"],["attr"]],["bool"]]],[11,"ge","","",17,[[["self"],["attr"]],["bool"]]],[11,"partial_cmp","","",18,[[["self"],["sublevel"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["sublevel"]],["bool"]]],[11,"le","","",18,[[["self"],["sublevel"]],["bool"]]],[11,"gt","","",18,[[["self"],["sublevel"]],["bool"]]],[11,"ge","","",18,[[["self"],["sublevel"]],["bool"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",15,[[["self"]],["value"]]],[11,"clone","","",18,[[["self"]],["sublevel"]]],[11,"clone","","",17,[[["self"]],["attr"]]],[11,"clone","","",14,[[["self"]],["toplevel"]]],[11,"clone","","",16,[[["self"]],["mime"]]],[11,"hash","","",16,N],[11,"hash","","",14,N],[11,"hash","","",17,N],[11,"hash","","",15,N],[11,"hash","","",18,N],[11,"from_str","","",17,[[["str"]],["result",["attr"]]]],[11,"from_str","","",16,[[["str"]],["result",["mime"]]]],[11,"from_str","","",18,[[["str"]],["result",["sublevel"]]]],[11,"from_str","","",14,[[["str"]],["result",["toplevel"]]]],[11,"from_str","","",15,[[["str"]],["result",["value"]]]],[11,"cmp","","",17,[[["self"],["attr"]],["ordering"]]],[11,"cmp","","",14,[[["self"],["toplevel"]],["ordering"]]],[11,"cmp","","",18,[[["self"],["sublevel"]],["ordering"]]],[11,"cmp","","",16,[[["self"],["mime"]],["ordering"]]],[11,"cmp","","",15,[[["self"],["value"]],["ordering"]]],[11,"eq","rocket::config","",130,[[["self"],["value"]],["bool"]]],[11,"ne","","",130,[[["self"],["value"]],["bool"]]],[11,"eq","","",150,[[["self"],["datetime"]],["bool"]]],[11,"ne","","",150,[[["self"],["datetime"]],["bool"]]],[11,"deserialize","","",130,[[["d"]],["result",["value"]]]],[11,"deserialize","","",150,[[["d"]],["result",["datetime"]]]],[11,"into_deserializer","","",130,[[["self"]],["value"]]],[11,"serialize","","",130,[[["self"],["s"]],["result"]]],[11,"serialize","","",150,[[["self"],["s"]],["result"]]],[11,"from","","",130,[[["i32"]],["value"]]],[11,"from","","",130,[[["u32"]],["value"]]],[11,"from","","",130,[[["i64"]],["value"]]],[11,"from","","",130,[[["vec"]],["value"]]],[11,"from","","",130,[[["bool"]],["value"]]],[11,"from","","",130,[[["f64"]],["value"]]],[11,"from","","",130,[[["datetime"]],["value"]]],[11,"from","","",130,[[["str"]],["value"]]],[11,"from","","",130,[[["string"]],["value"]]],[11,"from","","",130,[[["f32"]],["value"]]],[11,"from","","",130,[[["u8"]],["value"]]],[11,"from","","",130,[[["hashmap",["randomstate"]]],["value"]]],[11,"from","","",130,[[["i8"]],["value"]]],[11,"from","","",130,[[["btreemap"]],["value"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"index_mut","","",130,[[["self"],["i"]],["value"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",150,[[["self"]],["datetime"]]],[11,"clone","","",130,[[["self"]],["value"]]],[11,"from_str","","",130,[[["str"]],["result",["value"]]]],[11,"from_str","","",150,[[["str"]],["result",["datetime","datetimeparseerror"]]]],[11,"deserialize_any","","",130,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",130,N],[11,"deserialize_option","","",130,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_newtype_struct","","",130,[[["self"],["str"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",130,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",130,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_struct","","",130,N],[11,"deserialize_tuple","","",130,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",130,[[["self"],["v"]],["result"]]],[11,"deserialize_identifier","","",130,[[["self"],["v"]],["result"]]],[11,"index","","",130,[[["self"],["i"]],["value"]]],[11,"eq","rocket::http","",147,[[["self"],["cookie"]],["bool"]]],[11,"fmt","","Formats the cookie `self` as a `Set-Cookie` header value.",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",147,[[["self"]],["cookie"]]],[11,"from_str","","",147,[[["str"]],["result",["cookie","parseerror"]]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_string","","",91,[[["self"]],["string"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"to_string","","",92,[[["self"]],["string"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"to_string","","",89,[[["self"]],["string"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"as_str","rocket::http::hyper::mime","",14,[[["self"]],["str"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"as_str","","",15,[[["self"]],["str"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"as_str","","",17,[[["self"]],["str"]]],[11,"to_string","","",17,[[["self"]],["string"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"as_str","","",18,[[["self"]],["str"]]],[11,"to_string","","",18,[[["self"]],["string"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"star","rocket::http::hyper::header","A constructor to easily create `Accept: */*`.",19,[[],["accept"]]],[11,"json","","A constructor to easily create `Accept: application/json`.",19,[[],["accept"]]],[11,"text","","A constructor to easily create `Accept: text/*`.",19,[[],["accept"]]],[11,"image","","A constructor to easily create `Accept: image/*`.",19,[[],["accept"]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"to_string","","",20,[[["self"]],["string"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"to_string","","",21,[[["self"]],["string"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"to_string","","",148,[[["self"]],["string"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"to_owned","","",148,[[["self"]],["t"]]],[11,"clone_into","","",148,N],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"to_string","","",24,[[["self"]],["string"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"to_string","","",25,[[["self"]],["string"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"to_string","","",26,[[["self"]],["string"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"to_string","","",27,[[["self"]],["string"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"to_string","","",28,[[["self"]],["string"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"to_string","","",30,[[["self"]],["string"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"to_string","","",34,[[["self"]],["string"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"close","","A constructor to easily create a `Connection: close` header.",35,[[],["connection"]]],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",35,[[],["connection"]]],[11,"to_string","","",35,[[["self"]],["string"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"to_string","","",36,[[["self"]],["string"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"to_string","","",37,[[["self"]],["string"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"to_string","","",38,[[["self"]],["string"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"to_string","","",39,[[["self"]],["string"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",41,[[],["contenttype"]]],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",41,[[],["contenttype"]]],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",41,[[],["contenttype"]]],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",41,[[],["contenttype"]]],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",41,[[],["contenttype"]]],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",41,[[],["contenttype"]]],[11,"to_string","","",41,[[["self"]],["string"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"to_string","","",42,[[["self"]],["string"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"to_string","","",43,[[["self"]],["string"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"to_string","","",44,[[["self"]],["string"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"to_string","","",45,[[["self"]],["string"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"to_string","","",46,[[["self"]],["string"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"new","","Creates a new, empty headers map.",149,[[],["headers"]]],[11,"set","","Set a header field to the corresponding value.",149,N],[11,"get_raw","","Access the raw value of a header.",149,[[["self"],["str"]],["option"]]],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",149,N],[11,"append_raw","","Append a value to raw value of this header.",149,N],[11,"remove_raw","","Remove a header set by set_raw",149,N],[11,"get","","Get a reference to the header field's value, if it exists.",149,[[["self"]],["option"]]],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",149,[[["self"]],["option"]]],[11,"has","","Returns a boolean of whether a certain header is in the map.",149,[[["self"]],["bool"]]],[11,"remove","","Removes a header from the map, if one existed. Returns true if a header has been removed.",149,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the header fields.",149,[[["self"]],["headersitems"]]],[11,"len","","Returns the number of headers in the map.",149,[[["self"]],["usize"]]],[11,"clear","","Remove all headers from the map.",149,N],[11,"to_string","","",149,[[["self"]],["string"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,N],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"to_string","","",47,[[["self"]],["string"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"to_string","","",48,[[["self"]],["string"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"to_string","","",49,[[["self"]],["string"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"to_string","","",50,[[["self"]],["string"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"to_string","","",51,[[["self"]],["string"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"to_string","","",52,[[["self"]],["string"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"new","","Creates a new `Origin` header.",53,[[["s"],["h"],["option",["u16"]]],["origin"]]],[11,"to_string","","",53,[[["self"]],["string"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"to_string","","",54,[[["self"]],["string"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"to_string","","",55,[[["self"]],["string"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"new","","Creates a new Protocol with the given name and version",56,[[["protocolname"],["option",["string"]]],["protocol"]]],[11,"to_string","","",56,[[["self"]],["string"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"to_string","","",57,[[["self"]],["string"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",58,[[["t"],["quality"]],["qualityitem"]]],[11,"to_string","","",58,[[["self"]],["string"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"to_string","","",59,[[["self"]],["string"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"including_subdomains","","Create an STS header that includes subdomains",60,[[["u64"]],["stricttransportsecurity"]]],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",60,[[["u64"]],["stricttransportsecurity"]]],[11,"to_string","","",60,[[["self"]],["string"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"to_string","","",61,[[["self"]],["string"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"to_string","","",62,[[["self"]],["string"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"to_string","","",63,[[["self"]],["string"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"to_string","","",64,[[["self"]],["string"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"to_string","","",65,[[["self"]],["string"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"to_string","","",66,[[["self"]],["string"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"to_string","","",67,[[["self"]],["string"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"to_string","","",68,[[["self"]],["string"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"to_string","","",69,[[["self"]],["string"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"to_string","","",72,[[["self"]],["string"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"to_string","","",73,[[["self"]],["string"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"to_string","","",74,[[["self"]],["string"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"to_string","","",75,[[["self"]],["string"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"to_string","","",76,[[["self"]],["string"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"to_string","","",77,[[["self"]],["string"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"to_string","","",78,[[["self"]],["string"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"to_string","","",79,[[["self"]],["string"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",80,[[["u64"],["u64"]],["range"]]],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",80,[[["vec"]],["range"]]],[11,"to_string","","",80,[[["self"]],["string"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"to_string","","",81,[[["self"]],["string"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"to_string","","",82,[[["self"]],["string"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"to_string","","",83,[[["self"]],["string"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"to_string","rocket::http::uri","",87,[[["self"]],["string"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into_iter","","",85,[[["self"]],["i"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"to_string","rocket::http::uncased","",93,[[["self"]],["string"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"to_string","","",94,[[["self"]],["string"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"from","rocket::request","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into_iter","","",96,[[["self"]],["i"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"default","","Returns a default value to be used when the form field does not exist. If this returns `None`, then the field is required. Otherwise, this should return `Some(default_value)`. The default implementation simply returns `None`.",104,[[],["option"]]],[11,"from","rocket::response","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"from","rocket::response::content","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,N],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"from","rocket::response","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,N],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"from","rocket::response::content","",114,[[["t"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,N],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,N],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"from","rocket::response::status","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,N],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"try_from","rocket::config","Convert a `T` into `toml::Value` which is an enum that can represent any valid TOML data.",130,[[["t"]],["result",["value","error"]]]],[11,"try_into","","Interpret a `toml::Value` as an instance of type `T`.",130,[[["self"]],["result",["error"]]]],[11,"get","","Index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",130,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",130,[[["self"],["i"]],["option",["value"]]]],[11,"as_integer","","Extracts the integer value if it is an integer.",130,[[["self"]],["option",["i64"]]]],[11,"is_integer","","Tests whether this value is an integer.",130,[[["self"]],["bool"]]],[11,"as_float","","Extracts the float value if it is a float.",130,[[["self"]],["option",["f64"]]]],[11,"is_float","","Tests whether this value is a float.",130,[[["self"]],["bool"]]],[11,"as_bool","","Extracts the boolean value if it is a boolean.",130,[[["self"]],["option",["bool"]]]],[11,"is_bool","","Tests whether this value is a boolean.",130,[[["self"]],["bool"]]],[11,"as_str","","Extracts the string of this value if it is a string.",130,[[["self"]],["option",["str"]]]],[11,"is_str","","Tests if this value is a string.",130,[[["self"]],["bool"]]],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",130,[[["self"]],["option",["datetime"]]]],[11,"is_datetime","","Tests whether this value is a datetime.",130,[[["self"]],["bool"]]],[11,"as_array","","Extracts the array value if it is an array.",130,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","Extracts the array value if it is an array.",130,[[["self"]],["option",["vec"]]]],[11,"is_array","","Tests whether this value is an array.",130,[[["self"]],["bool"]]],[11,"as_table","","Extracts the table value if it is a table.",130,[[["self"]],["option",["btreemap"]]]],[11,"as_table_mut","","Extracts the table value if it is a table.",130,[[["self"]],["option",["btreemap"]]]],[11,"is_table","","Tests whether this value is a table.",130,[[["self"]],["bool"]]],[11,"same_type","","Tests whether this and another value have the same type.",130,[[["self"],["value"]],["bool"]]],[11,"type_str","","Returns a human-readable representation of the type of this value.",130,[[["self"]],["str"]]],[11,"to_string","","",130,[[["self"]],["string"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"to_string","","",150,[[["self"]],["string"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,N],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"to_string","","",135,[[["self"]],["string"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,N],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,N],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"to_string","","",132,[[["self"]],["string"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"to_string","","",133,[[["self"]],["string"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,N],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"from","rocket::data","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"from","rocket::fairing","",140,[[["t"]],["t"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,N],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"to_string","rocket::error","",145,[[["self"]],["string"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"to_string","","",144,[[["self"]],["string"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]]],"paths":[[3,"Config"],[3,"Route"],[3,"Catcher"],[4,"Outcome"],[4,"Error"],[3,"LocalRequest"],[3,"LocalResponse"],[3,"Client"],[3,"ContentType"],[3,"QMediaType"],[3,"Status"],[3,"Header"],[4,"Method"],[4,"StatusClass"],[4,"TopLevel"],[4,"Value"],[3,"Mime"],[4,"Attr"],[4,"SubLevel"],[3,"Accept"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[3,"AccessControlExposeHeaders"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"Allow"],[3,"Authorization"],[3,"Basic"],[3,"Bearer"],[3,"CacheControl"],[3,"Connection"],[3,"ContentDisposition"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentLength"],[3,"ContentRange"],[3,"ContentType"],[3,"Date"],[3,"ETag"],[3,"EntityTag"],[3,"Expires"],[3,"From"],[3,"Host"],[3,"HttpDate"],[3,"IfModifiedSince"],[3,"IfUnmodifiedSince"],[3,"LastModified"],[3,"Location"],[3,"Origin"],[3,"Prefer"],[3,"PreferenceApplied"],[3,"Protocol"],[3,"Quality"],[3,"QualityItem"],[3,"Referer"],[3,"StrictTransportSecurity"],[3,"TransferEncoding"],[3,"Upgrade"],[3,"UserAgent"],[4,"AccessControlAllowOrigin"],[4,"ByteRangeSpec"],[4,"CacheDirective"],[4,"Charset"],[4,"ConnectionOption"],[4,"ContentRangeSpec"],[4,"DispositionParam"],[4,"DispositionType"],[4,"Encoding"],[4,"Expect"],[4,"IfMatch"],[4,"IfNoneMatch"],[4,"IfRange"],[4,"Pragma"],[4,"Preference"],[4,"ProtocolName"],[4,"Range"],[4,"RangeUnit"],[4,"ReferrerPolicy"],[4,"Vary"],[8,"Scheme"],[3,"Segments"],[4,"SegmentError"],[3,"URI"],[4,"Cookies"],[3,"MediaType"],[3,"HeaderMap"],[3,"Accept"],[3,"RawStr"],[3,"UncasedStr"],[3,"Uncased"],[3,"Request"],[3,"FormItems"],[3,"Form"],[3,"LenientForm"],[3,"State"],[8,"FromRequest"],[8,"FromParam"],[8,"FromSegments"],[8,"FromForm"],[8,"FromFormValue"],[3,"Failure"],[3,"Content"],[4,"Body"],[3,"Redirect"],[3,"Flash"],[3,"NamedFile"],[3,"Stream"],[3,"ResponseBuilder"],[3,"Response"],[3,"Json"],[3,"Xml"],[3,"MsgPack"],[3,"Html"],[3,"Plain"],[3,"Css"],[3,"JavaScript"],[3,"Created"],[3,"Accepted"],[3,"BadRequest"],[3,"NotFound"],[3,"Custom"],[3,"NoContent"],[3,"Reset"],[8,"Responder"],[8,"IntoOutcome"],[4,"Value"],[3,"ConfigBuilder"],[4,"ConfigError"],[4,"Environment"],[4,"LoggingLevel"],[3,"Limits"],[3,"Data"],[3,"DataStream"],[8,"FromData"],[6,"Outcome"],[3,"Info"],[4,"AdHoc"],[3,"Kind"],[8,"Fairing"],[4,"LaunchErrorKind"],[3,"LaunchError"],[3,"Rocket"],[3,"Cookie"],[3,"AccessControlAllowCredentials"],[3,"Headers"],[3,"Datetime"]]};
searchIndex["rocket_codegen"]={"doc":"Rocket - Code Generation","items":[[5,"plugin_registrar","rocket_codegen","Compiler hook for Rust to register plugins.",N,[[["registry"]]]]],"paths":[]};
searchIndex["rocket_contrib"]={"doc":"This crate contains officially sanctioned contributor libraries that provide functionality commonly used by Rocket applications.","items":[[3,"SerdeError","rocket_contrib","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[3,"Json","","The JSON type: implements `FromData` and `Responder`, allowing you to easily consume and respond with JSON.",N,N],[12,"0","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Consumes the JSON wrapper and returns the wrapped item.",1,[[["self"]],["t"]]],[11,"from_data","","",1,[[["request"],["data"]],["outcome",["serdeerror"]]]],[11,"respond_to","","",1,[[["self"],["request"]],["result"]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"deref_mut","","",1,[[["self"]],["t"]]],[14,"json","","A macro to create ad-hoc JSON serializable values using JSON syntax.",N,N],[11,"line","","One-based line number at which the error was detected.",2,[[["self"]],["usize"]]],[11,"column","","One-based column number at which the error was detected.",2,[[["self"]],["usize"]]],[11,"classify","","Categorizes the cause of this error.",2,[[["self"]],["category"]]],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",2,[[["self"]],["bool"]]],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",2,[[["self"]],["bool"]]],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",2,[[["self"]],["bool"]]],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",2,[[["self"]],["bool"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"custom","","",2,[[["t"]],["error"]]],[11,"invalid_type","","",2,[[["unexpected"],["expected"]],["error"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["cow",["str"]]],["value"]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["value"]]],[11,"from","","",0,[[["u64"]],["value"]]],[11,"from","","Convert 32-bit floating point number to `Value`",0,[[["f32"]],["value"]]],[11,"from","","",0,[[["i64"]],["value"]]],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["value"]]],[11,"from","","Convert a slice to `Value`",0,N],[11,"from","","",0,[[["isize"]],["value"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["value"]]],[11,"from","","",0,[[["u16"]],["value"]]],[11,"from","","",0,[[["usize"]],["value"]]],[11,"from","","",0,[[["u8"]],["value"]]],[11,"from","","",0,[[["u32"]],["value"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["value"]]],[11,"from","","",0,[[["i16"]],["value"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["map",["string","value"]]],["value"]]],[11,"from","","",0,[[["i32"]],["value"]]],[11,"from","","Convert 64-bit floating point number to `Value`",0,[[["f64"]],["value"]]],[11,"from","","",0,[[["i8"]],["value"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","Display a JSON value as a string.",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_iter","","Convert an iteratable type to a `Value`",0,[[["i"]],["value"]]],[11,"default","","",0,[[],["value"]]],[11,"from_str","","",0,[[["str"]],["result",["value","error"]]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,[[["self"],["i"]],["value"]]],[11,"eq","","",0,[[["self"],["f64"]],["bool"]]],[11,"eq","","",0,[[["self"],["string"]],["bool"]]],[11,"eq","","",0,[[["self"],["u16"]],["bool"]]],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["self"],["f32"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["i64"]],["bool"]]],[11,"eq","","",0,[[["self"],["u32"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["bool"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["isize"]],["bool"]]],[11,"eq","","",0,[[["self"],["u64"]],["bool"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["self"],["i8"]],["bool"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,[[["self"],["i"]],["value"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"custom","","",2,[[["t"]],["error"]]],[11,"clone","","",0,[[["self"]],["value"]]],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",0,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,[[["self"],["str"]],["option",["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,[[["self"]],["value"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[4,"Value"],[3,"Json"],[3,"SerdeError"]]};
searchIndex["rustc_serialize"]={"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",N,N],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",N,N],[12,"char_set","","Character set to use",0,N],[12,"newline","","Newline to use",0,N],[12,"pad","","True to pad output with `=` characters",0,N],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,N],[4,"CharacterSet","","Available encoding character sets",N,N],[13,"Standard","","The standard character set (uses `+` and `/`)",1,N],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,N],[4,"Newline","","Available newline types",N,N],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,N],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,N],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",N,N],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,N],[13,"InvalidBase64Length","","The input had an invalid length",3,N],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",N,N],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",N,N],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",N,N],[8,"ToBase64","","A trait for converting a value to base64 encoding.",N,N],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,[[["self"],["config"]],["string"]]],[8,"FromBase64","","A trait for converting from base64 encoded values.",N,N],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,[[["self"]],["result",["vec","frombase64error"]]]],[11,"clone","","",1,[[["self"]],["characterset"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["newline"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["config"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["frombase64error"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[0,"hex","rustc_serialize","Hex binary-to-text encoding",N,N],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",N,N],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,N],[13,"InvalidHexLength","","The input had an invalid length",6,N],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",N,N],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,[[["self"]],["string"]]],[8,"FromHex","","A trait for converting hexadecimal encoded values",N,N],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,[[["self"]],["result",["vec","fromhexerror"]]]],[11,"clone","","",6,[[["self"]],["fromhexerror"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"description","","",6,[[["self"]],["str"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[0,"json","rustc_serialize","JSON parsing and serialization",N,N],[3,"PrettyJson","rustc_serialize::json","",N,N],[3,"AsJson","","",N,N],[3,"AsPrettyJson","","",N,N],[3,"Encoder","","A structure for implementing serialization to JSON.",N,N],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",N,N],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",N,N],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",N,N],[3,"Decoder","","A structure to decode JSON to values in rust.",N,N],[4,"Json","","Represents a json value",N,N],[13,"I64","","",9,N],[13,"U64","","",9,N],[13,"F64","","",9,N],[13,"String","","",9,N],[13,"Boolean","","",9,N],[13,"Array","","",9,N],[13,"Object","","",9,N],[13,"Null","","",9,N],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",N,N],[13,"InvalidSyntax","","",10,N],[13,"InvalidNumber","","",10,N],[13,"EOFWhileParsingObject","","",10,N],[13,"EOFWhileParsingArray","","",10,N],[13,"EOFWhileParsingValue","","",10,N],[13,"EOFWhileParsingString","","",10,N],[13,"KeyMustBeAString","","",10,N],[13,"ExpectedColon","","",10,N],[13,"TrailingCharacters","","",10,N],[13,"TrailingComma","","",10,N],[13,"InvalidEscape","","",10,N],[13,"InvalidUnicodeCodePoint","","",10,N],[13,"LoneLeadingSurrogateInHexEscape","","",10,N],[13,"UnexpectedEndOfHexEscape","","",10,N],[13,"UnrecognizedHex","","",10,N],[13,"NotFourDigit","","",10,N],[13,"ControlCharacterInString","","",10,N],[13,"NotUtf8","","",10,N],[4,"ParserError","","",N,N],[13,"SyntaxError","","msg, line, col",11,N],[13,"IoError","","",11,N],[4,"DecoderError","","",N,N],[13,"ParseError","","",12,N],[13,"ExpectedError","","",12,N],[13,"MissingFieldError","","",12,N],[13,"UnknownVariantError","","",12,N],[13,"ApplicationError","","",12,N],[13,"EOF","","",12,N],[4,"EncoderError","","",N,N],[13,"FmtError","","",13,N],[13,"BadHashmapKey","","",13,N],[4,"JsonEvent","","The output of the streaming parser.",N,N],[13,"ObjectStart","","",14,N],[13,"ObjectEnd","","",14,N],[13,"ArrayStart","","",14,N],[13,"ArrayEnd","","",14,N],[13,"BooleanValue","","",14,N],[13,"I64Value","","",14,N],[13,"U64Value","","",14,N],[13,"F64Value","","",14,N],[13,"StringValue","","",14,N],[13,"NullValue","","",14,N],[13,"Error","","",14,N],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",N,N],[13,"Index","","",15,N],[13,"Key","","",15,N],[5,"error_str","","Returns a readable error string for a given error code.",N,[[["errorcode"]],["str"]]],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",N,[[["str"]],["decoderesult"]]],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",N,[[["t"]],["encoderesult",["string"]]]],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",N,[[["t"]],["asjson"]]],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",N,[[["t"]],["asprettyjson"]]],[6,"Array","","",N,N],[6,"Object","","",N,N],[6,"BuilderError","","",N,N],[6,"EncodeResult","","",N,N],[6,"DecodeResult","","",N,N],[8,"ToJson","","A trait for converting values to JSON",N,N],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,[[["self"]],["json"]]],[11,"clone","","",9,[[["self"]],["json"]]],[11,"eq","","",9,[[["self"],["json"]],["bool"]]],[11,"ne","","",9,[[["self"],["json"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["json"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["json"]],["bool"]]],[11,"le","","",9,[[["self"],["json"]],["bool"]]],[11,"gt","","",9,[[["self"],["json"]],["bool"]]],[11,"ge","","",9,[[["self"],["json"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["errorcode"]]],[11,"eq","","",10,[[["self"],["errorcode"]],["bool"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["parsererror"]],["bool"]]],[11,"eq","","",12,[[["self"],["decodererror"]],["bool"]]],[11,"ne","","",12,[[["self"],["decodererror"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["encodererror"]],["bool"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"description","","",12,[[["self"]],["str"]]],[11,"cause","","",12,[[["self"]],["option",["stderror"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"from","","",12,[[["parsererror"]],["decodererror"]]],[11,"description","","",11,[[["self"]],["str"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"from","","",11,[[["error"]],["parsererror"]]],[11,"description","","",13,[[["self"]],["str"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"from","","",13,[[["error"]],["encodererror"]]],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,[[["write"]],["encoder"]]],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,[[["write"]],["encoder"]]],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,[[["self"],["u32"]],["result"]]],[11,"emit_nil","","",17,[[["self"]],["encoderesult"]]],[11,"emit_usize","","",17,[[["self"],["usize"]],["encoderesult"]]],[11,"emit_u64","","",17,[[["self"],["u64"]],["encoderesult"]]],[11,"emit_u32","","",17,[[["self"],["u32"]],["encoderesult"]]],[11,"emit_u16","","",17,[[["self"],["u16"]],["encoderesult"]]],[11,"emit_u8","","",17,[[["self"],["u8"]],["encoderesult"]]],[11,"emit_isize","","",17,[[["self"],["isize"]],["encoderesult"]]],[11,"emit_i64","","",17,[[["self"],["i64"]],["encoderesult"]]],[11,"emit_i32","","",17,[[["self"],["i32"]],["encoderesult"]]],[11,"emit_i16","","",17,[[["self"],["i16"]],["encoderesult"]]],[11,"emit_i8","","",17,[[["self"],["i8"]],["encoderesult"]]],[11,"emit_bool","","",17,[[["self"],["bool"]],["encoderesult"]]],[11,"emit_f64","","",17,[[["self"],["f64"]],["encoderesult"]]],[11,"emit_f32","","",17,[[["self"],["f32"]],["encoderesult"]]],[11,"emit_char","","",17,[[["self"],["char"]],["encoderesult"]]],[11,"emit_str","","",17,[[["self"],["str"]],["encoderesult"]]],[11,"emit_enum","","",17,[[["self"],["str"],["f"]],["encoderesult"]]],[11,"emit_enum_variant","","",17,[[["self"],["str"],["usize"],["usize"],["f"]],["encoderesult"]]],[11,"emit_enum_variant_arg","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_enum_struct_variant","","",17,[[["self"],["str"],["usize"],["usize"],["f"]],["encoderesult"]]],[11,"emit_enum_struct_variant_field","","",17,[[["self"],["str"],["usize"],["f"]],["encoderesult"]]],[11,"emit_struct","","",17,[[["self"],["str"],["usize"],["f"]],["encoderesult"]]],[11,"emit_struct_field","","",17,[[["self"],["str"],["usize"],["f"]],["encoderesult"]]],[11,"emit_tuple","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_tuple_arg","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_tuple_struct","","",17,[[["self"],["str"],["usize"],["f"]],["encoderesult"]]],[11,"emit_tuple_struct_arg","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_option","","",17,[[["self"],["f"]],["encoderesult"]]],[11,"emit_option_none","","",17,[[["self"]],["encoderesult"]]],[11,"emit_option_some","","",17,[[["self"],["f"]],["encoderesult"]]],[11,"emit_seq","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_seq_elt","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_map","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_map_elt_key","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_map_elt_val","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"encode","","",9,[[["self"],["s"]],["result"]]],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,[[["read"]],["result",["buildererror"]]]],[11,"from_str","","Decodes a json value from a string",9,[[["str"]],["result",["buildererror"]]]],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,[[["self"]],["prettyjson"]]],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,[[["self"],["str"]],["option",["json"]]]],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,N],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,[[["self"],["str"]],["option",["json"]]]],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,[[["self"]],["option",["object"]]]],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,[[["self"]],["option",["object"]]]],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,[[["self"]],["option",["object"]]]],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,[[["self"]],["option",["array"]]]],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,[[["self"]],["option",["array"]]]],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,[[["self"]],["option",["array"]]]],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,[[["self"]],["option"]]],[11,"index","","",9,[[["self"],["str"]],["json"]]],[11,"index","","",9,[[["self"],["usize"]],["json"]]],[11,"eq","","",14,[[["self"],["jsonevent"]],["bool"]]],[11,"ne","","",14,[[["self"],["jsonevent"]],["bool"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["stackelement"]],["bool"]]],[11,"ne","","",15,[[["self"],["stackelement"]],["bool"]]],[11,"clone","","",15,[[["self"]],["stackelement"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"new","","",18,[[],["stack"]]],[11,"len","","Returns The number of elements in the Stack.",18,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the stack is empty.",18,[[["self"]],["bool"]]],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,[[["self"],["usize"]],["stackelement"]]],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,N],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,N],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,N],[11,"top","","Returns the top-most element (if any).",18,[[["self"]],["option",["stackelement"]]]],[11,"next","","",19,[[["self"]],["option",["jsonevent"]]]],[11,"new","","Creates the JSON parser.",19,[[["t"]],["parser"]]],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,[[["self"]],["stack"]]],[11,"new","","Create a JSON Builder.",20,[[["t"]],["builder"]]],[11,"build","","",20,[[["self"]],["result",["json","buildererror"]]]],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,[[["json"]],["decoder"]]],[11,"read_nil","","",21,[[["self"]],["decoderesult"]]],[11,"read_usize","","",21,[[["self"]],["decoderesult",["usize"]]]],[11,"read_u8","","",21,[[["self"]],["decoderesult",["u8"]]]],[11,"read_u16","","",21,[[["self"]],["decoderesult",["u16"]]]],[11,"read_u32","","",21,[[["self"]],["decoderesult",["u32"]]]],[11,"read_u64","","",21,[[["self"]],["decoderesult",["u64"]]]],[11,"read_isize","","",21,[[["self"]],["decoderesult",["isize"]]]],[11,"read_i8","","",21,[[["self"]],["decoderesult",["i8"]]]],[11,"read_i16","","",21,[[["self"]],["decoderesult",["i16"]]]],[11,"read_i32","","",21,[[["self"]],["decoderesult",["i32"]]]],[11,"read_i64","","",21,[[["self"]],["decoderesult",["i64"]]]],[11,"read_f32","","",21,[[["self"]],["decoderesult",["f32"]]]],[11,"read_f64","","",21,[[["self"]],["decoderesult",["f64"]]]],[11,"read_bool","","",21,[[["self"]],["decoderesult",["bool"]]]],[11,"read_char","","",21,[[["self"]],["decoderesult",["char"]]]],[11,"read_str","","",21,[[["self"]],["decoderesult",["string"]]]],[11,"read_enum","","",21,[[["self"],["str"],["f"]],["decoderesult"]]],[11,"read_enum_variant","","",21,N],[11,"read_enum_variant_arg","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_enum_struct_variant","","",21,N],[11,"read_enum_struct_variant_field","","",21,[[["self"],["str"],["usize"],["f"]],["decoderesult"]]],[11,"read_struct","","",21,[[["self"],["str"],["usize"],["f"]],["decoderesult"]]],[11,"read_struct_field","","",21,[[["self"],["str"],["usize"],["f"]],["decoderesult"]]],[11,"read_tuple","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_tuple_arg","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_tuple_struct","","",21,[[["self"],["str"],["usize"],["f"]],["decoderesult"]]],[11,"read_tuple_struct_arg","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_option","","",21,[[["self"],["f"]],["decoderesult"]]],[11,"read_seq","","",21,[[["self"],["f"]],["decoderesult"]]],[11,"read_seq_elt","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_map","","",21,[[["self"],["f"]],["decoderesult"]]],[11,"read_map_elt_key","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_map_elt_val","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"error","","",21,[[["self"],["str"]],["decodererror"]]],[11,"to_json","","",9,[[["self"]],["json"]]],[11,"fmt","","Encodes a json value into a string",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Encodes a json value into a string",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Encodes a json value into a string",23,[[["self"],["formatter"]],["result"]]],[11,"indent","","Set the indentation level for the emitted JSON",24,[[["self"],["u32"]],["asprettyjson"]]],[11,"fmt","","Encodes a json value into a string",24,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",9,[[["str"]],["result",["json","parsererror"]]]],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",N,N],[16,"Error","","The error type for method results.",25,N],[10,"read_nil","","Read a nil value.",25,[[["self"]],["result"]]],[10,"read_usize","","Read a usize value.",25,[[["self"]],["result",["usize"]]]],[10,"read_u64","","Read a u64 value.",25,[[["self"]],["result",["u64"]]]],[10,"read_u32","","Read a u32 value.",25,[[["self"]],["result",["u32"]]]],[10,"read_u16","","Read a u16 value.",25,[[["self"]],["result",["u16"]]]],[10,"read_u8","","Read a u8 value.",25,[[["self"]],["result",["u8"]]]],[10,"read_isize","","Read a isize value.",25,[[["self"]],["result",["isize"]]]],[10,"read_i64","","Read a i64 value.",25,[[["self"]],["result",["i64"]]]],[10,"read_i32","","Read a i32 value.",25,[[["self"]],["result",["i32"]]]],[10,"read_i16","","Read a i16 value.",25,[[["self"]],["result",["i16"]]]],[10,"read_i8","","Read a i8 value.",25,[[["self"]],["result",["i8"]]]],[10,"read_bool","","Read a bool value.",25,[[["self"]],["result",["bool"]]]],[10,"read_f64","","Read a f64 value.",25,[[["self"]],["result",["f64"]]]],[10,"read_f32","","Read a f32 value.",25,[[["self"]],["result",["f32"]]]],[10,"read_char","","Read a char value.",25,[[["self"]],["result",["char"]]]],[10,"read_str","","Read a string value.",25,[[["self"]],["result",["string"]]]],[10,"read_enum","","Read an enumeration value.",25,[[["self"],["str"],["f"]],["result"]]],[10,"read_enum_variant","","Read an enumeration value.",25,N],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_enum_struct_variant","","Read an enumeration value.",25,N],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"read_struct","","Read an struct value.",25,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"read_struct_field","","Read a field for a struct value.",25,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"read_tuple","","Read a tuple value.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_tuple_arg","","Read a data item for a tuple.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_tuple_struct","","Read a tuple struct value.",25,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_option","","Read an optional value.",25,[[["self"],["f"]],["result"]]],[10,"read_seq","","Read a sequence of values.",25,[[["self"],["f"]],["result"]]],[10,"read_seq_elt","","Read an element in the sequence.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_map","","Read an associative container (map).",25,[[["self"],["f"]],["result"]]],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"error","","Record a decoding error.",25,N],[8,"Encoder","","Trait for writing out an encoding when serializing.",N,N],[16,"Error","","The error type for method results.",26,N],[10,"emit_nil","","Emit a nil value.",26,[[["self"]],["result"]]],[10,"emit_usize","","Emit a usize value.",26,[[["self"],["usize"]],["result"]]],[10,"emit_u64","","Emit a u64 value.",26,[[["self"],["u64"]],["result"]]],[10,"emit_u32","","Emit a u32 value.",26,[[["self"],["u32"]],["result"]]],[10,"emit_u16","","Emit a u16 value.",26,[[["self"],["u16"]],["result"]]],[10,"emit_u8","","Emit a u8 value.",26,[[["self"],["u8"]],["result"]]],[10,"emit_isize","","Emit a isize value.",26,[[["self"],["isize"]],["result"]]],[10,"emit_i64","","Emit a i64 value.",26,[[["self"],["i64"]],["result"]]],[10,"emit_i32","","Emit a i32 value.",26,[[["self"],["i32"]],["result"]]],[10,"emit_i16","","Emit a i16 value.",26,[[["self"],["i16"]],["result"]]],[10,"emit_i8","","Emit a i8 value.",26,[[["self"],["i8"]],["result"]]],[10,"emit_bool","","Emit a bool value.",26,[[["self"],["bool"]],["result"]]],[10,"emit_f64","","Emit a f64 value.",26,[[["self"],["f64"]],["result"]]],[10,"emit_f32","","Emit a f32 value.",26,[[["self"],["f32"]],["result"]]],[10,"emit_char","","Emit a char value.",26,[[["self"],["char"]],["result"]]],[10,"emit_str","","Emit a string value.",26,[[["self"],["str"]],["result"]]],[10,"emit_enum","","Emit an enumeration value.",26,[[["self"],["str"],["f"]],["result"]]],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,[[["self"],["str"],["usize"],["usize"],["f"]],["result"]]],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,[[["self"],["str"],["usize"],["usize"],["f"]],["result"]]],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"emit_struct","","Emit a struct value.",26,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"emit_struct_field","","Emit a field item for a struct.",26,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"emit_tuple","","Emit a tuple value.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_option","","Emit an optional value.",26,[[["self"],["f"]],["result"]]],[10,"emit_option_none","","Emit the `None` optional value.",26,[[["self"]],["result"]]],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,[[["self"],["f"]],["result"]]],[10,"emit_seq","","Emit a sequence of values.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_seq_elt","","Emit an element in a sequence.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_map","","Emit an associative container (map).",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,[[["self"],["usize"],["f"]],["result"]]],[8,"Decodable","","Trait for deserializing a type.",N,N],[10,"decode","","Deserialize a value using a `Decoder`.",27,[[["d"]],["result"]]],[8,"Encodable","","Trait for serializing a type.",N,N],[10,"encode","","Serialize a value using an `Encoder`.",28,[[["self"],["s"]],["result"]]],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",N,N],[10,"read_to_vec","","Read a sequence into a vector.",29,[[["self"],["f"]],["result",["vec"]]]],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",N,N],[10,"emit_from_vec","","Emit a vector as a sequence.",30,N],[11,"from","rustc_serialize::base64","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","rustc_serialize::hex","",6,[[["self"]],["string"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_string","rustc_serialize::json","",22,[[["self"]],["string"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"to_string","","",24,[[["self"]],["string"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into_iter","","",19,[[["self"]],["i"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["ryu"]={"doc":"Pure Rust implementation of Ryū, an algorithm to quickly convert floating point numbers to decimal strings.","items":[[3,"Buffer","ryu","Safe API for formatting floating point numbers to text.",N,N],[11,"clone","","",0,[[["self"]],["buffer"]]],[11,"new","","This is a cheap operation; you don't need to worry about reusing buffers for efficiency.",0,[[],["self"]]],[11,"format","","Print a floating point number into this buffer and return a reference to its string representation within the buffer.",0,[[["self"],["f"]],["str"]]],[11,"default","","",0,[[],["self"]]],[0,"raw","","Unsafe functions that exactly mirror the API of the C implementation of Ryū.",N,N],[5,"d2s_buffered_n","ryu::raw","Print f64 to the given buffer and return number of bytes written.",N,N],[5,"f2s_buffered_n","","Print f32 to the given buffer and return number of bytes written.",N,N],[8,"Float","ryu","A floating point number, f32 or f64, that can be written into a [`ryu::Buffer`][Buffer].",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[3,"Buffer"]]};
searchIndex["safemem"]={"doc":"Safe wrappers for memory-accessing functions like `std::ptr::copy()`.","items":[[5,"copy_over","safemem","Copy `len` elements from `src_idx` to `dest_idx`. Ranges may overlap.",N,N],[5,"write_bytes","","Safe wrapper for `std::ptr::write_bytes()`/`memset()`.",N,N],[5,"prepend","","Prepend `elems` to `vec`, resizing if necessary.",N,N]],"paths":[]};
searchIndex["scheduled_thread_pool"]={"doc":"A thread pool to execute scheduled actions in parallel.","items":[[3,"JobHandle","scheduled_thread_pool","A handle to a scheduled job.",N,N],[3,"ScheduledThreadPool","","A pool of threads which can run tasks at specific time intervals.",N,N],[11,"cancel","","Cancels the job.",0,[[["self"]]]],[11,"drop","","",1,[[["self"]]]],[11,"new","","Creates a new thread pool with the specified number of threads.",1,[[["usize"]],["scheduledthreadpool"]]],[11,"with_name","","Creates a new thread pool with the specified number of threads which will be named.",1,[[["str"],["usize"]],["scheduledthreadpool"]]],[11,"execute","","Executes a closure as soon as possible in the pool.",1,[[["self"],["f"]],["jobhandle"]]],[11,"execute_after","","Executes a closure after a time delay in the pool.",1,[[["self"],["duration"],["f"]],["jobhandle"]]],[11,"execute_at_fixed_rate","","Executes a closure after an initial delay at a fixed rate in the pool.",1,[[["self"],["duration"],["duration"],["f"]],["jobhandle"]]],[11,"execute_with_fixed_delay","","Executes a closure after an initial delay at a fixed rate in the pool.",1,[[["self"],["duration"],["duration"],["f"]],["jobhandle"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[3,"JobHandle"],[3,"ScheduledThreadPool"]]};
searchIndex["serde"]={"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",N,N],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",N,N],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",N,N],[13,"Bool","","The input contained a boolean value that was not expected.",0,N],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,N],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,N],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,N],[13,"Char","","The input contained a `char` that was not expected.",0,N],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,N],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,N],[13,"Unit","","The input contained a unit `()` that was not expected.",0,N],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,N],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,N],[13,"Seq","","The input contained a sequence that was not expected.",0,N],[13,"Map","","The input contained a map that was not expected.",0,N],[13,"Enum","","The input contained an enum that was not expected.",0,N],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,N],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,N],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,N],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,N],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,N],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",N,N],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",N,N],[3,"UnitDeserializer","","A deserializer holding a `()`.",N,N],[3,"BoolDeserializer","","A deserializer holding a `bool`.",N,N],[3,"I8Deserializer","","A deserializer holding an `i8`.",N,N],[3,"I16Deserializer","","A deserializer holding an `i16`.",N,N],[3,"I32Deserializer","","A deserializer holding an `i32`.",N,N],[3,"I64Deserializer","","A deserializer holding an `i64`.",N,N],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",N,N],[3,"U8Deserializer","","A deserializer holding a `u8`.",N,N],[3,"U16Deserializer","","A deserializer holding a `u16`.",N,N],[3,"U64Deserializer","","A deserializer holding a `u64`.",N,N],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",N,N],[3,"F32Deserializer","","A deserializer holding an `f32`.",N,N],[3,"F64Deserializer","","A deserializer holding an `f64`.",N,N],[3,"CharDeserializer","","A deserializer holding a `char`.",N,N],[3,"I128Deserializer","","A deserializer holding an `i128`.",N,N],[3,"U128Deserializer","","A deserializer holding a `u128`.",N,N],[3,"U32Deserializer","","A deserializer holding a `u32`.",N,N],[3,"StrDeserializer","","A deserializer holding a `&str`.",N,N],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",N,N],[3,"StringDeserializer","","A deserializer holding a `String`.",N,N],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",N,N],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",N,N],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",N,N],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",N,N],[3,"MapDeserializer","","A deserializer that iterates over a map.",N,N],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",N,N],[11,"clone","","",1,[[["self"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_enum","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"deserialize_bool","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",3,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",3,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",3,N],[11,"deserialize_enum","","",3,N],[11,"deserialize_identifier","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",3,[[["self"],["v"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"deserialize_bool","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",4,N],[11,"deserialize_enum","","",4,N],[11,"deserialize_identifier","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",4,[[["self"],["v"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"deserialize_bool","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",5,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",5,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",5,N],[11,"deserialize_enum","","",5,N],[11,"deserialize_identifier","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",5,[[["self"],["v"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"deserialize_bool","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",6,N],[11,"deserialize_enum","","",6,N],[11,"deserialize_identifier","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",6,[[["self"],["v"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"deserialize_bool","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",7,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",7,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",7,N],[11,"deserialize_enum","","",7,N],[11,"deserialize_identifier","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",7,[[["self"],["v"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"deserialize_bool","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",8,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",8,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",8,N],[11,"deserialize_enum","","",8,N],[11,"deserialize_identifier","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",8,[[["self"],["v"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"deserialize_bool","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",9,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",9,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",9,N],[11,"deserialize_enum","","",9,N],[11,"deserialize_identifier","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",9,[[["self"],["v"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["self"]]],[11,"deserialize_bool","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",10,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",10,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",10,N],[11,"deserialize_enum","","",10,N],[11,"deserialize_identifier","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",10,[[["self"],["v"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"deserialize_bool","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",11,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",11,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",11,N],[11,"deserialize_enum","","",11,N],[11,"deserialize_identifier","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",11,[[["self"],["v"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["self"]]],[11,"deserialize_bool","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",12,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",12,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",12,N],[11,"deserialize_enum","","",12,N],[11,"deserialize_identifier","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",12,[[["self"],["v"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"deserialize_bool","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",13,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",13,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",13,N],[11,"deserialize_enum","","",13,N],[11,"deserialize_identifier","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",13,[[["self"],["v"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["self"]]],[11,"deserialize_bool","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",14,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",14,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",14,N],[11,"deserialize_enum","","",14,N],[11,"deserialize_identifier","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",14,[[["self"],["v"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["self"]]],[11,"deserialize_bool","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",15,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",15,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",15,N],[11,"deserialize_enum","","",15,N],[11,"deserialize_identifier","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",15,[[["self"],["v"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"deserialize_bool","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",16,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",16,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",16,N],[11,"deserialize_enum","","",16,N],[11,"deserialize_identifier","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",16,[[["self"],["v"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["self"]]],[11,"deserialize_bool","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",17,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",17,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",17,N],[11,"deserialize_enum","","",17,N],[11,"deserialize_identifier","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",17,[[["self"],["v"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["self"]]],[11,"deserialize_bool","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",18,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",18,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",18,N],[11,"deserialize_identifier","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",18,N],[11,"variant_seed","","",18,[[["self"],["t"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["self"]]],[11,"deserialize_any","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",19,N],[11,"deserialize_bool","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",19,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",19,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",19,N],[11,"deserialize_identifier","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",19,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",19,[[["self"],["t"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given string.",20,[[["str"]],["borrowedstrdeserializer"]]],[11,"deserialize_any","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",20,N],[11,"deserialize_bool","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",20,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",20,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",20,N],[11,"deserialize_identifier","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",20,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",20,[[["self"],["t"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["self"]]],[11,"deserialize_any","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",21,N],[11,"deserialize_bool","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",21,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",21,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",21,N],[11,"deserialize_identifier","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",21,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",21,[[["self"],["t"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["self"]]],[11,"deserialize_any","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",22,N],[11,"deserialize_bool","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",22,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",22,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",22,N],[11,"deserialize_identifier","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",22,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",22,[[["self"],["t"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given byte slice.",23,N],[11,"deserialize_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",23,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",23,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",23,N],[11,"deserialize_identifier","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",23,N],[11,"clone","","",24,[[["self"]],["seqdeserializer"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",24,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",24,[[["self"]],["result"]]],[11,"deserialize_any","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",24,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",24,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",24,N],[11,"deserialize_enum","","",24,N],[11,"deserialize_identifier","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",24,[[["self"],["v"]],["result"]]],[11,"next_element_seed","","",24,[[["self"],["v"]],["result",["option"]]]],[11,"size_hint","","",24,[[["self"]],["option",["usize"]]]],[11,"clone","","",25,[[["self"]],["seqaccessdeserializer"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",25,[[["a"]],["self"]]],[11,"deserialize_any","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",25,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",25,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",25,N],[11,"deserialize_enum","","",25,N],[11,"deserialize_identifier","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",25,[[["self"],["v"]],["result"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",26,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",26,[[["self"]],["result"]]],[11,"deserialize_any","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",26,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",26,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",26,N],[11,"deserialize_enum","","",26,N],[11,"deserialize_identifier","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",26,[[["self"],["v"]],["result"]]],[11,"next_key_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"next_value_seed","","",26,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",26,[[["self"],["tk"],["tv"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"next_element_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["mapaccessdeserializer"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",27,[[["a"]],["self"]]],[11,"deserialize_any","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",27,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",27,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",27,N],[11,"deserialize_enum","","",27,N],[11,"deserialize_identifier","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",27,[[["self"],["v"]],["result"]]],[11,"clone","serde::de","",28,[[["self"]],["ignoredany"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"default","","",28,[[],["ignoredany"]]],[11,"expecting","","",28,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","",28,[[["self"],["bool"]],["result"]]],[11,"visit_i64","","",28,[[["self"],["i64"]],["result"]]],[11,"visit_u64","","",28,[[["self"],["u64"]],["result"]]],[11,"visit_f64","","",28,[[["self"],["f64"]],["result"]]],[11,"visit_str","","",28,[[["self"],["str"]],["result"]]],[11,"visit_none","","",28,[[["self"]],["result"]]],[11,"visit_some","","",28,[[["self"],["d"]],["result"]]],[11,"visit_newtype_struct","","",28,[[["self"],["d"]],["result"]]],[11,"visit_unit","","",28,[[["self"]],["result"]]],[11,"visit_seq","","",28,[[["self"],["a"]],["result"]]],[11,"visit_map","","",28,[[["self"],["a"]],["result"]]],[11,"visit_bytes","","",28,N],[11,"deserialize","","",28,[[["d"]],["result",["ignoredany"]]]],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",N,N],[10,"custom","","Raised when there is general error when deserializing a type.",29,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,N],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,N],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,[[["str"]],["self"]]],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",N,N],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,[[["self"],["formatter"]],["result"]]],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",N,N],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",N,N],[16,"Value","","The type produced by using this seed.",32,N],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,[[["self"],["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",N,N],[16,"Value","","The value produced by this visitor.",34,N],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","The input contains a boolean.",34,[[["self"],["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",34,[[["self"],["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",34,[[["self"],["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",34,[[["self"],["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",34,[[["self"],["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",34,[[["self"],["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",34,[[["self"],["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",34,[[["self"],["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",34,[[["self"],["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",34,[[["self"],["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",34,[[["self"],["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",34,[[["self"],["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",34,[[["self"],["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",34,[[["self"],["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",34,[[["self"],["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",34,[[["self"],["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",34,[[["self"],["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",34,N],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",34,N],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",34,[[["self"],["vec",["u8"]]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",34,[[["self"]],["result"]]],[11,"visit_some","","The input contains an optional that is present.",34,[[["self"],["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",34,[[["self"]],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",34,[[["self"],["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",34,[[["self"],["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",34,[[["self"],["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",34,[[["self"],["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,N],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"],["t"]],["result",["option"]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",35,[[["self"]],["option",["usize"]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,N],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"],["k"]],["result",["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"],["k"],["v"]],["result",["option"]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"]],["result",["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",36,[[["self"]],["option",["usize"]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,N],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,N],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",37,[[["self"],["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to deserialize.",37,[[["self"]],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",38,N],[10,"unit_variant","","Called when deserializing a variant with no values.",38,[[["self"]],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",38,[[["self"],["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",38,[[["self"]],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",38,[[["self"],["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",38,N],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",N,N],[16,"Deserializer","","The type of the deserializer being converted into.",39,N],[10,"into_deserializer","","Convert this value into a deserializer.",39,N],[11,"clone","","",0,[[["self"]],["unexpected"]]],[11,"eq","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"ne","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[0,"ser","serde","Generic data structure serialization framework.",N,N],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",N,N],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_key","","",40,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",N,N],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",41,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,N],[10,"serialize_element","","Serialize a sequence element.",44,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",44,[[["self"]],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,N],[10,"serialize_element","","Serialize a tuple element.",45,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",45,[[["self"]],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,N],[10,"serialize_field","","Serialize a tuple struct field.",46,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",46,[[["self"]],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,N],[10,"serialize_field","","Serialize a tuple variant field.",47,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",47,[[["self"]],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,N],[10,"serialize_key","","Serialize a map key.",48,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",48,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",48,[[["self"],["k"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",48,[[["self"]],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,N],[10,"serialize_field","","Serialize a struct field.",49,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",49,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",49,[[["self"]],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",50,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",50,N],[10,"serialize_field","","Serialize a struct variant field.",50,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",50,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",50,[[["self"]],["result"]]],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",N,N],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",N,N],[11,"fmt","serde::de","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","serde::de::value","",1,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","serde::ser","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_derive"]={"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_deserialize","","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["serde_json"]={"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[3,"Serializer","","A structure for serializing Rust values into JSON.",N,N],[3,"Map","","Represents a JSON key/value type.",N,N],[3,"Number","","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[0,"de","","Deserialize JSON data to a Rust data structure.",N,N],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",N,N],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",N,N],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",N,N],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",N,N],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,[[["r"]],["self"]]],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,[[["r"]],["self"]]],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,N],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,[[["str"]],["self"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,[[["self"]],["result"]]],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,[[["self"]],["streamdeserializer"]]],[11,"from_str","serde_json","",2,[[["str"]],["result"]]],[11,"new","serde_json::de","Create a JSON stream deserializer from one of the possible serde_json input sources.",3,[[["r"]],["self"]]],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",3,[[["self"]],["usize"]]],[11,"next","","",3,[[["self"]],["option",["result"]]]],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",N,N],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",N,N],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",4,N],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",4,N],[13,"Data","","The error was caused by input data that was semantically incorrect.",4,N],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",4,N],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[11,"line","","One-based line number at which the error was detected.",5,[[["self"]],["usize"]]],[11,"column","","One-based column number at which the error was detected.",5,[[["self"]],["usize"]]],[11,"classify","","Categorizes the cause of this error.",5,[[["self"]],["category"]]],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",5,[[["self"]],["bool"]]],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",5,[[["self"]],["bool"]]],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",5,[[["self"]],["bool"]]],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",5,[[["self"]],["bool"]]],[11,"clone","","",4,[[["self"]],["category"]]],[11,"eq","","",4,[[["self"],["category"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"custom","","",5,[[["t"]],["error"]]],[11,"invalid_type","","",5,[[["unexpected"],["expected"]],["self"]]],[11,"custom","","",5,[[["t"]],["error"]]],[0,"map","serde_json","A map of String to serde_json::Value.",N,N],[3,"Map","serde_json::map","Represents a JSON key/value type.",N,N],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",N,N],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",N,N],[3,"Iter","","An iterator over a serde_json::Map's entries.",N,N],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",N,N],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",N,N],[3,"Keys","","An iterator over a serde_json::Map's keys.",N,N],[3,"Values","","An iterator over a serde_json::Map's values.",N,N],[3,"ValuesMut","","A mutable iterator over a serde_json::Map's values.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",N,N],[13,"Vacant","","A vacant Entry.",6,N],[13,"Occupied","","An occupied Entry.",6,N],[11,"new","","Makes a new empty Map.",7,[[],["self"]]],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",7,[[["usize"]],["self"]]],[11,"clear","","Clears the map, removing all values.",7,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",7,[[["self"],["q"]],["option",["value"]]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",7,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",7,[[["self"],["q"]],["option",["value"]]]],[11,"insert","","Inserts a key-value pair into the map.",7,[[["self"],["string"],["value"]],["option",["value"]]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",7,[[["self"],["q"]],["option",["value"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",7,[[["self"],["s"]],["entry"]]],[11,"len","","Returns the number of elements in the map.",7,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",7,[[["self"]],["bool"]]],[11,"iter","","Gets an iterator over the entries of the map.",7,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",7,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map.",7,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map.",7,[[["self"]],["values"]]],[11,"values_mut","","Gets an iterator over mutable values of the map.",7,[[["self"]],["valuesmut"]]],[11,"default","","",7,[[],["self"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"eq","","",7,[[["self"],["self"]],["bool"]]],[11,"index","","",7,[[["self"],["q"]],["value"]]],[11,"index_mut","","",7,[[["self"],["q"]],["value"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"serialize","","",7,[[["self"],["s"]],["result"]]],[11,"deserialize","","",7,[[["d"]],["result"]]],[11,"from_iter","","",7,[[["t"]],["self"]]],[11,"extend","","",7,[[["self"],["t"]]]],[11,"key","","Returns a reference to this entry's key.",6,[[["self"]],["string"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",6,[[["self"],["value"]],["value"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",6,[[["self"],["f"]],["value"]]],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",8,[[["self"]],["string"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",8,[[["self"],["value"]],["value"]]],[11,"key","","Gets a reference to the key in the entry.",9,[[["self"]],["string"]]],[11,"get","","Gets a reference to the value in the entry.",9,[[["self"]],["value"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",9,[[["self"]],["value"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",9,[[["self"]],["value"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",9,[[["self"],["value"]],["value"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",9,[[["self"]],["value"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next_back","","",10,[[["self"]],["option"]]],[11,"len","","",10,[[["self"]],["usize"]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"next_back","","",11,[[["self"]],["option"]]],[11,"len","","",11,[[["self"]],["usize"]]],[11,"into_iter","","",7,N],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"next_back","","",12,[[["self"]],["option"]]],[11,"len","","",12,[[["self"]],["usize"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"next_back","","",13,[[["self"]],["option"]]],[11,"len","","",13,[[["self"]],["usize"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"next_back","","",14,[[["self"]],["option"]]],[11,"len","","",14,[[["self"]],["usize"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"next_back","","",15,[[["self"]],["option"]]],[11,"len","","",15,[[["self"]],["usize"]]],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",N,N],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",N,N],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",N,N],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",N,N],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",N,N],[13,"Quote","","An escaped quote `\"`",16,N],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",16,N],[13,"Solidus","","An escaped solidus `/`",16,N],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",16,N],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",16,N],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",16,N],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",16,N],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",16,N],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",16,N],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",N,N],[11,"write_null","","Writes a `null` value to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i8"]],["result"]]],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i16"]],["result"]]],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i32"]],["result"]]],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i64"]],["result"]]],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u8"]],["result"]]],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u16"]],["result"]]],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u32"]],["result"]]],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u64"]],["result"]]],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,[[["self"],["w"],["f32"]],["result"]]],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,[[["self"],["w"],["f64"]],["result"]]],[11,"write_number_str","","Writes a number that has already been rendered to a string.",17,[[["self"],["w"],["str"]],["result"]]],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",17,[[["self"],["w"],["str"]],["result"]]],[11,"write_char_escape","","Writes a character escape code to the specified writer.",17,[[["self"],["w"],["charescape"]],["result"]]],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","Called after every array value.",17,[[["self"],["w"]],["result"]]],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","Called before every object key.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",17,[[["self"],["w"]],["result"]]],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",17,[[["self"],["w"]],["result"]]],[11,"end_object_value","","Called after every object value.",17,[[["self"],["w"]],["result"]]],[11,"new","","Creates a new JSON serializer.",18,[[["w"]],["self"]]],[11,"pretty","","Creates a new JSON pretty print serializer.",18,[[["w"]],["self"]]],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",18,[[["w"],["f"]],["self"]]],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",18,[[["self"]],["w"]]],[11,"clone","","",19,[[["self"]],["compactformatter"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["prettyformatter"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",20,[[],["self"]]],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",20,N],[11,"default","","",20,[[],["self"]]],[11,"begin_array","","",20,[[["self"],["w"]],["result"]]],[11,"end_array","","",20,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","",20,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","",20,[[["self"],["w"]],["result"]]],[11,"begin_object","","",20,[[["self"],["w"]],["result"]]],[11,"end_object","","",20,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","",20,[[["self"],["w"],["bool"]],["result"]]],[11,"begin_object_value","","",20,[[["self"],["w"]],["result"]]],[11,"end_object_value","","",20,[[["self"],["w"]],["result"]]],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",N,N],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"from_str","","",0,[[["str"]],["result",["value","error"]]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"from","","",0,[[["i8"]],["self"]]],[11,"from","","",0,[[["i16"]],["self"]]],[11,"from","","",0,[[["i32"]],["self"]]],[11,"from","","",0,[[["i64"]],["self"]]],[11,"from","","",0,[[["isize"]],["self"]]],[11,"from","","",0,[[["u8"]],["self"]]],[11,"from","","",0,[[["u16"]],["self"]]],[11,"from","","",0,[[["u32"]],["self"]]],[11,"from","","",0,[[["u64"]],["self"]]],[11,"from","","",0,[[["usize"]],["self"]]],[11,"from","","Convert 32-bit floating point number to `Value`",0,[[["f32"]],["self"]]],[11,"from","","Convert 64-bit floating point number to `Value`",0,[[["f64"]],["self"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["self"]]],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["self"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["self"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["cow",["str"]]],["self"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["map",["string","value"]]],["self"]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["self"]]],[11,"from","","Convert a slice to `Value`",0,N],[11,"from_iter","","Convert an iteratable type to a `Value`",0,[[["i"]],["self"]]],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,[[["self"],["i"]],["value"]]],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,[[["self"],["i"]],["value"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["string"]],["bool"]]],[11,"eq","","",0,[[["self"],["i8"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["self"],["i64"]],["bool"]]],[11,"eq","","",0,[[["self"],["isize"]],["bool"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["self"],["u16"]],["bool"]]],[11,"eq","","",0,[[["self"],["u32"]],["bool"]]],[11,"eq","","",0,[[["self"],["u64"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["self"],["f32"]],["bool"]]],[11,"eq","","",0,[[["self"],["f64"]],["bool"]]],[11,"eq","","",0,[[["self"],["bool"]],["bool"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[8,"Index","","A type that can be used to index into a `serde_json::Value`.",N,N],[11,"clone","","",0,[[["self"]],["value"]]],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Display a JSON value as a string.",0,[[["self"],["formatter"]],["result"]]],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",0,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,[[["self"],["str"]],["option",["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,[[["self"]],["value"]]],[11,"default","","",0,[[],["value"]]],[11,"clone","serde_json","",2,[[["self"]],["number"]]],[11,"eq","","",2,[[["self"],["number"]],["bool"]]],[11,"ne","","",2,[[["self"],["number"]],["bool"]]],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",2,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",2,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",2,[[["self"]],["bool"]]],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",2,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",2,[[["self"]],["option",["u64"]]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",2,[[["self"]],["option",["f64"]]]],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",2,[[["f64"]],["option",["number"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",2,[[["self"],["s"]],["result"]]],[11,"deserialize","","",2,[[["d"]],["result",["number"]]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_enum","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"from","","",2,[[["u8"]],["self"]]],[11,"from","","",2,[[["u16"]],["self"]]],[11,"from","","",2,[[["u32"]],["self"]]],[11,"from","","",2,[[["u64"]],["self"]]],[11,"from","","",2,[[["usize"]],["self"]]],[11,"from","","",2,[[["i8"]],["self"]]],[11,"from","","",2,[[["i16"]],["self"]]],[11,"from","","",2,[[["i32"]],["self"]]],[11,"from","","",2,[[["i64"]],["self"]]],[11,"from","","",2,[[["isize"]],["self"]]],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",21,[[["r"]],["self"]]],[11,"next","","",21,[[["self"]],["result",["option"]]]],[11,"peek","","",21,[[["self"]],["result",["option"]]]],[11,"discard","","",21,[[["self"]]]],[11,"position","","",21,[[["self"]],["position"]]],[11,"peek_position","","",21,[[["self"]],["position"]]],[11,"byte_offset","","",21,[[["self"]],["usize"]]],[11,"parse_str","","",21,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",21,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",21,[[["self"]],["result"]]],[11,"new","","Create a JSON input source to read from a slice of bytes.",22,N],[11,"next","","",22,[[["self"]],["result",["option"]]]],[11,"peek","","",22,[[["self"]],["result",["option"]]]],[11,"discard","","",22,[[["self"]]]],[11,"position","","",22,[[["self"]],["position"]]],[11,"peek_position","","",22,[[["self"]],["position"]]],[11,"byte_offset","","",22,[[["self"]],["usize"]]],[11,"parse_str","","",22,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",22,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",22,[[["self"]],["result"]]],[11,"new","","Create a JSON input source to read from a UTF-8 string.",23,[[["str"]],["self"]]],[11,"next","","",23,[[["self"]],["result",["option"]]]],[11,"peek","","",23,[[["self"]],["result",["option"]]]],[11,"discard","","",23,[[["self"]]]],[11,"position","","",23,[[["self"]],["position"]]],[11,"peek_position","","",23,[[["self"]],["position"]]],[11,"byte_offset","","",23,[[["self"]],["usize"]]],[11,"parse_str","","",23,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",23,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",23,[[["self"]],["result"]]],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",N,N],[11,"from","serde_json::de","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","serde_json::error","",5,[[["self"]],["string"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","serde_json::ser","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","serde_json::map","",7,[[["t"]],["t"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"to_string","serde_json","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_string","serde_json::value","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","serde_json::de","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","serde_json::error","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","serde_json::map","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into_iter","","",11,[[["self"]],["i"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into_iter","","",12,[[["self"]],["i"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into_iter","","",13,[[["self"]],["i"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into_iter","","",14,[[["self"]],["i"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into_iter","","",15,[[["self"]],["i"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","serde_json::ser","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"Number"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["smallvec"]={"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and yields them by value.",N,N],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",N,N],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its items by value.",N,N],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",N,N],[10,"push","","Append an element to the vector.",0,[[["self"],["t"]]]],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",N,N],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,N],[8,"Array","","Types that can be used as the backing store for a SmallVec",N,N],[16,"Item","","The type of the array's elements.",2,N],[10,"size","","Returns the number of items the array can hold.",2,[[],["usize"]]],[10,"ptr","","Returns a pointer to the first element of the array.",2,N],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",2,N],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"drop","","",3,[[["self"]]]],[11,"new","","Construct an empty vector",4,[[],["smallvec"]]],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",4,[[["usize"]],["self"]]],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>`.",4,[[["vec"]],["smallvec"]]],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",4,[[["a"]],["smallvec"]]],[11,"from_buf_and_len","","Constructs a new `SmallVec` on the stack from an `A` without copying elements. Also sets the length, which must be less or equal to the size of `buf`.",4,[[["a"],["usize"]],["smallvec"]]],[11,"from_buf_and_len_unchecked","","Constructs a new `SmallVec` on the stack from an `A` without copying elements. Also sets the length. The user is responsible for ensuring that `len <= A::size()`.",4,[[["a"],["usize"]],["smallvec"]]],[11,"set_len","","Sets the length of a vector.",4,[[["self"],["usize"]]]],[11,"inline_size","","The maximum number of elements this vector can hold inline",4,[[["self"]],["usize"]]],[11,"len","","The number of elements stored in the vector",4,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector is empty",4,[[["self"]],["bool"]]],[11,"capacity","","The number of items the vector can hold without reallocating",4,[[["self"]],["usize"]]],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",4,[[["self"]],["bool"]]],[11,"drain","","Empty the vector and return an iterator over its former contents.",4,[[["self"]],["drain"]]],[11,"push","","Append an item to the vector.",4,N],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",4,[[["self"]],["option"]]],[11,"grow","","Re-allocate to set the capacity to `max(new_cap, inline_size())`.",4,[[["self"],["usize"]]]],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",4,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",4,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",4,[[["self"]]]],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",4,[[["self"],["usize"]]]],[11,"as_slice","","Extracts a slice containing the entire vector.",4,N],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",4,N],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",4,N],[11,"clear","","Remove all elements from the vector.",4,[[["self"]]]],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",4,N],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",4,N],[11,"insert_many","","Insert multiple elements at position `index`, shifting all following elements toward the back.",4,[[["self"],["usize"],["i"]]]],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",4,[[["self"]],["vec"]]],[11,"into_inner","","Convert the SmallVec into an `A` if possible. Otherwise return `Err(Self)`.",4,[[["self"]],["result"]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[["self"],["f"]]]],[11,"dedup","","Removes consecutive duplicate elements.",4,[[["self"]]]],[11,"dedup_by","","Removes consecutive duplicate elements using the given equality relation.",4,[[["self"],["f"]]]],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",4,[[["self"],["f"]]]],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",4,N],[11,"insert_from_slice","","Copy elements from a slice into the vector at position `index`, shifting any following elements toward the back.",4,N],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",4,N],[11,"resize","","Resizes the vector so that its length is equal to `len`.",4,N],[11,"from_elem","","Creates a `SmallVec` with `n` copies of `elem`. ``` use smallvec::SmallVec;",4,N],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"as_ref","","",4,N],[11,"as_mut","","",4,N],[11,"borrow","","",4,N],[11,"borrow_mut","","",4,N],[11,"write","","",4,N],[11,"write_all","","",4,N],[11,"flush","","",4,[[["self"]],["result"]]],[11,"from","","",4,N],[11,"from","","",4,[[["vec"]],["smallvec"]]],[11,"from","","",4,[[["a"]],["smallvec"]]],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"extend_from_slice","","",4,N],[11,"push","","",4,N],[11,"from_iter","","",4,[[["i"]],["smallvec"]]],[11,"extend","","",4,[[["self"],["i"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","",4,[[],["smallvec"]]],[11,"drop","","",4,[[["self"]]]],[11,"clone","","",4,[[["self"]],["smallvec"]]],[11,"eq","","",4,[[["self"],["smallvec"]],["bool"]]],[11,"ne","","",4,[[["self"],["smallvec"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["smallvec"]],["option",["ordering"]]]],[11,"cmp","","",4,[[["self"],["smallvec"]],["ordering"]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"drop","","",5,[[["self"]]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"into_iter","","",4,N],[14,"smallvec","","Creates a [`SmallVec`] containing the arguments.",N,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]]],"paths":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["state"]={"doc":"state - safe and effortless state management","items":[[3,"Container","state","A container for global type-based state.",N,N],[3,"Storage","","A single storage location for global access to a value.",N,N],[11,"new","","Creates a new container with no stored values.",0,[[],["container"]]],[11,"freeze","","Freezes the container. A frozen container disallows writes allowing for synchronization-free reads.",0,[[["self"]]]],[11,"is_frozen","","Returns `true` if the container is frozen and `false` otherwise.",0,[[["self"]],["bool"]]],[11,"set","","Sets the global state for type `T` if it has not been set before and `self` is not frozen.",0,[[["self"],["t"]],["bool"]]],[11,"try_get","","Attempts to retrieve the global state for type `T`.",0,[[["self"]],["option"]]],[11,"get","","Retrieves the global state for type `T`.",0,[[["self"]],["t"]]],[11,"drop","","",0,[[["self"]]]],[11,"new","","Create a new, uninitialized storage location.",1,[[],["storage"]]],[11,"set","","Sets the value for this storage unit to `value` if it has not already been set before.",1,[[["self"],["t"]],["bool"]]],[11,"try_get","","Attempts to borrow the value in this storage location.",1,[[["self"]],["option"]]],[11,"get","","Borrows the value in this storage location.",1,[[["self"]],["t"]]],[11,"get_or_set","","If the storage location has not yet been set, it is set to the return value of `from`. Returns a borrow to the value in this storage location.",1,[[["self"],["f"]],["t"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",1,[[["t"]],["storage"]]],[11,"clone","","",1,[[["self"]],["storage"]]],[11,"drop","","",1,[[["self"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[3,"Container"],[3,"Storage"]]};
searchIndex["strsim"]={"doc":"This library implements string similarity metrics.","items":[[4,"StrSimError","strsim","",N,N],[13,"DifferentLengthArgs","","",0,N],[5,"hamming","","Calculates the number of positions in the two strings where the characters differ. Returns an error if the strings have different lengths.",N,[[["str"],["str"]],["hammingresult"]]],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value is between 0.0 and 1.0 (higher value means more similar).",N,[[["str"],["str"]],["f64"]]],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",N,[[["str"],["str"]],["f64"]]],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions required to change one string into the other.",N,[[["str"],["str"]],["usize"]]],[5,"osa_distance","","Like Levenshtein but allows for adjacent transpositions. Each substring can only be edited once.",N,[[["str"],["str"]],["usize"]]],[5,"damerau_levenshtein","","Like optimal string alignment, but substrings can be edited an unlimited number of times, and the triangle inequality holds.",N,[[["str"],["str"]],["usize"]]],[6,"HammingResult","","",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["strsimerror"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"StrSimError"]]};
searchIndex["sudoku"]={"doc":"The Sudoku library","items":[[3,"Sudoku","sudoku","The main structure exposing all the functionality of the library Sudokus can be parsed in either the line format or the block format",N,N],[11,"clone","","",0,[[["self"]],["sudoku"]]],[11,"eq","","",0,[[["self"],["sudoku"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"generate_filled","","Generate a random, solved sudoku",0,[[],["self"]]],[11,"generate_unique","","Generate a random, uniquely solvable sudoku The puzzles are minimal in that no cell can be removed without losing uniquess of solution Most puzzles generated by this are easy",0,[[],["self"]]],[11,"generate_unique_from","","Generate a random, uniqely solvable sudoku that has the same solution as the given `sudoku` by removing the contents of some of its cells. The puzzles are minimal in that no cell can be removed without losing uniquess of solution. Most puzzles generated by this from solved sudokus are easy.",0,[[["sudoku"]],["self"]]],[11,"from_bytes_slice","","Creates a sudoku from a byte slice. All numbers must be below 10. Empty cells are denoted by 0, clues by the numbers 1-9. The slice must be of length 81.",0,N],[11,"from_bytes","","Creates a sudoku from a byte array. All numbers must be below 10. Empty cells are denoted by 0, clues by the numbers 1-9.",0,N],[11,"from_str_line","","Reads a sudoku in the line format Stops parsing after the first sudoku",0,[[["str"]],["result",["sudoku","lineformatparseerror"]]]],[11,"from_str_block","","Reads a sudoku in the block format with or without field delimiters Stops parsing after the first sudoku",0,[[["str"]],["result",["sudoku","blockformatparseerror"]]]],[11,"from_str_block_permissive","","Reads a sudoku in a variety of block formats, applying few constraints. '_', '.' and '0' are treated as empty cells. '1' to '9' as clues. Each line needs to have 9 valid cells. Lines that don't contain 9 valid entries are ignored. Stops parsing after the first sudoku. Due to the lax format rules, the only failure that can occur is that there are not enough rows.",0,[[["str"]],["result",["sudoku","notenoughrows"]]]],[11,"solve","","Try to find a solution to the sudoku and fill it in. Return true if a solution was found. This is a convenience interface. Use one of the other solver methods for better error handling",0,[[["self"]],["bool"]]],[11,"solve_one","","Find a solution to the sudoku. If multiple solutions exist, it will not find them and just stop at the first. Return `None` if no solution exists.",0,[[["self"]],["option",["sudoku"]]]],[11,"solve_unique","","Solve sudoku and return solution if solution is unique.",0,[[["self"]],["option",["sudoku"]]]],[11,"count_at_most","","Counts number of solutions to sudoku up to `limit` This solves the sudoku but does not return the solutions which allows for slightly faster execution.",0,[[["self"],["usize"]],["usize"]]],[11,"is_uniquely_solvable","","Checks whether sudoku has one and only one solution. This solves the sudoku but does not return the solution which allows for slightly faster execution.",0,[[["self"]],["bool"]]],[11,"solve_at_most","","Solve sudoku and return the first `limit` solutions it finds. If less solutions exist, return only those. Return `None` if no solution exists. No specific ordering of solutions is promised. It can change across versions.",0,[[["self"],["usize"]],["vec",["sudoku"]]]],[11,"solve_at_most_buffer","","Counts number of solutions to sudoku up to `limit` and writes any solution found into `target` up to its capacity. Additional solutions will be counted but not saved. No specific ordering of solutions is promised. It can change across versions. This is primarily meant for C FFI.",0,N],[11,"is_solved","","Check whether the sudoku is solved.",0,[[["self"]],["bool"]]],[11,"n_clues","","Returns number of filled cells",0,[[["self"]],["u8"]]],[11,"shuffle","","Perform various transformations that create a different but equivalent sudoku. The transformations preserve the sudoku's validity and the amount of solutions as well a the applicability of solution strategies. Shuffling can be used to quickly generate sudokus of the same difficulty as a given sudoku.",0,[[["self"]]]],[11,"iter","","Returns an Iterator over sudoku, going from left to right, top to bottom",0,[[["self"]],["map",["iter"]]]],[11,"to_bytes","","Returns a byte array for the sudoku. Empty cells are denoted by 0, clues by the numbers 1-9.",0,N],[11,"to_str_line","","Returns a representation of the sudoku in line format that can be printed and which derefs into a &str",0,[[["self"]],["sudokuline"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[0,"parse_errors","","Contains errors for the various parsing modes",N,N],[3,"NotEnoughRows","sudoku::parse_errors","Error for lax block format parsing. Contains the number of rows found.",N,N],[12,"0","","",1,N],[3,"Entry","","An invalid entry that was parsed",N,N],[12,"cell","","Cell number goes from 0..=80, 0..=8 for first line, 9..=17 for 2nd and so on",2,N],[12,"ch","","The parsed invalid char",2,N],[4,"LineFormatParseError","","A structure representing an error caused when parsing the sudoku",N,N],[13,"InvalidEntry","","Accepted values are numbers 1...9 and '0', '.' or '_' for empty cells",3,N],[13,"NotEnoughCells","","Returns number of cells supplied",3,N],[13,"TooManyCells","","Returned if >=82 valid cell positions are supplied",3,N],[13,"MissingCommentDelimiter","","Comments must be delimited by a space or tab.",3,N],[4,"BlockFormatParseError","","A structure representing an error caused when parsing the sudoku",N,N],[13,"InvalidEntry","","Non-digit, non-placeholder encountered. Field delimiters chars in unexpected places also cause this",4,N],[13,"InvalidLineLength","","Line contains (>9 valid entries) or (<9 and no invalids) Returns index of row (0-8)",4,N],[13,"NotEnoughRows","","Input ends with less than 9 rows. Returns number of rows encountered.",4,N],[13,"IncorrectFieldDelimiter","","If field delimiter is in place after 3rd number in 1st row all other horizontal and vertical field delimiters must be present or this is emitted",4,N],[13,"TooManyRows","","More than 9 lines are supplied and the 10th line is not pure whitespace",4,N],[13,"MissingCommentDelimiter","","Non-digit, non-placeholder after completed line encountered but without space",4,N],[11,"to_string","sudoku","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","sudoku::parse_errors","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"clone","","",2,[[["self"]],["pubentry"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["pubentry"]],["bool"]]],[11,"ne","","",2,[[["self"],["pubentry"]],["bool"]]],[11,"hash","","",2,N],[11,"row","","Row index from 0..=8, topmost row is 0",2,[[["self"]],["u8"]]],[11,"col","","Column index from 0..=8, leftmost col is 0",2,[[["self"]],["u8"]]],[11,"field","","Field index from 0..=8, numbering from left to right, top to bottom. Example: Top-row is 0, 1, 2",2,[[["self"]],["u8"]]],[11,"clone","","",1,[[["self"]],["notenoughrows"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"eq","","",1,[[["self"],["notenoughrows"]],["bool"]]],[11,"ne","","",1,[[["self"],["notenoughrows"]],["bool"]]],[11,"clone","","",4,[[["self"]],["blockformatparseerror"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",4,N],[11,"eq","","",4,[[["self"],["blockformatparseerror"]],["bool"]]],[11,"ne","","",4,[[["self"],["blockformatparseerror"]],["bool"]]],[11,"clone","","",3,[[["self"]],["lineformatparseerror"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"eq","","",3,[[["self"],["lineformatparseerror"]],["bool"]]],[11,"ne","","",3,[[["self"],["lineformatparseerror"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]]],"paths":[[3,"Sudoku"],[3,"NotEnoughRows"],[3,"Entry"],[4,"LineFormatParseError"],[4,"BlockFormatParseError"]]};
searchIndex["sudoku_backend"]={"doc":"","items":[[3,"Options","sudoku_backend","Representation of the application's all configurable values.",N,N],[12,"database_file","","File containing the main database.",0,N],[12,"leaderboard_settings_file","","Optional file containing the leaderboard settings.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["options"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["options"]],["bool"]]],[11,"ne","","",0,[[["self"],["options"]],["bool"]]],[11,"parse","","Parse `env`-wide command-line arguments into an `Options` instance",0,[[],["options"]]],[0,"doc","","Internal design documentation.",N,N],[0,"check","sudoku_backend::doc","Data extraxion Getting data out of the system",N,N],[0,"errors","","Errors Requests can fail, here's how they can fail.",N,N],[0,"session","","Session management Cookie encrypted with secure key as per `rocket` spec.",N,N],[0,"sudoku","","Sudoku processing How is sudoku formed?",N,N],[0,"user","","User list Users contain identifying data, status (admin/not), and points.",N,N],[0,"ops","sudoku_backend","",N,N],[3,"SudokuSolution","sudoku_backend::ops","Refer to `doc/sudoku.md` for more details.",N,N],[12,"id","","Unique board ID.",1,N],[12,"display_name","","Solver's display name",1,N],[12,"board_id","","The solved board ID",1,N],[12,"skeleton","","The solved board skeleton",1,N],[12,"difficulty","","Board \"difficulty\", between one and three",1,N],[12,"solution_duration_secs","","Time in seconds taken to achieve the solution",1,N],[12,"score","","Score achieved for the solve",1,N],[12,"solution_time","","Time the solution occured at",1,N],[3,"SudokuBoard","","Refer to `doc/sudoku.md` for more details.",N,N],[12,"id","","Unique board ID.",2,N],[12,"full_board","","The full \"solved\" board repr.",2,N],[12,"difficulty","","Board \"difficulty\", between one and three.",2,N],[12,"creation_time","","Time the board was generated.",2,N],[3,"Session","","Refer to `doc/session.md` for more details.",N,N],[12,"id","","Unique user ID.",3,N],[12,"expiry","","Time the cookie expires, defaults to a day from creation time.",3,N],[12,"is_admin","","Whether the user is logged in as admin (always `false` if `user_id == None`).",3,N],[12,"user_id","","The logged-in user ID, or `None` for unauthed access.",3,N],[12,"sudoku_board_id","","ID of board currently being solved",3,N],[12,"board_skeleton","","The board skeleton sent to the user",3,N],[12,"solve_start","","Time the solving started",3,N],[3,"User","","Refer to `doc/user.md` for more details.",N,N],[12,"id","","Unique user ID.",4,N],[12,"username","","User's name or \"login\" or whatever.",4,N],[12,"password","","Doubly scrypted password, see `doc/user.md` for details.",4,N],[12,"email","","User's contact e-mail",4,N],[12,"created_at","","Time user was created.",4,N],[12,"is_admin","","Whether the user has administrative privileges.",4,N],[12,"points_total","","Sum total of the user's points, calculated according to `doc/scoring.md#endgame-formula`, `CHECK`ed to nonnegativity.",4,N],[12,"games_total","","Amount of games played, `CHECK`ed to nonnegativity.",4,N],[3,"NewBoardRequestForm","","Form requested by the client to play a new Sudoku board",N,N],[12,"difficulty","","Difficulty of generated board",5,N],[3,"OldBoardRequestForm","","Form requested by the client to play the specified Sudoku board",N,N],[12,"board_id","","ID of board to play",6,N],[3,"SanitisedUserData","","Data returned to authenticating client, with a free conversion from a `User`.",N,N],[12,"username","","User's name or \"login\" or whatever.",7,N],[12,"created_at","","Time user was created.",7,N],[12,"is_admin","","Whether the user has administrative privileges.",7,N],[12,"points_total","","Sum total of the user's points, calculated according to `doc/scoring.md#endgame-formula`.",7,N],[12,"games_total","","Amount of games played.",7,N],[3,"BoardMessage","","The message sent to and from the client on acquisiion/submission of solved board",N,N],[12,"board_id","","ID of the full original board",8,N],[12,"board_skeleton","","The skeleton to be solved by the user",8,N],[12,"solved_board","","The solved board from the skeleton, to be present only on board submit",8,N],[3,"LoginForm","","Log-in and user-create form – refer to `doc/user.md`.",N,N],[12,"login","","Username, non-empty.",9,N],[12,"password","","Scrypted user password, constant width.",9,N],[12,"email","","User's e-mail. Need exist for user creation.",9,N],[12,"ext_error","","Error parsing the box, see `doc/user.md`.",9,N],[4,"BoardDifficulty","","The difficulties sudoku boards can come in.",N,N],[13,"Easy","","",10,N],[13,"Medium","","",10,N],[13,"Hard","","",10,N],[4,"SolutionOrdering","","How to order a solution list.",N,N],[13,"BestToWorst","","",11,N],[13,"WorstToBest","","",11,N],[4,"LeaderboardOf","","Which leaderboard to acquire.",N,N],[13,"Solutions","","",12,N],[13,"Users","","",12,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["loginform"]]],[11,"eq","","",9,[[["self"],["loginform"]],["bool"]]],[11,"ne","","",9,[[["self"],["loginform"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["loginform"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["loginform"]],["bool"]]],[11,"le","","",9,[[["self"],["loginform"]],["bool"]]],[11,"gt","","",9,[[["self"],["loginform"]],["bool"]]],[11,"ge","","",9,[[["self"],["loginform"]],["bool"]]],[11,"cmp","","",9,[[["self"],["loginform"]],["ordering"]]],[11,"errors","","Get a list of errors.",9,[[["self"]],["vec",["genericerror"]]]],[11,"validate","","Attempt to log the user in with the stored login and password.",9,[[["self"],["sqliteconnection"]],["result",["loginerror"]]]],[11,"into_user","","Attempt the conversion to a `User`.",9,[[["self"]],["result",["user","loginform"]]]],[11,"from","","",9,[[["user"]],["loginform"]]],[11,"from_form","","",9,[[["formitems"],["bool"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["sanitiseduserdata"]]],[11,"hash","","",7,N],[11,"eq","","",7,[[["self"],["sanitiseduserdata"]],["bool"]]],[11,"ne","","",7,[[["self"],["sanitiseduserdata"]],["bool"]]],[11,"cmp","","",7,[[["self"],["sanitiseduserdata"]],["ordering"]]],[11,"partial_cmp","","",7,[[["self"],["sanitiseduserdata"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["sanitiseduserdata"]],["bool"]]],[11,"le","","",7,[[["self"],["sanitiseduserdata"]],["bool"]]],[11,"gt","","",7,[[["self"],["sanitiseduserdata"]],["bool"]]],[11,"ge","","",7,[[["self"],["sanitiseduserdata"]],["bool"]]],[11,"from","","",7,[[["user"]],["sanitiseduserdata"]]],[11,"from_form","","",5,[[["formitems"],["bool"]],["result",["newboardrequestform","error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["newboardrequestform"]]],[11,"hash","","",5,N],[11,"eq","","",5,[[["self"],["newboardrequestform"]],["bool"]]],[11,"ne","","",5,[[["self"],["newboardrequestform"]],["bool"]]],[11,"cmp","","",5,[[["self"],["newboardrequestform"]],["ordering"]]],[11,"partial_cmp","","",5,[[["self"],["newboardrequestform"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["newboardrequestform"]],["bool"]]],[11,"le","","",5,[[["self"],["newboardrequestform"]],["bool"]]],[11,"gt","","",5,[[["self"],["newboardrequestform"]],["bool"]]],[11,"ge","","",5,[[["self"],["newboardrequestform"]],["bool"]]],[11,"from_form","","",6,[[["formitems"],["bool"]],["result",["oldboardrequestform","error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["oldboardrequestform"]]],[11,"hash","","",6,N],[11,"eq","","",6,[[["self"],["oldboardrequestform"]],["bool"]]],[11,"ne","","",6,[[["self"],["oldboardrequestform"]],["bool"]]],[11,"cmp","","",6,[[["self"],["oldboardrequestform"]],["ordering"]]],[11,"partial_cmp","","",6,[[["self"],["oldboardrequestform"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["oldboardrequestform"]],["bool"]]],[11,"le","","",6,[[["self"],["oldboardrequestform"]],["bool"]]],[11,"gt","","",6,[[["self"],["oldboardrequestform"]],["bool"]]],[11,"ge","","",6,[[["self"],["oldboardrequestform"]],["bool"]]],[11,"from_form","","",8,[[["formitems"],["bool"]],["result",["boardmessage","error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["boardmessage"]]],[11,"hash","","",8,N],[11,"eq","","",8,[[["self"],["boardmessage"]],["bool"]]],[11,"ne","","",8,[[["self"],["boardmessage"]],["bool"]]],[11,"cmp","","",8,[[["self"],["boardmessage"]],["ordering"]]],[11,"partial_cmp","","",8,[[["self"],["boardmessage"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["boardmessage"]],["bool"]]],[11,"le","","",8,[[["self"],["boardmessage"]],["bool"]]],[11,"gt","","",8,[[["self"],["boardmessage"]],["bool"]]],[11,"ge","","",8,[[["self"],["boardmessage"]],["bool"]]],[11,"serialize","","",8,[[["self"],["s"]],["result"]]],[11,"deserialize","","",8,[[["d"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["solutionordering"]]],[11,"hash","","",11,N],[11,"eq","","",11,[[["self"],["solutionordering"]],["bool"]]],[11,"cmp","","",11,[[["self"],["solutionordering"]],["ordering"]]],[11,"partial_cmp","","",11,[[["self"],["solutionordering"]],["option",["ordering"]]]],[18,"Default","","The default ordering, for generic code.",11,N],[11,"from_form_value","","",11,[[["rawstr"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["leaderboardof"]]],[11,"hash","","",12,N],[11,"eq","","",12,[[["self"],["leaderboardof"]],["bool"]]],[11,"cmp","","",12,[[["self"],["leaderboardof"]],["ordering"]]],[11,"partial_cmp","","",12,[[["self"],["leaderboardof"]],["option",["ordering"]]]],[18,"Default","","The default leaderboard target.",12,N],[11,"from_form_value","","",12,[[["rawstr"]],["result"]]],[11,"build","","",4,N],[11,"values","","",4,N],[11,"as_changeset","","",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["user"]]],[11,"hash","","",4,N],[11,"eq","","",4,[[["self"],["user"]],["bool"]]],[11,"ne","","",4,[[["self"],["user"]],["bool"]]],[11,"cmp","","",4,[[["self"],["user"]],["ordering"]]],[11,"partial_cmp","","",4,[[["self"],["user"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["user"]],["bool"]]],[11,"le","","",4,[[["self"],["user"]],["bool"]]],[11,"gt","","",4,[[["self"],["user"]],["bool"]]],[11,"ge","","",4,[[["self"],["user"]],["bool"]]],[11,"new","","Create a defaulted user with the specified parameters.",4,[[["u"],["p"],["e"]],["user"]]],[11,"get_by_id","","Pull out a user with the specified ID from the specified database.",4,[[["i32"],["sqliteconnection"]],["result",["user","str"]]]],[11,"add","","Insert this user into the specified database, if possible.",4,[[["self"],["sqliteconnection"]],["result",["str"]]]],[11,"solve","","Update in-memory and in-DB repr by the specified point count.",4,[[["self"],["usize"],["sqliteconnection"]],["result",["str"]]]],[11,"leaders","","Retrieve the board with the specified ID.",4,[[["leaderboardconfig"],["sqliteconnection"]],["result",["vec","str"]]]],[11,"build","","",3,N],[11,"values","","",3,N],[11,"as_changeset","","",3,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["session"]]],[11,"hash","","",3,N],[11,"eq","","",3,[[["self"],["session"]],["bool"]]],[11,"ne","","",3,[[["self"],["session"]],["bool"]]],[11,"cmp","","",3,[[["self"],["session"]],["ordering"]]],[11,"partial_cmp","","",3,[[["self"],["session"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["session"]],["bool"]]],[11,"le","","",3,[[["self"],["session"]],["bool"]]],[11,"gt","","",3,[[["self"],["session"]],["bool"]]],[11,"ge","","",3,[[["self"],["session"]],["bool"]]],[11,"new","","Create an empty session expiring a day from the creation datetime.",3,[[],["session"]]],[11,"get","","Get/create a session for the specified cookieset.",3,[[["sqliteconnection"],["cookies"]],["result",["session","str"]]]],[11,"start_game","","Update the in-memory and in-DB model to start playing the specified game.",3,[[["self"],["i32"],["s"],["sqliteconnection"]],["result",["str"]]]],[11,"stop_game","","Update the in-memory and in-DB model to start playing the specified game.",3,[[["self"],["sqliteconnection"]],["result",["str"]]]],[11,"game_started","","Check if this session has a game going",3,[[["self"]],["bool"]]],[11,"log_in","","Update the in-memory and in-DB model to be logged in as the specified user with the specified permissions.",3,[[["self"],["i32"],["bool"],["sqliteconnection"]],["result",["str"]]]],[11,"log_out","","Update the in-memory and in-DB model to not be logged in nor be admin.",3,[[["self"],["sqliteconnection"]],["result",["str"]]]],[11,"build","","",2,N],[11,"values","","",2,N],[11,"as_changeset","","",2,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["sudokuboard"]]],[11,"hash","","",2,N],[11,"eq","","",2,[[["self"],["sudokuboard"]],["bool"]]],[11,"ne","","",2,[[["self"],["sudokuboard"]],["bool"]]],[11,"cmp","","",2,[[["self"],["sudokuboard"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["sudokuboard"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["sudokuboard"]],["bool"]]],[11,"le","","",2,[[["self"],["sudokuboard"]],["bool"]]],[11,"gt","","",2,[[["self"],["sudokuboard"]],["bool"]]],[11,"ge","","",2,[[["self"],["sudokuboard"]],["bool"]]],[11,"new","","Create a new, unique, sudoku board.",2,[[["boarddifficulty"]],["sudokuboard"]]],[11,"get","","Retrieve the board with the specified ID.",2,[[["i32"],["sqliteconnection"]],["result",["sudokuboard","str"]]]],[11,"insert","","Insert this board into the specified DB, updating its id.",2,[[["self"],["sqliteconnection"]],["result",["str"]]]],[11,"generate_skeleton","","Get а board skeleton adjusted for the difficulty.",2,[[["self"]],["result",["string","sudokulineformatparseerror"]]]],[11,"build","","",1,N],[11,"values","","",1,N],[11,"as_changeset","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["sudokusolution"]]],[11,"hash","","",1,N],[11,"eq","","",1,[[["self"],["sudokusolution"]],["bool"]]],[11,"ne","","",1,[[["self"],["sudokusolution"]],["bool"]]],[11,"cmp","","",1,[[["self"],["sudokusolution"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["sudokusolution"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["sudokusolution"]],["bool"]]],[11,"le","","",1,[[["self"],["sudokusolution"]],["bool"]]],[11,"gt","","",1,[[["self"],["sudokusolution"]],["bool"]]],[11,"ge","","",1,[[["self"],["sudokusolution"]],["bool"]]],[11,"new","","Create a ready-to-insert solution out of the specified data.",1,[[["sn"],["sk"],["sudokuboard"],["duration"]],["option",["sudokusolution"]]]],[11,"leaders","","Retrieve the board with the specified ID.",1,[[["leaderboardconfig"],["sqliteconnection"]],["result",["vec","str"]]]],[11,"insert","","Insert this board into the specified DB, updating its id.",1,[[["self"],["sqliteconnection"]],["result",["str"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["boarddifficulty"]]],[11,"hash","","",10,N],[11,"eq","","",10,[[["self"],["boarddifficulty"]],["bool"]]],[11,"cmp","","",10,[[["self"],["boarddifficulty"]],["ordering"]]],[11,"partial_cmp","","",10,[[["self"],["boarddifficulty"]],["option",["ordering"]]]],[11,"score","","Calculate the score for a board according to `doc/sudoku.md#scoring-formula`",10,[[["self"],["duration"]],["option",["u64"]]]],[11,"from_numeric","","Parse a numerical representation of the difficulty.",10,[[["u64"]],["option",["boarddifficulty"]]]],[11,"to_numeric","","Convert difficulty to a numeric repr",10,[[["self"]],["u64"]]],[11,"additional_squares","","How many more squares to compensate difficulty with.",10,[[["self"]],["usize"]]],[11,"from_form_value","","",10,[[["rawstr"]],["result"]]],[0,"setup","","Data used for general application setup: third-party connexions, et caetera.",N,N],[3,"DatabaseConnection","sudoku_backend::ops::setup","Connection request guard type: a wrapper around an r2d2 pooled connection.",N,N],[3,"SpecificLeaderboardConfig","","Configuration of a leaderboard request. Refer to `doc/check.rs` for more details.",N,N],[12,"for_whom","","How many entries to return",13,N],[12,"cfg","","How many entries to return",13,N],[3,"LeaderboardConfig","","Configuration of a leaderboard request. Refer to `doc/check.rs` for more details.",N,N],[12,"count","","How many entries to return",14,N],[12,"ordering","","How to order the returned entries",14,N],[3,"LeaderboardGroupSettings","","Amalgam of max and default leaderboard configurations. Refer to `doc/check.rs` for more details.",N,N],[12,"default","","Default config to backfill from",15,N],[12,"max","","Unexceedable config",15,N],[3,"LeaderboardSettings","","Amalgam of max and default leaderboard configurations. Refer to `doc/check.rs` for more details.",N,N],[12,"board","","Settings for solves",16,N],[12,"person","","Settings for people",16,N],[11,"initialise","","Set up a connection to the main database located in the specified file and initialise it with `util::INITIALISE_DATABASE`.",17,N],[11,"from_request","","",17,[[["request"]],["requestoutcome",["databaseconnection"]]]],[11,"deref","","",17,[[["self"]],["sqliteconnection"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["specificleaderboardconfig"]]],[11,"hash","","",13,N],[11,"eq","","",13,[[["self"],["specificleaderboardconfig"]],["bool"]]],[11,"ne","","",13,[[["self"],["specificleaderboardconfig"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["specificleaderboardconfig"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["specificleaderboardconfig"]],["bool"]]],[11,"le","","",13,[[["self"],["specificleaderboardconfig"]],["bool"]]],[11,"gt","","",13,[[["self"],["specificleaderboardconfig"]],["bool"]]],[11,"ge","","",13,[[["self"],["specificleaderboardconfig"]],["bool"]]],[11,"cmp","","",13,[[["self"],["specificleaderboardconfig"]],["ordering"]]],[11,"from_form","","",13,[[["formitems"],["bool"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["leaderboardconfig"]]],[11,"hash","","",14,N],[11,"eq","","",14,[[["self"],["leaderboardconfig"]],["bool"]]],[11,"ne","","",14,[[["self"],["leaderboardconfig"]],["bool"]]],[11,"cmp","","",14,[[["self"],["leaderboardconfig"]],["ordering"]]],[18,"BOARD_DEFAULT_DEFAULT","","Default no-spec return config for solutions.",14,N],[18,"BOARD_DEFAULT_MAX","","Default maximal unexceedable return config for solutions.",14,N],[18,"PLAYER_DEFAULT_DEFAULT","","Default no-spec return config for players.",14,N],[18,"PLAYER_DEFAULT_MAX","","Default maximal unexceedable return config for players.",14,N],[11,"partial_cmp","","",14,[[["self"],["leaderboardconfig"]],["option",["ordering"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["leaderboardgroupsettings"]]],[11,"hash","","",15,N],[11,"eq","","",15,[[["self"],["leaderboardgroupsettings"]],["bool"]]],[11,"ne","","",15,[[["self"],["leaderboardgroupsettings"]],["bool"]]],[11,"cmp","","",15,[[["self"],["leaderboardgroupsettings"]],["ordering"]]],[11,"partial_cmp","","",15,[[["self"],["leaderboardgroupsettings"]],["option",["ordering"]]]],[11,"lt","","",15,[[["self"],["leaderboardgroupsettings"]],["bool"]]],[11,"le","","",15,[[["self"],["leaderboardgroupsettings"]],["bool"]]],[11,"gt","","",15,[[["self"],["leaderboardgroupsettings"]],["bool"]]],[11,"ge","","",15,[[["self"],["leaderboardgroupsettings"]],["bool"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["leaderboardsettings"]]],[11,"hash","","",16,N],[11,"eq","","",16,[[["self"],["leaderboardsettings"]],["bool"]]],[11,"ne","","",16,[[["self"],["leaderboardsettings"]],["bool"]]],[11,"cmp","","",16,[[["self"],["leaderboardsettings"]],["ordering"]]],[11,"partial_cmp","","",16,[[["self"],["leaderboardsettings"]],["option",["ordering"]]]],[11,"lt","","",16,[[["self"],["leaderboardsettings"]],["bool"]]],[11,"le","","",16,[[["self"],["leaderboardsettings"]],["bool"]]],[11,"gt","","",16,[[["self"],["leaderboardsettings"]],["bool"]]],[11,"ge","","",16,[[["self"],["leaderboardsettings"]],["bool"]]],[11,"load","","Load the settings from the ones specified in the specified file.",16,N],[0,"routes","sudoku_backend::ops","",N,N],[0,"catchers","sudoku_backend::ops::routes","Handlers that catch various error states.",N,N],[3,"RESPONSE_404","sudoku_backend::ops::routes::catchers","Lazy error value for 404s",N,N],[3,"RESPONSE_500","","Lazy error value for 500s",N,N],[5,"not_found","","Handler for 404s, returning `RESPONSE_404`.",N,[[],["json",["genericerror"]]]],[5,"internal_server_error","","Handler for 500s, returning `RESPONSE_500`.",N,[[],["json",["genericerror"]]]],[7,"static_rocket_catch_info_for_not_found","","",N,N],[7,"static_rocket_catch_info_for_internal_server_error","","",N,N],[11,"deref","","",18,[[["self"]],["genericerror"]]],[11,"initialize","","",18,[[["self"]]]],[11,"deref","","",19,[[["self"]],["genericerror"]]],[11,"initialize","","",19,[[["self"]]]],[0,"v1","sudoku_backend::ops::routes","",N,N],[0,"check","sudoku_backend::ops::routes::v1","Data retrieval related routes.",N,N],[5,"leaderboard_specless","sudoku_backend::ops::routes::v1::check","Get default scores",N,[[["databaseconnection"],["state",["leaderboardsettings"]]],["result",["result","custom"]]]],[5,"leaderboard","","Get scores",N,[[["databaseconnection"],["state",["leaderboardsettings"]],["option",["specificleaderboardconfig"]]],["result",["result","custom"]]]],[7,"static_rocket_route_info_for_leaderboard_specless","","Rocket code generated static route information structure.",N,N],[7,"static_rocket_route_info_for_leaderboard","","Rocket code generated static route information structure.",N,N],[0,"auth","sudoku_backend::ops::routes::v1","Auth-related routes.",N,N],[5,"login","sudoku_backend::ops::routes::v1::auth","Log the user in.",N,[[["databaseconnection"],["cookies"],["form",["loginform"]]],["result",["result","custom"]]]],[5,"logout","","Log the user out, if it is logged in.",N,[[["databaseconnection"],["cookies"]],["result",["custom","custom"]]]],[5,"create_account","","Create a new account.",N,[[["databaseconnection"],["cookies"],["form",["loginform"]]],["result",["custom","custom"]]]],[5,"user_data","","Get data for the currently logged-in user",N,[[["databaseconnection"],["cookies"]],["result",["json","custom"]]]],[7,"static_rocket_route_info_for_login","","Rocket code generated static route information structure.",N,N],[7,"static_rocket_route_info_for_logout","","Rocket code generated static route information structure.",N,N],[7,"static_rocket_route_info_for_create_account","","Rocket code generated static route information structure.",N,N],[7,"static_rocket_route_info_for_user_data","","Rocket code generated static route information structure.",N,N],[0,"play","sudoku_backend::ops::routes::v1","Auth-related routes.",N,N],[5,"new","sudoku_backend::ops::routes::v1::play","Get a new board of the specified difficulty and update the session.",N,[[["databaseconnection"],["cookies"],["newboardrequestform"]],["result",["custom","custom"]]]],[5,"replay","","Get the specified board and update the session.",N,[[["databaseconnection"],["cookies"],["oldboardrequestform"]],["result",["custom","custom"]]]],[5,"submit","","Get a new board of the specified difficulty and update the session.",N,[[["databaseconnection"],["cookies"],["form",["boardmessage"]]],["result",["json","custom"]]]],[7,"static_rocket_route_info_for_new","","Rocket code generated static route information structure.",N,N],[7,"static_rocket_route_info_for_replay","","Rocket code generated static route information structure.",N,N],[7,"static_rocket_route_info_for_submit","","Rocket code generated static route information structure.",N,N],[0,"tables","sudoku_backend::ops","`diesel` table definitions, copied over from `doc/`umentation.",N,N],[0,"sessions","sudoku_backend::ops::tables","See `doc/session.md`",N,N],[3,"table","sudoku_backend::ops::tables::sessions","The actual table struct",N,N],[0,"dsl","","Re-exports all of the columns of this table, as well as the table struct renamed to the module name. This is meant to be glob imported for functions which only deal with one table.",N,N],[0,"columns","","Contains all of the columns of this table",N,N],[3,"star","sudoku_backend::ops::tables::sessions::columns","Represents `table_name.*`, which is sometimes needed for efficient count queries. It cannot be used in place of `all_columns`, and has a `SqlType` of `()` to prevent it being used that way",N,N],[3,"id","","Nullable wrapper so we can pass NULL to SQLite so it assigns new id",N,N],[3,"expiry","","",N,N],[3,"is_admin","","",N,N],[3,"user_id","","",N,N],[3,"sudoku_board_id","","",N,N],[3,"board_skeleton","","",N,N],[3,"solve_start","","",N,N],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["star"]]],[11,"walk_ast","","",20,[[["self"],["astpass"]],["queryresult"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["id"]]],[11,"default","","",21,[[],["id"]]],[11,"walk_ast","","",21,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",21,N],[11,"add","","",21,N],[11,"sub","","",21,N],[11,"div","","",21,N],[11,"mul","","",21,N],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["expiry"]]],[11,"default","","",22,[[],["expiry"]]],[11,"walk_ast","","",22,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",22,N],[11,"add","","",22,N],[11,"sub","","",22,N],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["is_admin"]]],[11,"default","","",23,[[],["is_admin"]]],[11,"walk_ast","","",23,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",23,N],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",24,[[["self"]],["user_id"]]],[11,"default","","",24,[[],["user_id"]]],[11,"walk_ast","","",24,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",24,N],[11,"add","","",24,N],[11,"sub","","",24,N],[11,"div","","",24,N],[11,"mul","","",24,N],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"clone","","",25,[[["self"]],["sudoku_board_id"]]],[11,"default","","",25,[[],["sudoku_board_id"]]],[11,"walk_ast","","",25,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",25,N],[11,"add","","",25,N],[11,"sub","","",25,N],[11,"div","","",25,N],[11,"mul","","",25,N],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["board_skeleton"]]],[11,"default","","",26,[[],["board_skeleton"]]],[11,"walk_ast","","",26,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",26,N],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["solve_start"]]],[11,"default","","",27,[[],["solve_start"]]],[11,"walk_ast","","",27,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",27,N],[11,"add","","",27,N],[11,"sub","","",27,N],[6,"SqlType","sudoku_backend::ops::tables::sessions","The SQL type of all of the columns on this table",N,N],[6,"BoxedQuery","","Helper type for representing a boxed query from this table",N,N],[17,"all_columns","","A tuple of all of the columns on this table",N,N],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"clone","","",28,[[["self"]],["table"]]],[11,"star","","Represents `table_name.*`, which is sometimes necessary for efficient count queries. It cannot be used in place of `all_columns`",28,[[["self"]],["star"]]],[11,"from_clause","","",28,N],[11,"default_selection","","",28,N],[11,"as_query","","",28,N],[11,"primary_key","","",28,N],[11,"all_columns","","",28,N],[11,"table","","",28,N],[11,"into_update_target","","",28,[[["self"]],["updatetarget"]]],[11,"join_target","","",28,N],[11,"join_target","","",28,N],[11,"join_target","","",28,N],[11,"join_target","","",28,N],[11,"values","","",28,N],[0,"users","sudoku_backend::ops::tables","See `doc/user.md`",N,N],[3,"table","sudoku_backend::ops::tables::users","The actual table struct",N,N],[0,"dsl","","Re-exports all of the columns of this table, as well as the table struct renamed to the module name. This is meant to be glob imported for functions which only deal with one table.",N,N],[0,"columns","","Contains all of the columns of this table",N,N],[3,"star","sudoku_backend::ops::tables::users::columns","Represents `table_name.*`, which is sometimes needed for efficient count queries. It cannot be used in place of `all_columns`, and has a `SqlType` of `()` to prevent it being used that way",N,N],[3,"id","","Nullable wrapper so we can pass NULL to SQLite so it assigns new id",N,N],[3,"username","","",N,N],[3,"password","","",N,N],[3,"email","","",N,N],[3,"created_at","","",N,N],[3,"is_admin","","",N,N],[3,"points_total","","",N,N],[3,"games_total","","",N,N],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"clone","","",29,[[["self"]],["star"]]],[11,"walk_ast","","",29,[[["self"],["astpass"]],["queryresult"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"clone","","",30,[[["self"]],["id"]]],[11,"default","","",30,[[],["id"]]],[11,"walk_ast","","",30,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",30,N],[11,"add","","",30,N],[11,"sub","","",30,N],[11,"div","","",30,N],[11,"mul","","",30,N],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"clone","","",31,[[["self"]],["username"]]],[11,"default","","",31,[[],["username"]]],[11,"walk_ast","","",31,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",31,N],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"clone","","",32,[[["self"]],["password"]]],[11,"default","","",32,[[],["password"]]],[11,"walk_ast","","",32,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",32,N],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"clone","","",33,[[["self"]],["email"]]],[11,"default","","",33,[[],["email"]]],[11,"walk_ast","","",33,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",33,N],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"clone","","",34,[[["self"]],["created_at"]]],[11,"default","","",34,[[],["created_at"]]],[11,"walk_ast","","",34,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",34,N],[11,"add","","",34,N],[11,"sub","","",34,N],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"clone","","",35,[[["self"]],["is_admin"]]],[11,"default","","",35,[[],["is_admin"]]],[11,"walk_ast","","",35,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",35,N],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"clone","","",36,[[["self"]],["points_total"]]],[11,"default","","",36,[[],["points_total"]]],[11,"walk_ast","","",36,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",36,N],[11,"add","","",36,N],[11,"sub","","",36,N],[11,"div","","",36,N],[11,"mul","","",36,N],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"clone","","",37,[[["self"]],["games_total"]]],[11,"default","","",37,[[],["games_total"]]],[11,"walk_ast","","",37,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",37,N],[11,"add","","",37,N],[11,"sub","","",37,N],[11,"div","","",37,N],[11,"mul","","",37,N],[6,"SqlType","sudoku_backend::ops::tables::users","The SQL type of all of the columns on this table",N,N],[6,"BoxedQuery","","Helper type for representing a boxed query from this table",N,N],[17,"all_columns","","A tuple of all of the columns on this table",N,N],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"clone","","",38,[[["self"]],["table"]]],[11,"star","","Represents `table_name.*`, which is sometimes necessary for efficient count queries. It cannot be used in place of `all_columns`",38,[[["self"]],["star"]]],[11,"from_clause","","",38,N],[11,"default_selection","","",38,N],[11,"as_query","","",38,N],[11,"primary_key","","",38,N],[11,"all_columns","","",38,N],[11,"table","","",38,N],[11,"into_update_target","","",38,[[["self"]],["updatetarget"]]],[11,"join_target","","",38,N],[11,"join_target","","",38,N],[11,"join_target","","",38,N],[11,"join_target","","",38,N],[11,"values","","",38,N],[0,"sudoku_boards","sudoku_backend::ops::tables","See `doc/sudoku.md`",N,N],[3,"table","sudoku_backend::ops::tables::sudoku_boards","The actual table struct",N,N],[0,"dsl","","Re-exports all of the columns of this table, as well as the table struct renamed to the module name. This is meant to be glob imported for functions which only deal with one table.",N,N],[0,"columns","","Contains all of the columns of this table",N,N],[3,"star","sudoku_backend::ops::tables::sudoku_boards::columns","Represents `table_name.*`, which is sometimes needed for efficient count queries. It cannot be used in place of `all_columns`, and has a `SqlType` of `()` to prevent it being used that way",N,N],[3,"id","","Nullable wrapper so we can pass NULL to SQLite so it assigns new id",N,N],[3,"full_board","","",N,N],[3,"difficulty","","",N,N],[3,"creation_time","","",N,N],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"clone","","",39,[[["self"]],["star"]]],[11,"walk_ast","","",39,[[["self"],["astpass"]],["queryresult"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"clone","","",40,[[["self"]],["id"]]],[11,"default","","",40,[[],["id"]]],[11,"walk_ast","","",40,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",40,N],[11,"add","","",40,N],[11,"sub","","",40,N],[11,"div","","",40,N],[11,"mul","","",40,N],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"clone","","",41,[[["self"]],["full_board"]]],[11,"default","","",41,[[],["full_board"]]],[11,"walk_ast","","",41,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",41,N],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"clone","","",42,[[["self"]],["difficulty"]]],[11,"default","","",42,[[],["difficulty"]]],[11,"walk_ast","","",42,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",42,N],[11,"add","","",42,N],[11,"sub","","",42,N],[11,"div","","",42,N],[11,"mul","","",42,N],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"clone","","",43,[[["self"]],["creation_time"]]],[11,"default","","",43,[[],["creation_time"]]],[11,"walk_ast","","",43,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",43,N],[11,"add","","",43,N],[11,"sub","","",43,N],[6,"SqlType","sudoku_backend::ops::tables::sudoku_boards","The SQL type of all of the columns on this table",N,N],[6,"BoxedQuery","","Helper type for representing a boxed query from this table",N,N],[17,"all_columns","","A tuple of all of the columns on this table",N,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"clone","","",44,[[["self"]],["table"]]],[11,"star","","Represents `table_name.*`, which is sometimes necessary for efficient count queries. It cannot be used in place of `all_columns`",44,[[["self"]],["star"]]],[11,"from_clause","","",44,N],[11,"default_selection","","",44,N],[11,"as_query","","",44,N],[11,"primary_key","","",44,N],[11,"all_columns","","",44,N],[11,"table","","",44,N],[11,"into_update_target","","",44,[[["self"]],["updatetarget"]]],[11,"join_target","","",44,N],[11,"join_target","","",44,N],[11,"join_target","","",44,N],[11,"join_target","","",44,N],[11,"values","","",44,N],[0,"sudoku_solutions","sudoku_backend::ops::tables","See `doc/sudoku.md`",N,N],[3,"table","sudoku_backend::ops::tables::sudoku_solutions","The actual table struct",N,N],[0,"dsl","","Re-exports all of the columns of this table, as well as the table struct renamed to the module name. This is meant to be glob imported for functions which only deal with one table.",N,N],[0,"columns","","Contains all of the columns of this table",N,N],[3,"star","sudoku_backend::ops::tables::sudoku_solutions::columns","Represents `table_name.*`, which is sometimes needed for efficient count queries. It cannot be used in place of `all_columns`, and has a `SqlType` of `()` to prevent it being used that way",N,N],[3,"id","","Nullable wrapper so we can pass NULL to SQLite so it assigns new id",N,N],[3,"display_name","","",N,N],[3,"board_id","","",N,N],[3,"skeleton","","",N,N],[3,"difficulty","","",N,N],[3,"solution_duration_secs","","",N,N],[3,"score","","",N,N],[3,"solution_time","","",N,N],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"clone","","",45,[[["self"]],["star"]]],[11,"walk_ast","","",45,[[["self"],["astpass"]],["queryresult"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"clone","","",46,[[["self"]],["id"]]],[11,"default","","",46,[[],["id"]]],[11,"walk_ast","","",46,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",46,N],[11,"add","","",46,N],[11,"sub","","",46,N],[11,"div","","",46,N],[11,"mul","","",46,N],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"clone","","",47,[[["self"]],["display_name"]]],[11,"default","","",47,[[],["display_name"]]],[11,"walk_ast","","",47,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",47,N],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"clone","","",48,[[["self"]],["board_id"]]],[11,"default","","",48,[[],["board_id"]]],[11,"walk_ast","","",48,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",48,N],[11,"add","","",48,N],[11,"sub","","",48,N],[11,"div","","",48,N],[11,"mul","","",48,N],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",49,[[["self"]],["skeleton"]]],[11,"default","","",49,[[],["skeleton"]]],[11,"walk_ast","","",49,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",49,N],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"clone","","",50,[[["self"]],["difficulty"]]],[11,"default","","",50,[[],["difficulty"]]],[11,"walk_ast","","",50,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",50,N],[11,"add","","",50,N],[11,"sub","","",50,N],[11,"div","","",50,N],[11,"mul","","",50,N],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"clone","","",51,[[["self"]],["solution_duration_secs"]]],[11,"default","","",51,[[],["solution_duration_secs"]]],[11,"walk_ast","","",51,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",51,N],[11,"add","","",51,N],[11,"sub","","",51,N],[11,"div","","",51,N],[11,"mul","","",51,N],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"clone","","",52,[[["self"]],["score"]]],[11,"default","","",52,[[],["score"]]],[11,"walk_ast","","",52,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",52,N],[11,"add","","",52,N],[11,"sub","","",52,N],[11,"div","","",52,N],[11,"mul","","",52,N],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"clone","","",53,[[["self"]],["solution_time"]]],[11,"default","","",53,[[],["solution_time"]]],[11,"walk_ast","","",53,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",53,N],[11,"add","","",53,N],[11,"sub","","",53,N],[6,"SqlType","sudoku_backend::ops::tables::sudoku_solutions","The SQL type of all of the columns on this table",N,N],[6,"BoxedQuery","","Helper type for representing a boxed query from this table",N,N],[17,"all_columns","","A tuple of all of the columns on this table",N,N],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"clone","","",54,[[["self"]],["table"]]],[11,"star","","Represents `table_name.*`, which is sometimes necessary for efficient count queries. It cannot be used in place of `all_columns`",54,[[["self"]],["star"]]],[11,"from_clause","","",54,N],[11,"default_selection","","",54,N],[11,"as_query","","",54,N],[11,"primary_key","","",54,N],[11,"all_columns","","",54,N],[11,"table","","",54,N],[11,"into_update_target","","",54,[[["self"]],["updatetarget"]]],[11,"join_target","","",54,N],[11,"join_target","","",54,N],[11,"join_target","","",54,N],[11,"join_target","","",54,N],[11,"values","","",54,N],[0,"constraints","sudoku_backend::ops","Various verbose weak type-system-level constraints.",N,N],[3,"SCrypt64Length","sudoku_backend::ops::constraints","Character length of a SCrypt key with `dkLen=64`,",N,N],[3,"SudokuBoard9x9ConciseLength","","Character length of the concise representation of a 9x9 Sudoku board.",N,N],[3,"NonEmpty","","Require that the string not be empty.",N,N],[12,"0","","",55,N],[3,"HexString","","Require that the string be hexadecimal and of the specified width.",N,N],[12,"0","","",56,N],[12,"1","","",56,N],[3,"SudokuString","","Require that the string be a concise sudoku representation of the specified width.",N,N],[12,"0","","",57,N],[12,"1","","",57,N],[3,"EMail","","Weakly validate the string to be roughly e-mail-shaped.",N,N],[12,"0","","",58,N],[3,"Positive","","Weakly validate the int to be positive.",N,N],[12,"0","","",59,N],[8,"StringLength","","Template value arg, refer to `HexString`.",N,N],[18,"LENGTH","","The requested length of the string.",60,N],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"clone","","",61,[[["self"]],["scrypt64length"]]],[11,"hash","","",61,N],[11,"eq","","",61,[[["self"],["scrypt64length"]],["bool"]]],[11,"partial_cmp","","",61,[[["self"],["scrypt64length"]],["option",["ordering"]]]],[11,"cmp","","",61,[[["self"],["scrypt64length"]],["ordering"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"clone","","",62,[[["self"]],["sudokuboard9x9conciselength"]]],[11,"hash","","",62,N],[11,"eq","","",62,[[["self"],["sudokuboard9x9conciselength"]],["bool"]]],[11,"partial_cmp","","",62,[[["self"],["sudokuboard9x9conciselength"]],["option",["ordering"]]]],[11,"cmp","","",62,[[["self"],["sudokuboard9x9conciselength"]],["ordering"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"clone","","",55,[[["self"]],["nonempty"]]],[11,"hash","","",55,N],[11,"eq","","",55,[[["self"],["nonempty"]],["bool"]]],[11,"ne","","",55,[[["self"],["nonempty"]],["bool"]]],[11,"partial_cmp","","",55,[[["self"],["nonempty"]],["option",["ordering"]]]],[11,"lt","","",55,[[["self"],["nonempty"]],["bool"]]],[11,"le","","",55,[[["self"],["nonempty"]],["bool"]]],[11,"gt","","",55,[[["self"],["nonempty"]],["bool"]]],[11,"ge","","",55,[[["self"],["nonempty"]],["bool"]]],[11,"cmp","","",55,[[["self"],["nonempty"]],["ordering"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"clone","","",56,[[["self"]],["hexstring"]]],[11,"hash","","",56,N],[11,"eq","","",56,[[["self"],["hexstring"]],["bool"]]],[11,"ne","","",56,[[["self"],["hexstring"]],["bool"]]],[11,"partial_cmp","","",56,[[["self"],["hexstring"]],["option",["ordering"]]]],[11,"lt","","",56,[[["self"],["hexstring"]],["bool"]]],[11,"le","","",56,[[["self"],["hexstring"]],["bool"]]],[11,"gt","","",56,[[["self"],["hexstring"]],["bool"]]],[11,"ge","","",56,[[["self"],["hexstring"]],["bool"]]],[11,"cmp","","",56,[[["self"],["hexstring"]],["ordering"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"clone","","",57,[[["self"]],["sudokustring"]]],[11,"hash","","",57,N],[11,"eq","","",57,[[["self"],["sudokustring"]],["bool"]]],[11,"ne","","",57,[[["self"],["sudokustring"]],["bool"]]],[11,"partial_cmp","","",57,[[["self"],["sudokustring"]],["option",["ordering"]]]],[11,"lt","","",57,[[["self"],["sudokustring"]],["bool"]]],[11,"le","","",57,[[["self"],["sudokustring"]],["bool"]]],[11,"gt","","",57,[[["self"],["sudokustring"]],["bool"]]],[11,"ge","","",57,[[["self"],["sudokustring"]],["bool"]]],[11,"cmp","","",57,[[["self"],["sudokustring"]],["ordering"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"clone","","",58,[[["self"]],["email"]]],[11,"hash","","",58,N],[11,"eq","","",58,[[["self"],["email"]],["bool"]]],[11,"ne","","",58,[[["self"],["email"]],["bool"]]],[11,"partial_cmp","","",58,[[["self"],["email"]],["option",["ordering"]]]],[11,"lt","","",58,[[["self"],["email"]],["bool"]]],[11,"le","","",58,[[["self"],["email"]],["bool"]]],[11,"gt","","",58,[[["self"],["email"]],["bool"]]],[11,"ge","","",58,[[["self"],["email"]],["bool"]]],[11,"cmp","","",58,[[["self"],["email"]],["ordering"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"hash","","",59,N],[11,"clone","","",59,[[["self"]],["positive"]]],[11,"eq","","",59,[[["self"],["positive"]],["bool"]]],[11,"ne","","",59,[[["self"],["positive"]],["bool"]]],[11,"partial_cmp","","",59,[[["self"],["positive"]],["option",["ordering"]]]],[11,"lt","","",59,[[["self"],["positive"]],["bool"]]],[11,"le","","",59,[[["self"],["positive"]],["bool"]]],[11,"gt","","",59,[[["self"],["positive"]],["bool"]]],[11,"ge","","",59,[[["self"],["positive"]],["bool"]]],[11,"cmp","","",59,[[["self"],["positive"]],["ordering"]]],[11,"from_form_value","","",55,[[["rawstr"]],["result"]]],[11,"from_form_value","","",56,[[["rawstr"]],["result"]]],[11,"from_form_value","","",57,[[["rawstr"]],["result"]]],[11,"from_form_value","","Any deeper kind of validation is either too complex or too bad to be reliable.",58,[[["rawstr"]],["result"]]],[11,"from_form_value","","",59,[[["rawstr"]],["result"]]],[11,"from_str","","",55,[[["str"]],["result"]]],[11,"from_str","","",56,[[["str"]],["result"]]],[11,"from_str","","",57,[[["str"]],["result"]]],[11,"from_str","","",58,[[["str"]],["result"]]],[11,"from_str","","",59,[[["str"]],["result"]]],[0,"errors","sudoku_backend::ops","Various API errors.",N,N],[3,"GenericError","sudoku_backend::ops::errors","Use this for most non-specific errors.",N,N],[12,"reason","","In all-lowercase past-tense finishing-punctuation-free form.",63,N],[12,"severity","","How bad the error is.",63,N],[3,"LoginError","","Security ⇒ no data.",N,N],[4,"GenericErrorSeverity","","How severe an error is.",N,N],[13,"Warning","","Something went wrong, usually user's fault.",64,N],[13,"Danger","","Some invariant failed, usually internal DB failure or a malicious API call.",64,N],[0,"util","sudoku_backend","Various utility functions.",N,N],[3,"SCRYPT_MINIMUM_TIME","sudoku_backend::util","The ideal \"ideal\" time `scrypt` – 250ms, which makes the hash time be between 250 and 500 milliseconds.",N,N],[3,"SCRYPT_IDEAL_PARAMS","","Induce the \"ideal\" parameters for `scrypt`, given a time the calculation must exceed, with the minimum of the recommended 214 rounds.",N,N],[5,"mul_str","","Create a string consisting of `n` repetitions of `what`.",N,[[["str"],["usize"]],["string"]]],[5,"board_includes","","Check if the specified board includes the specified skeleton.",N,[[["str"],["str"]],["bool"]]],[5,"random_username","","Get a random username.",N,[[],["string"]]],[7,"ADJECTIVES","","A set of first-upper-case adjectives for order numbers.",N,N],[7,"NOUNS","","A set of first-upper-case nouns for order numbers.",N,N],[7,"ADVERBS","","A set of first-upper-case adverbs for order numbers.",N,N],[17,"INITIALISE_DATABASE","","Query to run to set up the database.",N,N],[11,"deref","","",65,[[["self"]],["duration"]]],[11,"initialize","","",65,[[["self"]]]],[11,"deref","","",66,[[["self"]],["scryptparams"]]],[11,"initialize","","",66,[[["self"]]]],[11,"from","sudoku_backend","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","sudoku_backend::ops","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","sudoku_backend::ops::errors","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"clone","","",67,[[["self"]],["loginerror"]]],[11,"hash","","",67,N],[11,"eq","","",67,[[["self"],["loginerror"]],["bool"]]],[11,"cmp","","",67,[[["self"],["loginerror"]],["ordering"]]],[11,"partial_cmp","","",67,[[["self"],["loginerror"]],["option",["ordering"]]]],[11,"from","","",67,N],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"clone","","",63,[[["self"]],["genericerror"]]],[11,"hash","","",63,N],[11,"eq","","",63,[[["self"],["genericerror"]],["bool"]]],[11,"ne","","",63,[[["self"],["genericerror"]],["bool"]]],[11,"cmp","","",63,[[["self"],["genericerror"]],["ordering"]]],[11,"partial_cmp","","",63,[[["self"],["genericerror"]],["option",["ordering"]]]],[11,"lt","","",63,[[["self"],["genericerror"]],["bool"]]],[11,"le","","",63,[[["self"],["genericerror"]],["bool"]]],[11,"gt","","",63,[[["self"],["genericerror"]],["bool"]]],[11,"ge","","",63,[[["self"],["genericerror"]],["bool"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"clone","","",64,[[["self"]],["genericerrorseverity"]]],[11,"hash","","",64,N],[11,"eq","","",64,[[["self"],["genericerrorseverity"]],["bool"]]],[11,"cmp","","",64,[[["self"],["genericerrorseverity"]],["ordering"]]],[11,"partial_cmp","","",64,[[["self"],["genericerrorseverity"]],["option",["ordering"]]]],[18,"Lowest","","The currently-lowest severity, for generic code.",64,N],[11,"from","","",63,N],[11,"from","sudoku_backend::ops::setup","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","sudoku_backend::ops::routes::catchers","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","sudoku_backend::ops::tables::sessions","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"group_by","","",28,N],[11,"join_target","","",28,N],[11,"from","sudoku_backend::ops::tables::sessions::columns","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","sudoku_backend::ops::tables::users","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"group_by","","",38,N],[11,"join_target","","",38,N],[11,"from","sudoku_backend::ops::tables::users::columns","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","sudoku_backend::ops::tables::sudoku_boards","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"group_by","","",44,N],[11,"join_target","","",44,N],[11,"from","sudoku_backend::ops::tables::sudoku_boards::columns","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"from","sudoku_backend::ops::tables::sudoku_solutions","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"group_by","","",54,N],[11,"join_target","","",54,N],[11,"from","sudoku_backend::ops::tables::sudoku_solutions::columns","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"from","sudoku_backend::ops::constraints","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"from","sudoku_backend::util","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]]],"paths":[[3,"Options"],[3,"SudokuSolution"],[3,"SudokuBoard"],[3,"Session"],[3,"User"],[3,"NewBoardRequestForm"],[3,"OldBoardRequestForm"],[3,"SanitisedUserData"],[3,"BoardMessage"],[3,"LoginForm"],[4,"BoardDifficulty"],[4,"SolutionOrdering"],[4,"LeaderboardOf"],[3,"SpecificLeaderboardConfig"],[3,"LeaderboardConfig"],[3,"LeaderboardGroupSettings"],[3,"LeaderboardSettings"],[3,"DatabaseConnection"],[3,"RESPONSE_404"],[3,"RESPONSE_500"],[3,"star"],[3,"id"],[3,"expiry"],[3,"is_admin"],[3,"user_id"],[3,"sudoku_board_id"],[3,"board_skeleton"],[3,"solve_start"],[3,"table"],[3,"star"],[3,"id"],[3,"username"],[3,"password"],[3,"email"],[3,"created_at"],[3,"is_admin"],[3,"points_total"],[3,"games_total"],[3,"table"],[3,"star"],[3,"id"],[3,"full_board"],[3,"difficulty"],[3,"creation_time"],[3,"table"],[3,"star"],[3,"id"],[3,"display_name"],[3,"board_id"],[3,"skeleton"],[3,"difficulty"],[3,"solution_duration_secs"],[3,"score"],[3,"solution_time"],[3,"table"],[3,"NonEmpty"],[3,"HexString"],[3,"SudokuString"],[3,"EMail"],[3,"Positive"],[8,"StringLength"],[3,"SCrypt64Length"],[3,"SudokuBoard9x9ConciseLength"],[3,"GenericError"],[4,"GenericErrorSeverity"],[3,"SCRYPT_MINIMUM_TIME"],[3,"SCRYPT_IDEAL_PARAMS"],[3,"LoginError"]]};
searchIndex["syn"]={"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",N,N],[12,"pound_token","","",0,N],[12,"style","","",0,N],[12,"bracket_token","","",0,N],[12,"path","","",0,N],[12,"tts","","",0,N],[12,"is_sugared_doc","","",0,N],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",N,N],[12,"ident","","",1,N],[12,"paren_token","","",1,N],[12,"nested","","",1,N],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",N,N],[12,"ident","","",2,N],[12,"eq_token","","",2,N],[12,"lit","","",2,N],[3,"Field","","A field of a struct or enum variant.",N,N],[12,"attrs","","Attributes tagged on the field.",3,N],[12,"vis","","Visibility of the field.",3,N],[12,"ident","","Name of the field, if any.",3,N],[12,"colon_token","","",3,N],[12,"ty","","Type of the field.",3,N],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",N,N],[12,"brace_token","","",4,N],[12,"named","","",4,N],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",N,N],[12,"paren_token","","",5,N],[12,"unnamed","","",5,N],[3,"Variant","","An enum variant.",N,N],[12,"attrs","","Attributes tagged on the variant.",6,N],[12,"ident","","Name of the variant.",6,N],[12,"fields","","Content stored in the variant.",6,N],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,N],[3,"VisCrate","","A crate-level visibility: `crate`.",N,N],[12,"crate_token","","",7,N],[3,"VisPublic","","A public visibility level: `pub`.",N,N],[12,"pub_token","","",8,N],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",N,N],[12,"pub_token","","",9,N],[12,"paren_token","","",9,N],[12,"in_token","","",9,N],[12,"path","","",9,N],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",N,N],[3,"ExprAssign","","An assignment expression: `a = compute()`.",N,N],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",N,N],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",N,N],[12,"attrs","","",10,N],[12,"left","","",10,N],[12,"op","","",10,N],[12,"right","","",10,N],[3,"ExprBlock","","A blocked scope: `{ ... }`.",N,N],[3,"ExprBox","","A box expression: `box f`.",N,N],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",N,N],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",N,N],[12,"attrs","","",11,N],[12,"func","","",11,N],[12,"paren_token","","",11,N],[12,"args","","",11,N],[3,"ExprCast","","A cast expression: `foo as f64`.",N,N],[12,"attrs","","",12,N],[12,"expr","","",12,N],[12,"as_token","","",12,N],[12,"ty","","",12,N],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",N,N],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",N,N],[3,"ExprContinue","","A `continue`, with an optional label.",N,N],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",N,N],[12,"attrs","","",13,N],[12,"base","","",13,N],[12,"dot_token","","",13,N],[12,"member","","",13,N],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",N,N],[3,"ExprGroup","","An expression contained within invisible delimiters.",N,N],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",N,N],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",N,N],[3,"ExprInPlace","","A placement expression: `place <- value`.",N,N],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",N,N],[12,"attrs","","",14,N],[12,"expr","","",14,N],[12,"bracket_token","","",14,N],[12,"index","","",14,N],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",N,N],[12,"attrs","","",15,N],[12,"lit","","",15,N],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",N,N],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",N,N],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",N,N],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",N,N],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",N,N],[12,"attrs","","",16,N],[12,"paren_token","","",16,N],[12,"expr","","",16,N],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",N,N],[12,"attrs","","",17,N],[12,"qself","","",17,N],[12,"path","","",17,N],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",N,N],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",N,N],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",N,N],[3,"ExprReturn","","A `return`, with an optional value to be returned.",N,N],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",N,N],[3,"ExprTry","","A try-expression: `expr?`.",N,N],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",N,N],[3,"ExprType","","A type ascription expression: `foo: f64`.",N,N],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",N,N],[12,"attrs","","",18,N],[12,"op","","",18,N],[12,"expr","","",18,N],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",N,N],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",N,N],[12,"tts","","",19,N],[3,"ExprWhile","","A while loop: `while expr { ... }`.",N,N],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",N,N],[3,"ExprYield","","A yield expression: `yield expr`.",N,N],[3,"Index","","The index of an unnamed tuple struct field.",N,N],[12,"index","","",20,N],[12,"span","","",20,N],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",N,N],[12,"for_token","","",21,N],[12,"lt_token","","",21,N],[12,"lifetimes","","",21,N],[12,"gt_token","","",21,N],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",N,N],[12,"attrs","","",22,N],[12,"const_token","","",22,N],[12,"ident","","",22,N],[12,"colon_token","","",22,N],[12,"ty","","",22,N],[12,"eq_token","","",22,N],[12,"default","","",22,N],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",N,N],[12,"lt_token","","",23,N],[12,"params","","",23,N],[12,"gt_token","","",23,N],[12,"where_clause","","",23,N],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",N,N],[12,"attrs","","",24,N],[12,"lifetime","","",24,N],[12,"colon_token","","",24,N],[12,"bounds","","",24,N],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",N,N],[12,"lhs_ty","","",25,N],[12,"eq_token","","",25,N],[12,"rhs_ty","","",25,N],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",N,N],[12,"lifetime","","",26,N],[12,"colon_token","","",26,N],[12,"bounds","","",26,N],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",N,N],[12,"lifetimes","","Any lifetimes from a `for` binding",27,N],[12,"bounded_ty","","The type being bounded",27,N],[12,"colon_token","","",27,N],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",27,N],[3,"TraitBound","","A trait used as a bound on a type parameter.",N,N],[12,"paren_token","","",28,N],[12,"modifier","","",28,N],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",28,N],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",28,N],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",N,N],[12,"attrs","","",29,N],[12,"ident","","",29,N],[12,"colon_token","","",29,N],[12,"bounds","","",29,N],[12,"eq_token","","",29,N],[12,"default","","",29,N],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",N,N],[12,"where_token","","",30,N],[12,"predicates","","",30,N],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",N,N],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Lifetime","","A Rust lifetime: `'a`.",N,N],[12,"apostrophe","","",31,N],[12,"ident","","",31,N],[3,"LitBool","","A boolean literal: `true` or `false`.",N,N],[12,"value","","",32,N],[12,"span","","",32,N],[3,"LitByte","","A byte literal: `b'f'`.",N,N],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",N,N],[3,"LitChar","","A character literal: `'a'`.",N,N],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",N,N],[3,"LitInt","","An integer literal: `1` or `1u16`.",N,N],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",N,N],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",N,N],[12,"token","","",33,N],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",N,N],[12,"path","","",34,N],[12,"bang_token","","",34,N],[12,"delimiter","","",34,N],[12,"tts","","",34,N],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",N,N],[12,"enum_token","","",35,N],[12,"brace_token","","",35,N],[12,"variants","","",35,N],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",N,N],[12,"struct_token","","",36,N],[12,"fields","","",36,N],[12,"semi_token","","",36,N],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",N,N],[12,"union_token","","",37,N],[12,"fields","","",37,N],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",N,N],[12,"attrs","","Attributes tagged on the whole struct or enum.",38,N],[12,"vis","","Visibility of the struct or enum.",38,N],[12,"ident","","Name of the struct or enum.",38,N],[12,"generics","","Generics required to complete the definition.",38,N],[12,"data","","Data within the struct or enum.",38,N],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",N,N],[12,"extern_token","","",39,N],[12,"name","","",39,N],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",N,N],[12,"name","","",40,N],[12,"ty","","",40,N],[3,"TypeArray","","A fixed size array type: `[T; n]`.",N,N],[12,"bracket_token","","",41,N],[12,"elem","","",41,N],[12,"semi_token","","",41,N],[12,"len","","",41,N],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",N,N],[12,"unsafety","","",42,N],[12,"abi","","",42,N],[12,"fn_token","","",42,N],[12,"lifetimes","","",42,N],[12,"paren_token","","",42,N],[12,"inputs","","",42,N],[12,"variadic","","",42,N],[12,"output","","",42,N],[3,"TypeGroup","","A type contained within invisible delimiters.",N,N],[12,"group_token","","",43,N],[12,"elem","","",43,N],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",N,N],[12,"impl_token","","",44,N],[12,"bounds","","",44,N],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",N,N],[12,"underscore_token","","",45,N],[3,"TypeMacro","","A macro in the type position.",N,N],[12,"mac","","",46,N],[3,"TypeNever","","The never type: `!`.",N,N],[12,"bang_token","","",47,N],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",N,N],[12,"paren_token","","",48,N],[12,"elem","","",48,N],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",N,N],[12,"qself","","",49,N],[12,"path","","",49,N],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",N,N],[12,"star_token","","",50,N],[12,"const_token","","",50,N],[12,"mutability","","",50,N],[12,"elem","","",50,N],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",N,N],[12,"and_token","","",51,N],[12,"lifetime","","",51,N],[12,"mutability","","",51,N],[12,"elem","","",51,N],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",N,N],[12,"bracket_token","","",52,N],[12,"elem","","",52,N],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",N,N],[12,"dyn_token","","",53,N],[12,"bounds","","",53,N],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",N,N],[12,"paren_token","","",54,N],[12,"elems","","",54,N],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",N,N],[12,"tts","","",55,N],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",N,N],[12,"0","","",56,N],[12,"1","","",56,N],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",N,N],[12,"colon2_token","","",57,N],[12,"lt_token","","",57,N],[12,"args","","",57,N],[12,"gt_token","","",57,N],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",N,N],[12,"ident","","",58,N],[12,"eq_token","","",58,N],[12,"ty","","",58,N],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",N,N],[12,"paren_token","","",59,N],[12,"inputs","","`(A, B)`",59,N],[12,"output","","`C`",59,N],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",N,N],[12,"leading_colon","","",60,N],[12,"segments","","",60,N],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",N,N],[12,"ident","","",61,N],[12,"arguments","","",61,N],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",N,N],[12,"lt_token","","",62,N],[12,"ty","","",62,N],[12,"position","","",62,N],[12,"as_token","","",62,N],[12,"gt_token","","",62,N],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",N,N],[13,"Outer","","",63,N],[13,"Inner","","",63,N],[4,"Meta","","Content of a compile-time structured attribute.",N,N],[13,"Word","","",64,N],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",64,N],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",64,N],[4,"NestedMeta","","Element of a compile-time attribute list.",N,N],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",65,N],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",65,N],[4,"Fields","","Data stored within an enum variant or struct.",N,N],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",66,N],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",66,N],[13,"Unit","","Unit struct or unit variant such as `None`.",66,N],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",N,N],[13,"Public","","A public visibility level: `pub`.",67,N],[13,"Crate","","A crate-level visibility: `crate`.",67,N],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",67,N],[13,"Inherited","","An inherited visibility, which usually means private.",67,N],[4,"Expr","","A Rust expression.",N,N],[13,"Box","","A box expression: `box f`.",68,N],[13,"InPlace","","A placement expression: `place <- value`.",68,N],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",68,N],[13,"Call","","A function call expression: `invoke(a, b)`.",68,N],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",68,N],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",68,N],[13,"Binary","","A binary operation: `a + b`, `a * b`.",68,N],[13,"Unary","","A unary operation: `!x`, `*x`.",68,N],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",68,N],[13,"Cast","","A cast expression: `foo as f64`.",68,N],[13,"Type","","A type ascription expression: `foo: f64`.",68,N],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",68,N],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",68,N],[13,"While","","A while loop: `while expr { ... }`.",68,N],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",68,N],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",68,N],[13,"Loop","","Conditionless loop: `loop { ... }`.",68,N],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",68,N],[13,"Closure","","A closure expression: `|a, b| a + b`.",68,N],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",68,N],[13,"Block","","A blocked scope: `{ ... }`.",68,N],[13,"Assign","","An assignment expression: `a = compute()`.",68,N],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",68,N],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",68,N],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",68,N],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",68,N],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",68,N],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",68,N],[13,"Break","","A `break`, with an optional label to break and an optional expression.",68,N],[13,"Continue","","A `continue`, with an optional label.",68,N],[13,"Return","","A `return`, with an optional value to be returned.",68,N],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",68,N],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",68,N],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",68,N],[13,"Paren","","A parenthesized expression: `(a + b)`.",68,N],[13,"Group","","An expression contained within invisible delimiters.",68,N],[13,"Try","","A try-expression: `expr?`.",68,N],[13,"Catch","","A catch expression: `do catch { ... }`.",68,N],[13,"Yield","","A yield expression: `yield expr`.",68,N],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",68,N],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",N,N],[13,"Named","","A named field like `self.x`.",69,N],[13,"Unnamed","","An unnamed field like `self.0`.",69,N],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",N,N],[13,"Type","","A generic type parameter: `T: Into<String>`.",70,N],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",70,N],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",70,N],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",N,N],[13,"None","","",71,N],[13,"Maybe","","",71,N],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",N,N],[13,"Trait","","",72,N],[13,"Lifetime","","",72,N],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",N,N],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",73,N],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",73,N],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",73,N],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",N,N],[13,"F32","","",74,N],[13,"F64","","",74,N],[13,"None","","",74,N],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",N,N],[13,"I8","","",75,N],[13,"I16","","",75,N],[13,"I32","","",75,N],[13,"I64","","",75,N],[13,"I128","","",75,N],[13,"Isize","","",75,N],[13,"U8","","",75,N],[13,"U16","","",75,N],[13,"U32","","",75,N],[13,"U64","","",75,N],[13,"U128","","",75,N],[13,"Usize","","",75,N],[13,"None","","",75,N],[4,"Lit","","A Rust literal such as a string or integer or boolean.",N,N],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",76,N],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",76,N],[13,"Byte","","A byte literal: `b'f'`.",76,N],[13,"Char","","A character literal: `'a'`.",76,N],[13,"Int","","An integer literal: `1` or `1u16`.",76,N],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",76,N],[13,"Bool","","A boolean literal: `true` or `false`.",76,N],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",76,N],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",N,N],[13,"Cooked","","An ordinary string like `\"data\"`.",77,N],[13,"Raw","","A raw string like `r##\"data\"##`.",77,N],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",N,N],[13,"Paren","","",78,N],[13,"Brace","","",78,N],[13,"Bracket","","",78,N],[4,"Data","","The storage of a struct, enum or union data structure.",N,N],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",79,N],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",79,N],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",79,N],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",N,N],[13,"Add","","The `+` operator (addition)",80,N],[13,"Sub","","The `-` operator (subtraction)",80,N],[13,"Mul","","The `*` operator (multiplication)",80,N],[13,"Div","","The `/` operator (division)",80,N],[13,"Rem","","The `%` operator (modulus)",80,N],[13,"And","","The `&&` operator (logical and)",80,N],[13,"Or","","The `||` operator (logical or)",80,N],[13,"BitXor","","The `^` operator (bitwise xor)",80,N],[13,"BitAnd","","The `&` operator (bitwise and)",80,N],[13,"BitOr","","The `|` operator (bitwise or)",80,N],[13,"Shl","","The `<<` operator (shift left)",80,N],[13,"Shr","","The `>>` operator (shift right)",80,N],[13,"Eq","","The `==` operator (equality)",80,N],[13,"Lt","","The `<` operator (less than)",80,N],[13,"Le","","The `<=` operator (less than or equal to)",80,N],[13,"Ne","","The `!=` operator (not equal to)",80,N],[13,"Ge","","The `>=` operator (greater than or equal to)",80,N],[13,"Gt","","The `>` operator (greater than)",80,N],[13,"AddEq","","The `+=` operator",80,N],[13,"SubEq","","The `-=` operator",80,N],[13,"MulEq","","The `*=` operator",80,N],[13,"DivEq","","The `/=` operator",80,N],[13,"RemEq","","The `%=` operator",80,N],[13,"BitXorEq","","The `^=` operator",80,N],[13,"BitAndEq","","The `&=` operator",80,N],[13,"BitOrEq","","The `|=` operator",80,N],[13,"ShlEq","","The `<<=` operator",80,N],[13,"ShrEq","","The `>>=` operator",80,N],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",N,N],[13,"Deref","","The `*` operator for dereferencing",81,N],[13,"Not","","The `!` operator for logical inversion",81,N],[13,"Neg","","The `-` operator for negation",81,N],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",N,N],[13,"Named","","Argument given a name.",82,N],[13,"Wild","","Argument not given a name, matched with `_`.",82,N],[4,"ReturnType","","Return type of a function signature.",N,N],[13,"Default","","Return type is not specified.",83,N],[13,"Type","","A particular type is returned.",83,N],[4,"Type","","The possible types that a Rust value could have.",N,N],[13,"Slice","","A dynamically sized slice type: `[T]`.",84,N],[13,"Array","","A fixed size array type: `[T; n]`.",84,N],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",84,N],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",84,N],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",84,N],[13,"Never","","The never type: `!`.",84,N],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",84,N],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",84,N],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",84,N],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",84,N],[13,"Paren","","A parenthesized type equivalent to the inner type.",84,N],[13,"Group","","A type contained within invisible delimiters.",84,N],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",84,N],[13,"Macro","","A macro in the type position.",84,N],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",84,N],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",N,N],[13,"Lifetime","","A lifetime argument.",85,N],[13,"Type","","A type argument.",85,N],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",85,N],[13,"Const","","A const expression. Must be inside of a block.",85,N],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",N,N],[13,"None","","",86,N],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",86,N],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",86,N],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",N,[[["str"]],["result",["parseerror"]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",N,N],[3,"Underscore","syn::token","`_`",N,N],[12,"0","","",87,N],[3,"Apostrophe","","`'`",N,N],[12,"0","","",88,N],[3,"Add","","`+`",N,N],[12,"0","","",89,N],[3,"AddEq","","`+=`",N,N],[12,"0","","",90,N],[3,"And","","`&`",N,N],[12,"0","","",91,N],[3,"AndAnd","","`&&`",N,N],[12,"0","","",92,N],[3,"AndEq","","`&=`",N,N],[12,"0","","",93,N],[3,"At","","`@`",N,N],[12,"0","","",94,N],[3,"Bang","","`!`",N,N],[12,"0","","",95,N],[3,"Caret","","`^`",N,N],[12,"0","","",96,N],[3,"CaretEq","","`^=`",N,N],[12,"0","","",97,N],[3,"Colon","","`:`",N,N],[12,"0","","",98,N],[3,"Colon2","","`::`",N,N],[12,"0","","",99,N],[3,"Comma","","`,`",N,N],[12,"0","","",100,N],[3,"Div","","`/`",N,N],[12,"0","","",101,N],[3,"DivEq","","`/=`",N,N],[12,"0","","",102,N],[3,"Dollar","","`$`",N,N],[12,"0","","",103,N],[3,"Dot","","`.`",N,N],[12,"0","","",104,N],[3,"Dot2","","`..`",N,N],[12,"0","","",105,N],[3,"Dot3","","`...`",N,N],[12,"0","","",106,N],[3,"DotDotEq","","`..=`",N,N],[12,"0","","",107,N],[3,"Eq","","`=`",N,N],[12,"0","","",108,N],[3,"EqEq","","`==`",N,N],[12,"0","","",109,N],[3,"Ge","","`>=`",N,N],[12,"0","","",110,N],[3,"Gt","","`>`",N,N],[12,"0","","",111,N],[3,"Le","","`<=`",N,N],[12,"0","","",112,N],[3,"Lt","","`<`",N,N],[12,"0","","",113,N],[3,"MulEq","","`*=`",N,N],[12,"0","","",114,N],[3,"Ne","","`!=`",N,N],[12,"0","","",115,N],[3,"Or","","`|`",N,N],[12,"0","","",116,N],[3,"OrEq","","`|=`",N,N],[12,"0","","",117,N],[3,"OrOr","","`||`",N,N],[12,"0","","",118,N],[3,"Pound","","`#`",N,N],[12,"0","","",119,N],[3,"Question","","`?`",N,N],[12,"0","","",120,N],[3,"RArrow","","`->`",N,N],[12,"0","","",121,N],[3,"LArrow","","`<-`",N,N],[12,"0","","",122,N],[3,"Rem","","`%`",N,N],[12,"0","","",123,N],[3,"RemEq","","`%=`",N,N],[12,"0","","",124,N],[3,"FatArrow","","`=>`",N,N],[12,"0","","",125,N],[3,"Semi","","`;`",N,N],[12,"0","","",126,N],[3,"Shl","","`<<`",N,N],[12,"0","","",127,N],[3,"ShlEq","","`<<=`",N,N],[12,"0","","",128,N],[3,"Shr","","`>>`",N,N],[12,"0","","",129,N],[3,"ShrEq","","`>>=`",N,N],[12,"0","","",130,N],[3,"Star","","`*`",N,N],[12,"0","","",131,N],[3,"Sub","","`-`",N,N],[12,"0","","",132,N],[3,"SubEq","","`-=`",N,N],[12,"0","","",133,N],[3,"Brace","","`{...}`",N,N],[12,"0","","",134,N],[3,"Bracket","","`[...]`",N,N],[12,"0","","",135,N],[3,"Paren","","`(...)`",N,N],[12,"0","","",136,N],[3,"Group","","None-delimited group",N,N],[12,"0","","",137,N],[3,"As","","`as`",N,N],[12,"0","","",138,N],[3,"Async","","`async`",N,N],[12,"0","","",139,N],[3,"Auto","","`auto`",N,N],[12,"0","","",140,N],[3,"Box","","`box`",N,N],[12,"0","","",141,N],[3,"Break","","`break`",N,N],[12,"0","","",142,N],[3,"CapSelf","","`Self`",N,N],[12,"0","","",143,N],[3,"Catch","","`catch`",N,N],[12,"0","","",144,N],[3,"Const","","`const`",N,N],[12,"0","","",145,N],[3,"Continue","","`continue`",N,N],[12,"0","","",146,N],[3,"Crate","","`crate`",N,N],[12,"0","","",147,N],[3,"Default","","`default`",N,N],[12,"0","","",148,N],[3,"Do","","`do`",N,N],[12,"0","","",149,N],[3,"Dyn","","`dyn`",N,N],[12,"0","","",150,N],[3,"Else","","`else`",N,N],[12,"0","","",151,N],[3,"Enum","","`enum`",N,N],[12,"0","","",152,N],[3,"Extern","","`extern`",N,N],[12,"0","","",153,N],[3,"Fn","","`fn`",N,N],[12,"0","","",154,N],[3,"For","","`for`",N,N],[12,"0","","",155,N],[3,"If","","`if`",N,N],[12,"0","","",156,N],[3,"Impl","","`impl`",N,N],[12,"0","","",157,N],[3,"In","","`in`",N,N],[12,"0","","",158,N],[3,"Let","","`let`",N,N],[12,"0","","",159,N],[3,"Loop","","`loop`",N,N],[12,"0","","",160,N],[3,"Macro","","`macro`",N,N],[12,"0","","",161,N],[3,"Match","","`match`",N,N],[12,"0","","",162,N],[3,"Mod","","`mod`",N,N],[12,"0","","",163,N],[3,"Move","","`move`",N,N],[12,"0","","",164,N],[3,"Mut","","`mut`",N,N],[12,"0","","",165,N],[3,"Pub","","`pub`",N,N],[12,"0","","",166,N],[3,"Ref","","`ref`",N,N],[12,"0","","",167,N],[3,"Return","","`return`",N,N],[12,"0","","",168,N],[3,"Self_","","`self`",N,N],[12,"0","","",169,N],[3,"Static","","`static`",N,N],[12,"0","","",170,N],[3,"Struct","","`struct`",N,N],[12,"0","","",171,N],[3,"Super","","`super`",N,N],[12,"0","","",172,N],[3,"Trait","","`trait`",N,N],[12,"0","","",173,N],[3,"Type","","`type`",N,N],[12,"0","","",174,N],[3,"Union","","`union`",N,N],[12,"0","","",175,N],[3,"Unsafe","","`unsafe`",N,N],[12,"0","","",176,N],[3,"Use","","`use`",N,N],[12,"0","","",177,N],[3,"Where","","`where`",N,N],[12,"0","","",178,N],[3,"While","","`while`",N,N],[12,"0","","",179,N],[3,"Yield","","`yield`",N,N],[12,"0","","",180,N],[11,"clone","","",87,[[["self"]],["underscore"]]],[11,"new","","",87,[[["span"]],["self"]]],[11,"default","","",87,[[],["self"]]],[11,"from","","",87,[[["span"]],["self"]]],[11,"to_tokens","","",87,[[["self"],["tokenstream"]]]],[11,"parse","","",87,[[["cursor"]],["presult",["underscore"]]]],[11,"description","","",87,[[],["option",["str"]]]],[11,"clone","","",88,[[["self"]],["apostrophe"]]],[11,"new","","",88,[[["span"]],["self"]]],[11,"default","","",88,[[],["self"]]],[11,"from","","",88,[[["span"]],["self"]]],[11,"to_tokens","","",88,[[["self"],["tokenstream"]]]],[11,"parse","","",88,[[["cursor"]],["presult",["apostrophe"]]]],[11,"description","","",88,[[],["option",["str"]]]],[11,"clone","","",89,[[["self"]],["add"]]],[11,"new","","",89,[[["span"]],["self"]]],[11,"default","","",89,[[],["self"]]],[11,"from","","",89,[[["span"]],["self"]]],[11,"clone","","",90,[[["self"]],["addeq"]]],[11,"new","","",90,[[["span"]],["self"]]],[11,"default","","",90,[[],["self"]]],[11,"from","","",90,[[["span"]],["self"]]],[11,"clone","","",91,[[["self"]],["and"]]],[11,"new","","",91,[[["span"]],["self"]]],[11,"default","","",91,[[],["self"]]],[11,"from","","",91,[[["span"]],["self"]]],[11,"clone","","",92,[[["self"]],["andand"]]],[11,"new","","",92,[[["span"]],["self"]]],[11,"default","","",92,[[],["self"]]],[11,"from","","",92,[[["span"]],["self"]]],[11,"clone","","",93,[[["self"]],["andeq"]]],[11,"new","","",93,[[["span"]],["self"]]],[11,"default","","",93,[[],["self"]]],[11,"from","","",93,[[["span"]],["self"]]],[11,"clone","","",94,[[["self"]],["at"]]],[11,"new","","",94,[[["span"]],["self"]]],[11,"default","","",94,[[],["self"]]],[11,"from","","",94,[[["span"]],["self"]]],[11,"clone","","",95,[[["self"]],["bang"]]],[11,"new","","",95,[[["span"]],["self"]]],[11,"default","","",95,[[],["self"]]],[11,"from","","",95,[[["span"]],["self"]]],[11,"clone","","",96,[[["self"]],["caret"]]],[11,"new","","",96,[[["span"]],["self"]]],[11,"default","","",96,[[],["self"]]],[11,"from","","",96,[[["span"]],["self"]]],[11,"clone","","",97,[[["self"]],["careteq"]]],[11,"new","","",97,[[["span"]],["self"]]],[11,"default","","",97,[[],["self"]]],[11,"from","","",97,[[["span"]],["self"]]],[11,"clone","","",98,[[["self"]],["colon"]]],[11,"new","","",98,[[["span"]],["self"]]],[11,"default","","",98,[[],["self"]]],[11,"from","","",98,[[["span"]],["self"]]],[11,"clone","","",99,[[["self"]],["colon2"]]],[11,"new","","",99,[[["span"]],["self"]]],[11,"default","","",99,[[],["self"]]],[11,"from","","",99,[[["span"]],["self"]]],[11,"clone","","",100,[[["self"]],["comma"]]],[11,"new","","",100,[[["span"]],["self"]]],[11,"default","","",100,[[],["self"]]],[11,"from","","",100,[[["span"]],["self"]]],[11,"clone","","",101,[[["self"]],["div"]]],[11,"new","","",101,[[["span"]],["self"]]],[11,"default","","",101,[[],["self"]]],[11,"from","","",101,[[["span"]],["self"]]],[11,"clone","","",102,[[["self"]],["diveq"]]],[11,"new","","",102,[[["span"]],["self"]]],[11,"default","","",102,[[],["self"]]],[11,"from","","",102,[[["span"]],["self"]]],[11,"clone","","",103,[[["self"]],["dollar"]]],[11,"new","","",103,[[["span"]],["self"]]],[11,"default","","",103,[[],["self"]]],[11,"from","","",103,[[["span"]],["self"]]],[11,"clone","","",104,[[["self"]],["dot"]]],[11,"new","","",104,[[["span"]],["self"]]],[11,"default","","",104,[[],["self"]]],[11,"from","","",104,[[["span"]],["self"]]],[11,"clone","","",105,[[["self"]],["dot2"]]],[11,"new","","",105,[[["span"]],["self"]]],[11,"default","","",105,[[],["self"]]],[11,"from","","",105,[[["span"]],["self"]]],[11,"clone","","",106,[[["self"]],["dot3"]]],[11,"new","","",106,[[["span"]],["self"]]],[11,"default","","",106,[[],["self"]]],[11,"from","","",106,[[["span"]],["self"]]],[11,"clone","","",107,[[["self"]],["dotdoteq"]]],[11,"new","","",107,[[["span"]],["self"]]],[11,"default","","",107,[[],["self"]]],[11,"from","","",107,[[["span"]],["self"]]],[11,"clone","","",108,[[["self"]],["eq"]]],[11,"new","","",108,[[["span"]],["self"]]],[11,"default","","",108,[[],["self"]]],[11,"from","","",108,[[["span"]],["self"]]],[11,"clone","","",109,[[["self"]],["eqeq"]]],[11,"new","","",109,[[["span"]],["self"]]],[11,"default","","",109,[[],["self"]]],[11,"from","","",109,[[["span"]],["self"]]],[11,"clone","","",110,[[["self"]],["ge"]]],[11,"new","","",110,[[["span"]],["self"]]],[11,"default","","",110,[[],["self"]]],[11,"from","","",110,[[["span"]],["self"]]],[11,"clone","","",111,[[["self"]],["gt"]]],[11,"new","","",111,[[["span"]],["self"]]],[11,"default","","",111,[[],["self"]]],[11,"from","","",111,[[["span"]],["self"]]],[11,"clone","","",112,[[["self"]],["le"]]],[11,"new","","",112,[[["span"]],["self"]]],[11,"default","","",112,[[],["self"]]],[11,"from","","",112,[[["span"]],["self"]]],[11,"clone","","",113,[[["self"]],["lt"]]],[11,"new","","",113,[[["span"]],["self"]]],[11,"default","","",113,[[],["self"]]],[11,"from","","",113,[[["span"]],["self"]]],[11,"clone","","",114,[[["self"]],["muleq"]]],[11,"new","","",114,[[["span"]],["self"]]],[11,"default","","",114,[[],["self"]]],[11,"from","","",114,[[["span"]],["self"]]],[11,"clone","","",115,[[["self"]],["ne"]]],[11,"new","","",115,[[["span"]],["self"]]],[11,"default","","",115,[[],["self"]]],[11,"from","","",115,[[["span"]],["self"]]],[11,"clone","","",116,[[["self"]],["or"]]],[11,"new","","",116,[[["span"]],["self"]]],[11,"default","","",116,[[],["self"]]],[11,"from","","",116,[[["span"]],["self"]]],[11,"clone","","",117,[[["self"]],["oreq"]]],[11,"new","","",117,[[["span"]],["self"]]],[11,"default","","",117,[[],["self"]]],[11,"from","","",117,[[["span"]],["self"]]],[11,"clone","","",118,[[["self"]],["oror"]]],[11,"new","","",118,[[["span"]],["self"]]],[11,"default","","",118,[[],["self"]]],[11,"from","","",118,[[["span"]],["self"]]],[11,"clone","","",119,[[["self"]],["pound"]]],[11,"new","","",119,[[["span"]],["self"]]],[11,"default","","",119,[[],["self"]]],[11,"from","","",119,[[["span"]],["self"]]],[11,"clone","","",120,[[["self"]],["question"]]],[11,"new","","",120,[[["span"]],["self"]]],[11,"default","","",120,[[],["self"]]],[11,"from","","",120,[[["span"]],["self"]]],[11,"clone","","",121,[[["self"]],["rarrow"]]],[11,"new","","",121,[[["span"]],["self"]]],[11,"default","","",121,[[],["self"]]],[11,"from","","",121,[[["span"]],["self"]]],[11,"clone","","",122,[[["self"]],["larrow"]]],[11,"new","","",122,[[["span"]],["self"]]],[11,"default","","",122,[[],["self"]]],[11,"from","","",122,[[["span"]],["self"]]],[11,"clone","","",123,[[["self"]],["rem"]]],[11,"new","","",123,[[["span"]],["self"]]],[11,"default","","",123,[[],["self"]]],[11,"from","","",123,[[["span"]],["self"]]],[11,"clone","","",124,[[["self"]],["remeq"]]],[11,"new","","",124,[[["span"]],["self"]]],[11,"default","","",124,[[],["self"]]],[11,"from","","",124,[[["span"]],["self"]]],[11,"clone","","",125,[[["self"]],["fatarrow"]]],[11,"new","","",125,[[["span"]],["self"]]],[11,"default","","",125,[[],["self"]]],[11,"from","","",125,[[["span"]],["self"]]],[11,"clone","","",126,[[["self"]],["semi"]]],[11,"new","","",126,[[["span"]],["self"]]],[11,"default","","",126,[[],["self"]]],[11,"from","","",126,[[["span"]],["self"]]],[11,"clone","","",127,[[["self"]],["shl"]]],[11,"new","","",127,[[["span"]],["self"]]],[11,"default","","",127,[[],["self"]]],[11,"from","","",127,[[["span"]],["self"]]],[11,"clone","","",128,[[["self"]],["shleq"]]],[11,"new","","",128,[[["span"]],["self"]]],[11,"default","","",128,[[],["self"]]],[11,"from","","",128,[[["span"]],["self"]]],[11,"clone","","",129,[[["self"]],["shr"]]],[11,"new","","",129,[[["span"]],["self"]]],[11,"default","","",129,[[],["self"]]],[11,"from","","",129,[[["span"]],["self"]]],[11,"clone","","",130,[[["self"]],["shreq"]]],[11,"new","","",130,[[["span"]],["self"]]],[11,"default","","",130,[[],["self"]]],[11,"from","","",130,[[["span"]],["self"]]],[11,"clone","","",131,[[["self"]],["star"]]],[11,"new","","",131,[[["span"]],["self"]]],[11,"default","","",131,[[],["self"]]],[11,"from","","",131,[[["span"]],["self"]]],[11,"clone","","",132,[[["self"]],["sub"]]],[11,"new","","",132,[[["span"]],["self"]]],[11,"default","","",132,[[],["self"]]],[11,"from","","",132,[[["span"]],["self"]]],[11,"clone","","",133,[[["self"]],["subeq"]]],[11,"new","","",133,[[["span"]],["self"]]],[11,"default","","",133,[[],["self"]]],[11,"from","","",133,[[["span"]],["self"]]],[11,"to_tokens","","",89,[[["self"],["tokenstream"]]]],[11,"parse","","",89,[[["cursor"]],["presult",["add"]]]],[11,"description","","",89,[[],["option",["str"]]]],[11,"to_tokens","","",90,[[["self"],["tokenstream"]]]],[11,"parse","","",90,[[["cursor"]],["presult",["addeq"]]]],[11,"description","","",90,[[],["option",["str"]]]],[11,"to_tokens","","",91,[[["self"],["tokenstream"]]]],[11,"parse","","",91,[[["cursor"]],["presult",["and"]]]],[11,"description","","",91,[[],["option",["str"]]]],[11,"to_tokens","","",92,[[["self"],["tokenstream"]]]],[11,"parse","","",92,[[["cursor"]],["presult",["andand"]]]],[11,"description","","",92,[[],["option",["str"]]]],[11,"to_tokens","","",93,[[["self"],["tokenstream"]]]],[11,"parse","","",93,[[["cursor"]],["presult",["andeq"]]]],[11,"description","","",93,[[],["option",["str"]]]],[11,"to_tokens","","",94,[[["self"],["tokenstream"]]]],[11,"parse","","",94,[[["cursor"]],["presult",["at"]]]],[11,"description","","",94,[[],["option",["str"]]]],[11,"to_tokens","","",95,[[["self"],["tokenstream"]]]],[11,"parse","","",95,[[["cursor"]],["presult",["bang"]]]],[11,"description","","",95,[[],["option",["str"]]]],[11,"to_tokens","","",96,[[["self"],["tokenstream"]]]],[11,"parse","","",96,[[["cursor"]],["presult",["caret"]]]],[11,"description","","",96,[[],["option",["str"]]]],[11,"to_tokens","","",97,[[["self"],["tokenstream"]]]],[11,"parse","","",97,[[["cursor"]],["presult",["careteq"]]]],[11,"description","","",97,[[],["option",["str"]]]],[11,"to_tokens","","",98,[[["self"],["tokenstream"]]]],[11,"parse","","",98,[[["cursor"]],["presult",["colon"]]]],[11,"description","","",98,[[],["option",["str"]]]],[11,"to_tokens","","",99,[[["self"],["tokenstream"]]]],[11,"parse","","",99,[[["cursor"]],["presult",["colon2"]]]],[11,"description","","",99,[[],["option",["str"]]]],[11,"to_tokens","","",100,[[["self"],["tokenstream"]]]],[11,"parse","","",100,[[["cursor"]],["presult",["comma"]]]],[11,"description","","",100,[[],["option",["str"]]]],[11,"to_tokens","","",101,[[["self"],["tokenstream"]]]],[11,"parse","","",101,[[["cursor"]],["presult",["div"]]]],[11,"description","","",101,[[],["option",["str"]]]],[11,"to_tokens","","",102,[[["self"],["tokenstream"]]]],[11,"parse","","",102,[[["cursor"]],["presult",["diveq"]]]],[11,"description","","",102,[[],["option",["str"]]]],[11,"to_tokens","","",103,[[["self"],["tokenstream"]]]],[11,"parse","","",103,[[["cursor"]],["presult",["dollar"]]]],[11,"description","","",103,[[],["option",["str"]]]],[11,"to_tokens","","",104,[[["self"],["tokenstream"]]]],[11,"parse","","",104,[[["cursor"]],["presult",["dot"]]]],[11,"description","","",104,[[],["option",["str"]]]],[11,"to_tokens","","",105,[[["self"],["tokenstream"]]]],[11,"parse","","",105,[[["cursor"]],["presult",["dot2"]]]],[11,"description","","",105,[[],["option",["str"]]]],[11,"to_tokens","","",106,[[["self"],["tokenstream"]]]],[11,"parse","","",106,[[["cursor"]],["presult",["dot3"]]]],[11,"description","","",106,[[],["option",["str"]]]],[11,"to_tokens","","",107,[[["self"],["tokenstream"]]]],[11,"parse","","",107,[[["cursor"]],["presult",["dotdoteq"]]]],[11,"description","","",107,[[],["option",["str"]]]],[11,"to_tokens","","",108,[[["self"],["tokenstream"]]]],[11,"parse","","",108,[[["cursor"]],["presult",["eq"]]]],[11,"description","","",108,[[],["option",["str"]]]],[11,"to_tokens","","",109,[[["self"],["tokenstream"]]]],[11,"parse","","",109,[[["cursor"]],["presult",["eqeq"]]]],[11,"description","","",109,[[],["option",["str"]]]],[11,"to_tokens","","",110,[[["self"],["tokenstream"]]]],[11,"parse","","",110,[[["cursor"]],["presult",["ge"]]]],[11,"description","","",110,[[],["option",["str"]]]],[11,"to_tokens","","",111,[[["self"],["tokenstream"]]]],[11,"parse","","",111,[[["cursor"]],["presult",["gt"]]]],[11,"description","","",111,[[],["option",["str"]]]],[11,"to_tokens","","",112,[[["self"],["tokenstream"]]]],[11,"parse","","",112,[[["cursor"]],["presult",["le"]]]],[11,"description","","",112,[[],["option",["str"]]]],[11,"to_tokens","","",113,[[["self"],["tokenstream"]]]],[11,"parse","","",113,[[["cursor"]],["presult",["lt"]]]],[11,"description","","",113,[[],["option",["str"]]]],[11,"to_tokens","","",114,[[["self"],["tokenstream"]]]],[11,"parse","","",114,[[["cursor"]],["presult",["muleq"]]]],[11,"description","","",114,[[],["option",["str"]]]],[11,"to_tokens","","",115,[[["self"],["tokenstream"]]]],[11,"parse","","",115,[[["cursor"]],["presult",["ne"]]]],[11,"description","","",115,[[],["option",["str"]]]],[11,"to_tokens","","",116,[[["self"],["tokenstream"]]]],[11,"parse","","",116,[[["cursor"]],["presult",["or"]]]],[11,"description","","",116,[[],["option",["str"]]]],[11,"to_tokens","","",117,[[["self"],["tokenstream"]]]],[11,"parse","","",117,[[["cursor"]],["presult",["oreq"]]]],[11,"description","","",117,[[],["option",["str"]]]],[11,"to_tokens","","",118,[[["self"],["tokenstream"]]]],[11,"parse","","",118,[[["cursor"]],["presult",["oror"]]]],[11,"description","","",118,[[],["option",["str"]]]],[11,"to_tokens","","",119,[[["self"],["tokenstream"]]]],[11,"parse","","",119,[[["cursor"]],["presult",["pound"]]]],[11,"description","","",119,[[],["option",["str"]]]],[11,"to_tokens","","",120,[[["self"],["tokenstream"]]]],[11,"parse","","",120,[[["cursor"]],["presult",["question"]]]],[11,"description","","",120,[[],["option",["str"]]]],[11,"to_tokens","","",121,[[["self"],["tokenstream"]]]],[11,"parse","","",121,[[["cursor"]],["presult",["rarrow"]]]],[11,"description","","",121,[[],["option",["str"]]]],[11,"to_tokens","","",122,[[["self"],["tokenstream"]]]],[11,"parse","","",122,[[["cursor"]],["presult",["larrow"]]]],[11,"description","","",122,[[],["option",["str"]]]],[11,"to_tokens","","",123,[[["self"],["tokenstream"]]]],[11,"parse","","",123,[[["cursor"]],["presult",["rem"]]]],[11,"description","","",123,[[],["option",["str"]]]],[11,"to_tokens","","",124,[[["self"],["tokenstream"]]]],[11,"parse","","",124,[[["cursor"]],["presult",["remeq"]]]],[11,"description","","",124,[[],["option",["str"]]]],[11,"to_tokens","","",125,[[["self"],["tokenstream"]]]],[11,"parse","","",125,[[["cursor"]],["presult",["fatarrow"]]]],[11,"description","","",125,[[],["option",["str"]]]],[11,"to_tokens","","",126,[[["self"],["tokenstream"]]]],[11,"parse","","",126,[[["cursor"]],["presult",["semi"]]]],[11,"description","","",126,[[],["option",["str"]]]],[11,"to_tokens","","",127,[[["self"],["tokenstream"]]]],[11,"parse","","",127,[[["cursor"]],["presult",["shl"]]]],[11,"description","","",127,[[],["option",["str"]]]],[11,"to_tokens","","",128,[[["self"],["tokenstream"]]]],[11,"parse","","",128,[[["cursor"]],["presult",["shleq"]]]],[11,"description","","",128,[[],["option",["str"]]]],[11,"to_tokens","","",129,[[["self"],["tokenstream"]]]],[11,"parse","","",129,[[["cursor"]],["presult",["shr"]]]],[11,"description","","",129,[[],["option",["str"]]]],[11,"to_tokens","","",130,[[["self"],["tokenstream"]]]],[11,"parse","","",130,[[["cursor"]],["presult",["shreq"]]]],[11,"description","","",130,[[],["option",["str"]]]],[11,"to_tokens","","",131,[[["self"],["tokenstream"]]]],[11,"parse","","",131,[[["cursor"]],["presult",["star"]]]],[11,"description","","",131,[[],["option",["str"]]]],[11,"to_tokens","","",132,[[["self"],["tokenstream"]]]],[11,"parse","","",132,[[["cursor"]],["presult",["sub"]]]],[11,"description","","",132,[[],["option",["str"]]]],[11,"to_tokens","","",133,[[["self"],["tokenstream"]]]],[11,"parse","","",133,[[["cursor"]],["presult",["subeq"]]]],[11,"description","","",133,[[],["option",["str"]]]],[11,"clone","","",134,[[["self"]],["brace"]]],[11,"default","","",134,[[],["self"]]],[11,"surround","","",134,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",134,[[["cursor"],["f"]],["presult"]]],[11,"from","","",134,[[["span"]],["self"]]],[11,"clone","","",135,[[["self"]],["bracket"]]],[11,"default","","",135,[[],["self"]]],[11,"surround","","",135,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",135,[[["cursor"],["f"]],["presult"]]],[11,"from","","",135,[[["span"]],["self"]]],[11,"clone","","",136,[[["self"]],["paren"]]],[11,"default","","",136,[[],["self"]]],[11,"surround","","",136,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",136,[[["cursor"],["f"]],["presult"]]],[11,"from","","",136,[[["span"]],["self"]]],[11,"clone","","",137,[[["self"]],["group"]]],[11,"default","","",137,[[],["self"]]],[11,"surround","","",137,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",137,[[["cursor"],["f"]],["presult"]]],[11,"from","","",137,[[["span"]],["self"]]],[11,"clone","","",138,[[["self"]],["as"]]],[11,"default","","",138,[[],["self"]]],[11,"to_tokens","","",138,[[["self"],["tokenstream"]]]],[11,"parse","","",138,[[["cursor"]],["presult",["as"]]]],[11,"description","","",138,[[],["option",["str"]]]],[11,"from","","",138,[[["span"]],["self"]]],[11,"clone","","",139,[[["self"]],["async"]]],[11,"default","","",139,[[],["self"]]],[11,"to_tokens","","",139,[[["self"],["tokenstream"]]]],[11,"parse","","",139,[[["cursor"]],["presult",["async"]]]],[11,"description","","",139,[[],["option",["str"]]]],[11,"from","","",139,[[["span"]],["self"]]],[11,"clone","","",140,[[["self"]],["auto"]]],[11,"default","","",140,[[],["self"]]],[11,"to_tokens","","",140,[[["self"],["tokenstream"]]]],[11,"parse","","",140,[[["cursor"]],["presult",["auto"]]]],[11,"description","","",140,[[],["option",["str"]]]],[11,"from","","",140,[[["span"]],["self"]]],[11,"clone","","",141,[[["self"]],["box"]]],[11,"default","","",141,[[],["self"]]],[11,"to_tokens","","",141,[[["self"],["tokenstream"]]]],[11,"parse","","",141,[[["cursor"]],["presult",["box"]]]],[11,"description","","",141,[[],["option",["str"]]]],[11,"from","","",141,[[["span"]],["self"]]],[11,"clone","","",142,[[["self"]],["break"]]],[11,"default","","",142,[[],["self"]]],[11,"to_tokens","","",142,[[["self"],["tokenstream"]]]],[11,"parse","","",142,[[["cursor"]],["presult",["break"]]]],[11,"description","","",142,[[],["option",["str"]]]],[11,"from","","",142,[[["span"]],["self"]]],[11,"clone","","",143,[[["self"]],["capself"]]],[11,"default","","",143,[[],["self"]]],[11,"to_tokens","","",143,[[["self"],["tokenstream"]]]],[11,"parse","","",143,[[["cursor"]],["presult",["capself"]]]],[11,"description","","",143,[[],["option",["str"]]]],[11,"from","","",143,[[["span"]],["self"]]],[11,"clone","","",144,[[["self"]],["catch"]]],[11,"default","","",144,[[],["self"]]],[11,"to_tokens","","",144,[[["self"],["tokenstream"]]]],[11,"parse","","",144,[[["cursor"]],["presult",["catch"]]]],[11,"description","","",144,[[],["option",["str"]]]],[11,"from","","",144,[[["span"]],["self"]]],[11,"clone","","",145,[[["self"]],["const"]]],[11,"default","","",145,[[],["self"]]],[11,"to_tokens","","",145,[[["self"],["tokenstream"]]]],[11,"parse","","",145,[[["cursor"]],["presult",["const"]]]],[11,"description","","",145,[[],["option",["str"]]]],[11,"from","","",145,[[["span"]],["self"]]],[11,"clone","","",146,[[["self"]],["continue"]]],[11,"default","","",146,[[],["self"]]],[11,"to_tokens","","",146,[[["self"],["tokenstream"]]]],[11,"parse","","",146,[[["cursor"]],["presult",["continue"]]]],[11,"description","","",146,[[],["option",["str"]]]],[11,"from","","",146,[[["span"]],["self"]]],[11,"clone","","",147,[[["self"]],["crate"]]],[11,"default","","",147,[[],["self"]]],[11,"to_tokens","","",147,[[["self"],["tokenstream"]]]],[11,"parse","","",147,[[["cursor"]],["presult",["crate"]]]],[11,"description","","",147,[[],["option",["str"]]]],[11,"from","","",147,[[["span"]],["self"]]],[11,"clone","","",148,[[["self"]],["default"]]],[11,"default","","",148,[[],["self"]]],[11,"to_tokens","","",148,[[["self"],["tokenstream"]]]],[11,"parse","","",148,[[["cursor"]],["presult",["default"]]]],[11,"description","","",148,[[],["option",["str"]]]],[11,"from","","",148,[[["span"]],["self"]]],[11,"clone","","",149,[[["self"]],["do"]]],[11,"default","","",149,[[],["self"]]],[11,"to_tokens","","",149,[[["self"],["tokenstream"]]]],[11,"parse","","",149,[[["cursor"]],["presult",["do"]]]],[11,"description","","",149,[[],["option",["str"]]]],[11,"from","","",149,[[["span"]],["self"]]],[11,"clone","","",150,[[["self"]],["dyn"]]],[11,"default","","",150,[[],["self"]]],[11,"to_tokens","","",150,[[["self"],["tokenstream"]]]],[11,"parse","","",150,[[["cursor"]],["presult",["dyn"]]]],[11,"description","","",150,[[],["option",["str"]]]],[11,"from","","",150,[[["span"]],["self"]]],[11,"clone","","",151,[[["self"]],["else"]]],[11,"default","","",151,[[],["self"]]],[11,"to_tokens","","",151,[[["self"],["tokenstream"]]]],[11,"parse","","",151,[[["cursor"]],["presult",["else"]]]],[11,"description","","",151,[[],["option",["str"]]]],[11,"from","","",151,[[["span"]],["self"]]],[11,"clone","","",152,[[["self"]],["enum"]]],[11,"default","","",152,[[],["self"]]],[11,"to_tokens","","",152,[[["self"],["tokenstream"]]]],[11,"parse","","",152,[[["cursor"]],["presult",["enum"]]]],[11,"description","","",152,[[],["option",["str"]]]],[11,"from","","",152,[[["span"]],["self"]]],[11,"clone","","",153,[[["self"]],["extern"]]],[11,"default","","",153,[[],["self"]]],[11,"to_tokens","","",153,[[["self"],["tokenstream"]]]],[11,"parse","","",153,[[["cursor"]],["presult",["extern"]]]],[11,"description","","",153,[[],["option",["str"]]]],[11,"from","","",153,[[["span"]],["self"]]],[11,"clone","","",154,[[["self"]],["fn"]]],[11,"default","","",154,[[],["self"]]],[11,"to_tokens","","",154,[[["self"],["tokenstream"]]]],[11,"parse","","",154,[[["cursor"]],["presult",["fn"]]]],[11,"description","","",154,[[],["option",["str"]]]],[11,"from","","",154,[[["span"]],["self"]]],[11,"clone","","",155,[[["self"]],["for"]]],[11,"default","","",155,[[],["self"]]],[11,"to_tokens","","",155,[[["self"],["tokenstream"]]]],[11,"parse","","",155,[[["cursor"]],["presult",["for"]]]],[11,"description","","",155,[[],["option",["str"]]]],[11,"from","","",155,[[["span"]],["self"]]],[11,"clone","","",156,[[["self"]],["if"]]],[11,"default","","",156,[[],["self"]]],[11,"to_tokens","","",156,[[["self"],["tokenstream"]]]],[11,"parse","","",156,[[["cursor"]],["presult",["if"]]]],[11,"description","","",156,[[],["option",["str"]]]],[11,"from","","",156,[[["span"]],["self"]]],[11,"clone","","",157,[[["self"]],["impl"]]],[11,"default","","",157,[[],["self"]]],[11,"to_tokens","","",157,[[["self"],["tokenstream"]]]],[11,"parse","","",157,[[["cursor"]],["presult",["impl"]]]],[11,"description","","",157,[[],["option",["str"]]]],[11,"from","","",157,[[["span"]],["self"]]],[11,"clone","","",158,[[["self"]],["in"]]],[11,"default","","",158,[[],["self"]]],[11,"to_tokens","","",158,[[["self"],["tokenstream"]]]],[11,"parse","","",158,[[["cursor"]],["presult",["in"]]]],[11,"description","","",158,[[],["option",["str"]]]],[11,"from","","",158,[[["span"]],["self"]]],[11,"clone","","",159,[[["self"]],["let"]]],[11,"default","","",159,[[],["self"]]],[11,"to_tokens","","",159,[[["self"],["tokenstream"]]]],[11,"parse","","",159,[[["cursor"]],["presult",["let"]]]],[11,"description","","",159,[[],["option",["str"]]]],[11,"from","","",159,[[["span"]],["self"]]],[11,"clone","","",160,[[["self"]],["loop"]]],[11,"default","","",160,[[],["self"]]],[11,"to_tokens","","",160,[[["self"],["tokenstream"]]]],[11,"parse","","",160,[[["cursor"]],["presult",["loop"]]]],[11,"description","","",160,[[],["option",["str"]]]],[11,"from","","",160,[[["span"]],["self"]]],[11,"clone","","",161,[[["self"]],["macro"]]],[11,"default","","",161,[[],["self"]]],[11,"to_tokens","","",161,[[["self"],["tokenstream"]]]],[11,"parse","","",161,[[["cursor"]],["presult",["macro"]]]],[11,"description","","",161,[[],["option",["str"]]]],[11,"from","","",161,[[["span"]],["self"]]],[11,"clone","","",162,[[["self"]],["match"]]],[11,"default","","",162,[[],["self"]]],[11,"to_tokens","","",162,[[["self"],["tokenstream"]]]],[11,"parse","","",162,[[["cursor"]],["presult",["match"]]]],[11,"description","","",162,[[],["option",["str"]]]],[11,"from","","",162,[[["span"]],["self"]]],[11,"clone","","",163,[[["self"]],["mod"]]],[11,"default","","",163,[[],["self"]]],[11,"to_tokens","","",163,[[["self"],["tokenstream"]]]],[11,"parse","","",163,[[["cursor"]],["presult",["mod"]]]],[11,"description","","",163,[[],["option",["str"]]]],[11,"from","","",163,[[["span"]],["self"]]],[11,"clone","","",164,[[["self"]],["move"]]],[11,"default","","",164,[[],["self"]]],[11,"to_tokens","","",164,[[["self"],["tokenstream"]]]],[11,"parse","","",164,[[["cursor"]],["presult",["move"]]]],[11,"description","","",164,[[],["option",["str"]]]],[11,"from","","",164,[[["span"]],["self"]]],[11,"clone","","",165,[[["self"]],["mut"]]],[11,"default","","",165,[[],["self"]]],[11,"to_tokens","","",165,[[["self"],["tokenstream"]]]],[11,"parse","","",165,[[["cursor"]],["presult",["mut"]]]],[11,"description","","",165,[[],["option",["str"]]]],[11,"from","","",165,[[["span"]],["self"]]],[11,"clone","","",166,[[["self"]],["pub"]]],[11,"default","","",166,[[],["self"]]],[11,"to_tokens","","",166,[[["self"],["tokenstream"]]]],[11,"parse","","",166,[[["cursor"]],["presult",["pub"]]]],[11,"description","","",166,[[],["option",["str"]]]],[11,"from","","",166,[[["span"]],["self"]]],[11,"clone","","",167,[[["self"]],["ref"]]],[11,"default","","",167,[[],["self"]]],[11,"to_tokens","","",167,[[["self"],["tokenstream"]]]],[11,"parse","","",167,[[["cursor"]],["presult",["ref"]]]],[11,"description","","",167,[[],["option",["str"]]]],[11,"from","","",167,[[["span"]],["self"]]],[11,"clone","","",168,[[["self"]],["return"]]],[11,"default","","",168,[[],["self"]]],[11,"to_tokens","","",168,[[["self"],["tokenstream"]]]],[11,"parse","","",168,[[["cursor"]],["presult",["return"]]]],[11,"description","","",168,[[],["option",["str"]]]],[11,"from","","",168,[[["span"]],["self"]]],[11,"clone","","",169,[[["self"]],["self_"]]],[11,"default","","",169,[[],["self"]]],[11,"to_tokens","","",169,[[["self"],["tokenstream"]]]],[11,"parse","","",169,[[["cursor"]],["presult",["self_"]]]],[11,"description","","",169,[[],["option",["str"]]]],[11,"from","","",169,[[["span"]],["self"]]],[11,"clone","","",170,[[["self"]],["static"]]],[11,"default","","",170,[[],["self"]]],[11,"to_tokens","","",170,[[["self"],["tokenstream"]]]],[11,"parse","","",170,[[["cursor"]],["presult",["static"]]]],[11,"description","","",170,[[],["option",["str"]]]],[11,"from","","",170,[[["span"]],["self"]]],[11,"clone","","",171,[[["self"]],["struct"]]],[11,"default","","",171,[[],["self"]]],[11,"to_tokens","","",171,[[["self"],["tokenstream"]]]],[11,"parse","","",171,[[["cursor"]],["presult",["struct"]]]],[11,"description","","",171,[[],["option",["str"]]]],[11,"from","","",171,[[["span"]],["self"]]],[11,"clone","","",172,[[["self"]],["super"]]],[11,"default","","",172,[[],["self"]]],[11,"to_tokens","","",172,[[["self"],["tokenstream"]]]],[11,"parse","","",172,[[["cursor"]],["presult",["super"]]]],[11,"description","","",172,[[],["option",["str"]]]],[11,"from","","",172,[[["span"]],["self"]]],[11,"clone","","",173,[[["self"]],["trait"]]],[11,"default","","",173,[[],["self"]]],[11,"to_tokens","","",173,[[["self"],["tokenstream"]]]],[11,"parse","","",173,[[["cursor"]],["presult",["trait"]]]],[11,"description","","",173,[[],["option",["str"]]]],[11,"from","","",173,[[["span"]],["self"]]],[11,"clone","","",174,[[["self"]],["type"]]],[11,"default","","",174,[[],["self"]]],[11,"to_tokens","","",174,[[["self"],["tokenstream"]]]],[11,"parse","","",174,[[["cursor"]],["presult",["type"]]]],[11,"description","","",174,[[],["option",["str"]]]],[11,"from","","",174,[[["span"]],["self"]]],[11,"clone","","",175,[[["self"]],["union"]]],[11,"default","","",175,[[],["self"]]],[11,"to_tokens","","",175,[[["self"],["tokenstream"]]]],[11,"parse","","",175,[[["cursor"]],["presult",["union"]]]],[11,"description","","",175,[[],["option",["str"]]]],[11,"from","","",175,[[["span"]],["self"]]],[11,"clone","","",176,[[["self"]],["unsafe"]]],[11,"default","","",176,[[],["self"]]],[11,"to_tokens","","",176,[[["self"],["tokenstream"]]]],[11,"parse","","",176,[[["cursor"]],["presult",["unsafe"]]]],[11,"description","","",176,[[],["option",["str"]]]],[11,"from","","",176,[[["span"]],["self"]]],[11,"clone","","",177,[[["self"]],["use"]]],[11,"default","","",177,[[],["self"]]],[11,"to_tokens","","",177,[[["self"],["tokenstream"]]]],[11,"parse","","",177,[[["cursor"]],["presult",["use"]]]],[11,"description","","",177,[[],["option",["str"]]]],[11,"from","","",177,[[["span"]],["self"]]],[11,"clone","","",178,[[["self"]],["where"]]],[11,"default","","",178,[[],["self"]]],[11,"to_tokens","","",178,[[["self"],["tokenstream"]]]],[11,"parse","","",178,[[["cursor"]],["presult",["where"]]]],[11,"description","","",178,[[],["option",["str"]]]],[11,"from","","",178,[[["span"]],["self"]]],[11,"clone","","",179,[[["self"]],["while"]]],[11,"default","","",179,[[],["self"]]],[11,"to_tokens","","",179,[[["self"],["tokenstream"]]]],[11,"parse","","",179,[[["cursor"]],["presult",["while"]]]],[11,"description","","",179,[[],["option",["str"]]]],[11,"from","","",179,[[["span"]],["self"]]],[11,"clone","","",180,[[["self"]],["yield"]]],[11,"default","","",180,[[],["self"]]],[11,"to_tokens","","",180,[[["self"],["tokenstream"]]]],[11,"parse","","",180,[[["cursor"]],["presult",["yield"]]]],[11,"description","","",180,[[],["option",["str"]]]],[11,"from","","",180,[[["span"]],["self"]]],[11,"from","syn","",181,[[["self_"]],["ident"]]],[11,"from","","",181,[[["capself"]],["ident"]]],[11,"from","","",181,[[["super"]],["ident"]]],[11,"from","","",181,[[["crate"]],["ident"]]],[11,"from","","",181,[[["extern"]],["ident"]]],[11,"parse_inner","","",0,[[["cursor"]],["presult"]]],[11,"parse_outer","","",0,[[["cursor"]],["presult"]]],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",1,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",2,[[["self"],["tokenstream"]]]],[11,"clone","","",0,[[["self"]],["attribute"]]],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,[[["self"]],["option",["meta"]]]],[11,"clone","","",63,[[["self"]],["attrstyle"]]],[11,"clone","","",64,[[["self"]],["meta"]]],[11,"from","","",64,[[["ident"]],["meta"]]],[11,"clone","","",1,[[["self"]],["metalist"]]],[11,"from","","",64,[[["metalist"]],["meta"]]],[11,"clone","","",2,[[["self"]],["metanamevalue"]]],[11,"from","","",64,[[["metanamevalue"]],["meta"]]],[11,"to_tokens","","",64,[[["self"],["tokenstream"]]]],[11,"name","","Returns the identifier that begins this structured meta item.",64,[[["self"]],["ident"]]],[11,"clone","","",65,[[["self"]],["nestedmeta"]]],[11,"from","","",65,[[["meta"]],["nestedmeta"]]],[11,"from","","",65,[[["lit"]],["nestedmeta"]]],[11,"to_tokens","","",65,[[["self"],["tokenstream"]]]],[11,"parse","","",6,[[["cursor"]],["presult"]]],[11,"description","","",6,[[],["option",["str"]]]],[11,"parse","","",4,[[["cursor"]],["presult"]]],[11,"description","","",4,[[],["option",["str"]]]],[11,"parse","","",5,[[["cursor"]],["presult"]]],[11,"description","","",5,[[],["option",["str"]]]],[11,"parse_named","","",3,[[["cursor"]],["presult"]]],[11,"parse_unnamed","","",3,[[["cursor"]],["presult"]]],[11,"parse","","",67,[[["cursor"]],["presult"]]],[11,"description","","",67,[[],["option",["str"]]]],[11,"to_tokens","","",6,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",4,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",5,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",8,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",7,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",9,[[["self"],["tokenstream"]]]],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"clone","","",66,[[["self"]],["fields"]]],[11,"clone","","",4,[[["self"]],["fieldsnamed"]]],[11,"from","","",66,[[["fieldsnamed"]],["fields"]]],[11,"clone","","",5,[[["self"]],["fieldsunnamed"]]],[11,"from","","",66,[[["fieldsunnamed"]],["fields"]]],[11,"to_tokens","","",66,[[["self"],["tokenstream"]]]],[11,"iter","","Get an iterator over the borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,[[["self"]],["iter",["field"]]]],[11,"iter_mut","","Get an iterator over the mutably borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,[[["self"]],["itermut",["field"]]]],[11,"clone","","",3,[[["self"]],["field"]]],[11,"clone","","",67,[[["self"]],["visibility"]]],[11,"clone","","",8,[[["self"]],["vispublic"]]],[11,"from","","",67,[[["vispublic"]],["visibility"]]],[11,"clone","","",7,[[["self"]],["viscrate"]]],[11,"from","","",67,[[["viscrate"]],["visibility"]]],[11,"clone","","",9,[[["self"]],["visrestricted"]]],[11,"from","","",67,[[["visrestricted"]],["visibility"]]],[11,"to_tokens","","",67,[[["self"],["tokenstream"]]]],[11,"parse","","",68,[[["cursor"]],["presult"]]],[11,"description","","",68,[[],["option",["str"]]]],[11,"parse","","",15,[[["cursor"]],["presult"]]],[11,"description","","",15,[[],["option",["str"]]]],[11,"parse","","",16,[[["cursor"]],["presult"]]],[11,"description","","",16,[[],["option",["str"]]]],[11,"parse","","",17,[[["cursor"]],["presult"]]],[11,"description","","",17,[[],["option",["str"]]]],[11,"parse","","",69,[[["cursor"]],["presult"]]],[11,"description","","",69,[[],["option",["str"]]]],[11,"parse","","",20,[[["cursor"]],["presult"]]],[11,"description","","",20,[[],["option",["str"]]]],[11,"to_tokens","","",11,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",10,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",18,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",15,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",12,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",13,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",69,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",20,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",14,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",17,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",16,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",19,[[["self"],["tokenstream"]]]],[11,"clone","","",68,[[["self"]],["expr"]]],[11,"clone","","",182,[[["self"]],["exprbox"]]],[11,"from","","",68,[[["exprbox"]],["expr"]]],[11,"clone","","",183,[[["self"]],["exprinplace"]]],[11,"from","","",68,[[["exprinplace"]],["expr"]]],[11,"clone","","",184,[[["self"]],["exprarray"]]],[11,"from","","",68,[[["exprarray"]],["expr"]]],[11,"clone","","",11,[[["self"]],["exprcall"]]],[11,"from","","",68,[[["exprcall"]],["expr"]]],[11,"clone","","",185,[[["self"]],["exprmethodcall"]]],[11,"from","","",68,[[["exprmethodcall"]],["expr"]]],[11,"clone","","",186,[[["self"]],["exprtuple"]]],[11,"from","","",68,[[["exprtuple"]],["expr"]]],[11,"clone","","",10,[[["self"]],["exprbinary"]]],[11,"from","","",68,[[["exprbinary"]],["expr"]]],[11,"clone","","",18,[[["self"]],["exprunary"]]],[11,"from","","",68,[[["exprunary"]],["expr"]]],[11,"clone","","",15,[[["self"]],["exprlit"]]],[11,"from","","",68,[[["exprlit"]],["expr"]]],[11,"clone","","",12,[[["self"]],["exprcast"]]],[11,"from","","",68,[[["exprcast"]],["expr"]]],[11,"clone","","",187,[[["self"]],["exprtype"]]],[11,"from","","",68,[[["exprtype"]],["expr"]]],[11,"clone","","",188,[[["self"]],["exprif"]]],[11,"from","","",68,[[["exprif"]],["expr"]]],[11,"clone","","",189,[[["self"]],["expriflet"]]],[11,"from","","",68,[[["expriflet"]],["expr"]]],[11,"clone","","",190,[[["self"]],["exprwhile"]]],[11,"from","","",68,[[["exprwhile"]],["expr"]]],[11,"clone","","",191,[[["self"]],["exprwhilelet"]]],[11,"from","","",68,[[["exprwhilelet"]],["expr"]]],[11,"clone","","",192,[[["self"]],["exprforloop"]]],[11,"from","","",68,[[["exprforloop"]],["expr"]]],[11,"clone","","",193,[[["self"]],["exprloop"]]],[11,"from","","",68,[[["exprloop"]],["expr"]]],[11,"clone","","",194,[[["self"]],["exprmatch"]]],[11,"from","","",68,[[["exprmatch"]],["expr"]]],[11,"clone","","",195,[[["self"]],["exprclosure"]]],[11,"from","","",68,[[["exprclosure"]],["expr"]]],[11,"clone","","",196,[[["self"]],["exprunsafe"]]],[11,"from","","",68,[[["exprunsafe"]],["expr"]]],[11,"clone","","",197,[[["self"]],["exprblock"]]],[11,"from","","",68,[[["exprblock"]],["expr"]]],[11,"clone","","",198,[[["self"]],["exprassign"]]],[11,"from","","",68,[[["exprassign"]],["expr"]]],[11,"clone","","",199,[[["self"]],["exprassignop"]]],[11,"from","","",68,[[["exprassignop"]],["expr"]]],[11,"clone","","",13,[[["self"]],["exprfield"]]],[11,"from","","",68,[[["exprfield"]],["expr"]]],[11,"clone","","",14,[[["self"]],["exprindex"]]],[11,"from","","",68,[[["exprindex"]],["expr"]]],[11,"clone","","",200,[[["self"]],["exprrange"]]],[11,"from","","",68,[[["exprrange"]],["expr"]]],[11,"clone","","",17,[[["self"]],["exprpath"]]],[11,"from","","",68,[[["exprpath"]],["expr"]]],[11,"clone","","",201,[[["self"]],["exprreference"]]],[11,"from","","",68,[[["exprreference"]],["expr"]]],[11,"clone","","",202,[[["self"]],["exprbreak"]]],[11,"from","","",68,[[["exprbreak"]],["expr"]]],[11,"clone","","",203,[[["self"]],["exprcontinue"]]],[11,"from","","",68,[[["exprcontinue"]],["expr"]]],[11,"clone","","",204,[[["self"]],["exprreturn"]]],[11,"from","","",68,[[["exprreturn"]],["expr"]]],[11,"clone","","",205,[[["self"]],["exprmacro"]]],[11,"from","","",68,[[["exprmacro"]],["expr"]]],[11,"clone","","",206,[[["self"]],["exprstruct"]]],[11,"from","","",68,[[["exprstruct"]],["expr"]]],[11,"clone","","",207,[[["self"]],["exprrepeat"]]],[11,"from","","",68,[[["exprrepeat"]],["expr"]]],[11,"clone","","",16,[[["self"]],["exprparen"]]],[11,"from","","",68,[[["exprparen"]],["expr"]]],[11,"clone","","",208,[[["self"]],["exprgroup"]]],[11,"from","","",68,[[["exprgroup"]],["expr"]]],[11,"clone","","",209,[[["self"]],["exprtry"]]],[11,"from","","",68,[[["exprtry"]],["expr"]]],[11,"clone","","",210,[[["self"]],["exprcatch"]]],[11,"from","","",68,[[["exprcatch"]],["expr"]]],[11,"clone","","",211,[[["self"]],["expryield"]]],[11,"from","","",68,[[["expryield"]],["expr"]]],[11,"clone","","",19,[[["self"]],["exprverbatim"]]],[11,"from","","",68,[[["exprverbatim"]],["expr"]]],[11,"to_tokens","","",68,[[["self"],["tokenstream"]]]],[11,"clone","","",69,[[["self"]],["member"]]],[11,"clone","","",20,[[["self"]],["index"]]],[11,"from","","",20,[[["usize"]],["index"]]],[11,"parse","","",23,[[["cursor"]],["presult"]]],[11,"description","","",23,[[],["option",["str"]]]],[11,"parse","","",70,[[["cursor"]],["presult"]]],[11,"description","","",70,[[],["option",["str"]]]],[11,"parse","","",24,[[["cursor"]],["presult"]]],[11,"description","","",24,[[],["option",["str"]]]],[11,"parse","","",21,[[["cursor"]],["presult"]]],[11,"description","","",21,[[],["option",["str"]]]],[11,"parse","","",29,[[["cursor"]],["presult"]]],[11,"description","","",29,[[],["option",["str"]]]],[11,"parse","","",72,[[["cursor"]],["presult"]]],[11,"description","","",72,[[],["option",["str"]]]],[11,"parse","","",28,[[["cursor"]],["presult"]]],[11,"description","","",28,[[],["option",["str"]]]],[11,"parse","","",71,[[["cursor"]],["presult"]]],[11,"description","","",71,[[],["option",["str"]]]],[11,"parse","","",22,[[["cursor"]],["presult"]]],[11,"description","","",22,[[],["option",["str"]]]],[11,"parse","","",30,[[["cursor"]],["presult"]]],[11,"description","","",30,[[],["option",["str"]]]],[11,"parse","","",73,[[["cursor"]],["presult"]]],[11,"description","","",73,[[],["option",["str"]]]],[11,"to_tokens","","",23,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",212,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",213,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",214,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",21,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",24,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",29,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",28,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",71,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",22,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",30,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",27,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",26,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",25,[[["self"],["tokenstream"]]]],[11,"default","","",23,[[],["generics"]]],[11,"clone","","",23,[[["self"]],["generics"]]],[11,"clone","","",70,[[["self"]],["genericparam"]]],[11,"clone","","",29,[[["self"]],["typeparam"]]],[11,"from","","",70,[[["typeparam"]],["genericparam"]]],[11,"clone","","",24,[[["self"]],["lifetimedef"]]],[11,"from","","",70,[[["lifetimedef"]],["genericparam"]]],[11,"clone","","",22,[[["self"]],["constparam"]]],[11,"from","","",70,[[["constparam"]],["genericparam"]]],[11,"to_tokens","","",70,[[["self"],["tokenstream"]]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparamsmut"]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",23,[[["self"]],["whereclause"]]],[11,"clone","","",212,[[["self"]],["implgenerics"]]],[11,"clone","","",213,[[["self"]],["typegenerics"]]],[11,"clone","","",214,[[["self"]],["turbofish"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",23,N],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",213,[[["self"]],["turbofish"]]],[11,"default","","",21,[[],["boundlifetimes"]]],[11,"clone","","",21,[[["self"]],["boundlifetimes"]]],[11,"new","","",24,[[["lifetime"]],["self"]]],[11,"from","","",29,[[["ident"]],["self"]]],[11,"clone","","",72,[[["self"]],["typeparambound"]]],[11,"from","","",72,[[["traitbound"]],["typeparambound"]]],[11,"from","","",72,[[["lifetime"]],["typeparambound"]]],[11,"to_tokens","","",72,[[["self"],["tokenstream"]]]],[11,"clone","","",28,[[["self"]],["traitbound"]]],[11,"clone","","",71,[[["self"]],["traitboundmodifier"]]],[11,"clone","","",30,[[["self"]],["whereclause"]]],[11,"clone","","",73,[[["self"]],["wherepredicate"]]],[11,"clone","","",27,[[["self"]],["predicatetype"]]],[11,"from","","",73,[[["predicatetype"]],["wherepredicate"]]],[11,"clone","","",26,[[["self"]],["predicatelifetime"]]],[11,"from","","",73,[[["predicatelifetime"]],["wherepredicate"]]],[11,"clone","","",25,[[["self"]],["predicateeq"]]],[11,"from","","",73,[[["predicateeq"]],["wherepredicate"]]],[11,"to_tokens","","",73,[[["self"],["tokenstream"]]]],[11,"parse","","",31,[[["cursor"]],["presult"]]],[11,"description","","",31,[[],["option",["str"]]]],[11,"to_tokens","","",31,[[["self"],["tokenstream"]]]],[11,"clone","","",31,[[["self"]],["lifetime"]]],[11,"new","","",31,[[["str"],["span"]],["self"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["lifetime"]],["bool"]]],[11,"partial_cmp","","",31,[[["self"],["lifetime"]],["option",["ordering"]]]],[11,"cmp","","",31,[[["self"],["lifetime"]],["ordering"]]],[11,"hash","","",31,[[["self"],["h"]]]],[11,"parse","","",76,[[["cursor"]],["presult"]]],[11,"description","","",76,[[],["option",["str"]]]],[11,"parse","","",215,[[["cursor"]],["presult"]]],[11,"description","","",215,[[],["option",["str"]]]],[11,"parse","","",216,[[["cursor"]],["presult"]]],[11,"description","","",216,[[],["option",["str"]]]],[11,"parse","","",217,[[["cursor"]],["presult"]]],[11,"description","","",217,[[],["option",["str"]]]],[11,"parse","","",218,[[["cursor"]],["presult"]]],[11,"description","","",218,[[],["option",["str"]]]],[11,"parse","","",219,[[["cursor"]],["presult"]]],[11,"description","","",219,[[],["option",["str"]]]],[11,"parse","","",220,[[["cursor"]],["presult"]]],[11,"description","","",220,[[],["option",["str"]]]],[11,"parse","","",32,[[["cursor"]],["presult"]]],[11,"description","","",32,[[],["option",["str"]]]],[11,"to_tokens","","",215,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",216,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",217,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",218,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",219,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",220,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",32,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",33,[[["self"],["tokenstream"]]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",76,[[["literal"]],["self"]]],[11,"clone","","",76,[[["self"]],["lit"]]],[11,"clone","","",215,[[["self"]],["litstr"]]],[11,"from","","",76,[[["litstr"]],["lit"]]],[11,"clone","","",216,[[["self"]],["litbytestr"]]],[11,"from","","",76,[[["litbytestr"]],["lit"]]],[11,"clone","","",217,[[["self"]],["litbyte"]]],[11,"from","","",76,[[["litbyte"]],["lit"]]],[11,"clone","","",218,[[["self"]],["litchar"]]],[11,"from","","",76,[[["litchar"]],["lit"]]],[11,"clone","","",219,[[["self"]],["litint"]]],[11,"from","","",76,[[["litint"]],["lit"]]],[11,"clone","","",220,[[["self"]],["litfloat"]]],[11,"from","","",76,[[["litfloat"]],["lit"]]],[11,"clone","","",32,[[["self"]],["litbool"]]],[11,"from","","",76,[[["litbool"]],["lit"]]],[11,"clone","","",33,[[["self"]],["litverbatim"]]],[11,"from","","",76,[[["litverbatim"]],["lit"]]],[11,"to_tokens","","",76,[[["self"],["tokenstream"]]]],[11,"new","","",215,[[["str"],["span"]],["self"]]],[11,"value","","",215,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string literal.",215,[[["self"]],["result",["parseerror"]]]],[11,"span","","",215,[[["self"]],["span"]]],[11,"set_span","","",215,[[["self"],["span"]]]],[11,"new","","",216,N],[11,"value","","",216,[[["self"]],["vec",["u8"]]]],[11,"span","","",216,[[["self"]],["span"]]],[11,"set_span","","",216,[[["self"],["span"]]]],[11,"new","","",217,[[["u8"],["span"]],["self"]]],[11,"value","","",217,[[["self"]],["u8"]]],[11,"span","","",217,[[["self"]],["span"]]],[11,"set_span","","",217,[[["self"],["span"]]]],[11,"new","","",218,[[["char"],["span"]],["self"]]],[11,"value","","",218,[[["self"]],["char"]]],[11,"span","","",218,[[["self"]],["span"]]],[11,"set_span","","",218,[[["self"],["span"]]]],[11,"new","","",219,[[["u64"],["intsuffix"],["span"]],["self"]]],[11,"value","","",219,[[["self"]],["u64"]]],[11,"suffix","","",219,[[["self"]],["intsuffix"]]],[11,"span","","",219,[[["self"]],["span"]]],[11,"set_span","","",219,[[["self"],["span"]]]],[11,"new","","",220,[[["f64"],["floatsuffix"],["span"]],["self"]]],[11,"value","","",220,[[["self"]],["f64"]]],[11,"suffix","","",220,[[["self"]],["floatsuffix"]]],[11,"span","","",220,[[["self"]],["span"]]],[11,"set_span","","",220,[[["self"],["span"]]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"set_span","","",33,[[["self"],["span"]]]],[11,"clone","","",77,[[["self"]],["strstyle"]]],[11,"clone","","",75,[[["self"]],["intsuffix"]]],[11,"clone","","",74,[[["self"]],["floatsuffix"]]],[11,"parse","","",34,[[["cursor"]],["presult"]]],[11,"description","","",34,[[],["option",["str"]]]],[11,"to_tokens","","",34,[[["self"],["tokenstream"]]]],[11,"clone","","",34,[[["self"]],["macro"]]],[11,"clone","","",78,[[["self"]],["macrodelimiter"]]],[11,"parse","","",38,[[["cursor"]],["presult"]]],[11,"description","","",38,[[],["option",["str"]]]],[11,"to_tokens","","",38,[[["self"],["tokenstream"]]]],[11,"clone","","",38,[[["self"]],["deriveinput"]]],[11,"clone","","",79,[[["self"]],["data"]]],[11,"clone","","",36,[[["self"]],["datastruct"]]],[11,"from","","",79,[[["datastruct"]],["data"]]],[11,"clone","","",35,[[["self"]],["dataenum"]]],[11,"from","","",79,[[["dataenum"]],["data"]]],[11,"clone","","",37,[[["self"]],["dataunion"]]],[11,"from","","",79,[[["dataunion"]],["data"]]],[11,"parse_binop","","",80,[[["cursor"]],["presult"]]],[11,"parse","","",81,[[["cursor"]],["presult"]]],[11,"description","","",81,[[],["option",["str"]]]],[11,"to_tokens","","",80,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",81,[[["self"],["tokenstream"]]]],[11,"clone","","",80,[[["self"]],["binop"]]],[11,"clone","","",81,[[["self"]],["unop"]]],[11,"parse","","",84,[[["cursor"]],["presult"]]],[11,"description","","",84,[[],["option",["str"]]]],[11,"without_plus","","",84,[[["cursor"]],["presult"]]],[11,"parse","","",52,[[["cursor"]],["presult"]]],[11,"description","","",52,[[],["option",["str"]]]],[11,"parse","","",41,[[["cursor"]],["presult"]]],[11,"description","","",41,[[],["option",["str"]]]],[11,"parse","","",50,[[["cursor"]],["presult"]]],[11,"description","","",50,[[],["option",["str"]]]],[11,"parse","","",51,[[["cursor"]],["presult"]]],[11,"description","","",51,[[],["option",["str"]]]],[11,"parse","","",42,[[["cursor"]],["presult"]]],[11,"description","","",42,[[],["option",["str"]]]],[11,"parse","","",47,[[["cursor"]],["presult"]]],[11,"description","","",47,[[],["option",["str"]]]],[11,"parse","","",45,[[["cursor"]],["presult"]]],[11,"description","","",45,[[],["option",["str"]]]],[11,"parse","","",54,[[["cursor"]],["presult"]]],[11,"description","","",54,[[],["option",["str"]]]],[11,"parse","","",46,[[["cursor"]],["presult"]]],[11,"description","","",46,[[],["option",["str"]]]],[11,"parse","","",49,[[["cursor"]],["presult"]]],[11,"description","","",49,[[],["option",["str"]]]],[11,"without_plus","","",83,[[["cursor"]],["presult"]]],[11,"parse","","",83,[[["cursor"]],["presult"]]],[11,"description","","",83,[[],["option",["str"]]]],[11,"parse","","",53,[[["cursor"]],["presult"]]],[11,"description","","",53,[[],["option",["str"]]]],[11,"without_plus","","",53,[[["cursor"]],["presult"]]],[11,"parse","","",44,[[["cursor"]],["presult"]]],[11,"description","","",44,[[],["option",["str"]]]],[11,"parse","","",43,[[["cursor"]],["presult"]]],[11,"description","","",43,[[],["option",["str"]]]],[11,"parse","","",48,[[["cursor"]],["presult"]]],[11,"description","","",48,[[],["option",["str"]]]],[11,"parse","","",40,[[["cursor"]],["presult"]]],[11,"description","","",40,[[],["option",["str"]]]],[11,"parse","","",82,[[["cursor"]],["presult"]]],[11,"description","","",82,[[],["option",["str"]]]],[11,"parse","","",39,[[["cursor"]],["presult"]]],[11,"description","","",39,[[],["option",["str"]]]],[11,"to_tokens","","",52,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",41,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",50,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",51,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",42,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",47,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",54,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",49,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",53,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",44,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",43,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",48,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",45,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",46,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",55,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",83,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",40,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",82,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",39,[[["self"],["tokenstream"]]]],[11,"clone","","",84,[[["self"]],["type"]]],[11,"clone","","",52,[[["self"]],["typeslice"]]],[11,"from","","",84,[[["typeslice"]],["type"]]],[11,"clone","","",41,[[["self"]],["typearray"]]],[11,"from","","",84,[[["typearray"]],["type"]]],[11,"clone","","",50,[[["self"]],["typeptr"]]],[11,"from","","",84,[[["typeptr"]],["type"]]],[11,"clone","","",51,[[["self"]],["typereference"]]],[11,"from","","",84,[[["typereference"]],["type"]]],[11,"clone","","",42,[[["self"]],["typebarefn"]]],[11,"from","","",84,[[["typebarefn"]],["type"]]],[11,"clone","","",47,[[["self"]],["typenever"]]],[11,"from","","",84,[[["typenever"]],["type"]]],[11,"clone","","",54,[[["self"]],["typetuple"]]],[11,"from","","",84,[[["typetuple"]],["type"]]],[11,"clone","","",49,[[["self"]],["typepath"]]],[11,"from","","",84,[[["typepath"]],["type"]]],[11,"clone","","",53,[[["self"]],["typetraitobject"]]],[11,"from","","",84,[[["typetraitobject"]],["type"]]],[11,"clone","","",44,[[["self"]],["typeimpltrait"]]],[11,"from","","",84,[[["typeimpltrait"]],["type"]]],[11,"clone","","",48,[[["self"]],["typeparen"]]],[11,"from","","",84,[[["typeparen"]],["type"]]],[11,"clone","","",43,[[["self"]],["typegroup"]]],[11,"from","","",84,[[["typegroup"]],["type"]]],[11,"clone","","",45,[[["self"]],["typeinfer"]]],[11,"from","","",84,[[["typeinfer"]],["type"]]],[11,"clone","","",46,[[["self"]],["typemacro"]]],[11,"from","","",84,[[["typemacro"]],["type"]]],[11,"clone","","",55,[[["self"]],["typeverbatim"]]],[11,"from","","",84,[[["typeverbatim"]],["type"]]],[11,"to_tokens","","",84,[[["self"],["tokenstream"]]]],[11,"clone","","",39,[[["self"]],["abi"]]],[11,"clone","","",40,[[["self"]],["barefnarg"]]],[11,"clone","","",82,[[["self"]],["barefnargname"]]],[11,"clone","","",83,[[["self"]],["returntype"]]],[11,"parse","","",60,[[["cursor"]],["presult"]]],[11,"description","","",60,[[],["option",["str"]]]],[11,"parse","","",85,[[["cursor"]],["presult"]]],[11,"parse","","",57,[[["cursor"]],["presult"]]],[11,"description","","",57,[[],["option",["str"]]]],[11,"parse","","",59,[[["cursor"]],["presult"]]],[11,"description","","",59,[[],["option",["str"]]]],[11,"parse","","",61,[[["cursor"]],["presult"]]],[11,"description","","",61,[[],["option",["str"]]]],[11,"parse","","",58,[[["cursor"]],["presult"]]],[11,"description","","",58,[[],["option",["str"]]]],[11,"parse_mod_style","","",60,[[["cursor"]],["presult"]]],[11,"to_tokens","","",60,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",61,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",86,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",85,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",57,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",58,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",59,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",56,[[["self"],["tokenstream"]]]],[11,"clone","","",60,[[["self"]],["path"]]],[11,"global","","",60,[[["self"]],["bool"]]],[11,"clone","","",56,[[["self"]],["pathtokens"]]],[11,"from","","",60,[[["t"]],["self"]]],[11,"clone","","",61,[[["self"]],["pathsegment"]]],[11,"from","","",61,[[["t"]],["self"]]],[11,"clone","","",86,[[["self"]],["patharguments"]]],[11,"default","","",86,[[],["self"]]],[11,"is_empty","","",86,[[["self"]],["bool"]]],[11,"clone","","",85,[[["self"]],["genericargument"]]],[11,"clone","","",57,[[["self"]],["anglebracketedgenericarguments"]]],[11,"clone","","",58,[[["self"]],["binding"]]],[11,"clone","","",59,[[["self"]],["parenthesizedgenericarguments"]]],[11,"clone","","",62,[[["self"]],["qself"]]],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",N,N],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",N,N],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",N,N],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",221,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",221,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",221,[[["self"]],["cursor"]]],[11,"clone","","",222,[[["self"]],["cursor"]]],[11,"eq","","",222,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",222,[[["self"],["cursor"]],["bool"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",222,[[],["self"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",222,[[["self"]],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",222,[[["self"],["delimiter"]],["option"]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",222,[[["self"]],["option"]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",222,[[["self"]],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",222,[[["self"]],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",222,[[["self"]],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",222,[[["self"]],["option"]]],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",222,[[["self"]],["span"]]],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",N,N],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",N,N],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",N,N],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",N,N],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",N,N],[3,"IntoIter","","An iterator over owned values of type `T`.",N,N],[3,"Iter","","An iterator over borrowed values of type `&T`.",N,N],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",N,N],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",N,N],[13,"Punctuated","","",223,N],[13,"End","","",223,N],[11,"to_tokens","","",224,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",223,[[["self"],["tokenstream"]]]],[11,"clone","","",224,[[["self"]],["punctuated"]]],[11,"new","","Creates an empty punctuated sequence.",224,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",224,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",224,[[["self"]],["usize"]]],[11,"first","","Borrows the first punctuated pair in this sequence.",224,[[["self"]],["option",["pair"]]]],[11,"last","","Borrows the last punctuated pair in this sequence.",224,[[["self"]],["option",["pair"]]]],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",224,[[["self"]],["option",["pair"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",224,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",224,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",224,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",224,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",224,[[["self"]],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",224,[[["self"],["t"]]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",224,[[["self"],["p"]]]],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",224,[[["self"]],["option",["pair"]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",224,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",224,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",224,[[["self"],["t"]]]],[11,"insert","","Inserts an element at position `index`.",224,[[["self"],["usize"],["t"]]]],[11,"from_iter","","",224,[[["i"]],["self"]]],[11,"extend","","",224,[[["self"],["i"]]]],[11,"from_iter","","",224,[[["i"]],["self"]]],[11,"extend","","",224,[[["self"],["i"]]]],[11,"into_iter","","",224,N],[11,"default","","",224,[[],["self"]]],[11,"next","","",225,[[["self"]],["option"]]],[11,"len","","",225,[[["self"]],["usize"]]],[11,"next","","",226,[[["self"]],["option"]]],[11,"len","","",226,[[["self"]],["usize"]]],[11,"next","","",227,[[["self"]],["option"]]],[11,"len","","",227,[[["self"]],["usize"]]],[11,"next","","",228,[[["self"]],["option"]]],[11,"len","","",228,[[["self"]],["usize"]]],[11,"next","","",229,[[["self"]],["option"]]],[11,"len","","",229,[[["self"]],["usize"]]],[11,"next","","",230,[[["self"]],["option"]]],[11,"len","","",230,[[["self"]],["usize"]]],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",223,[[["self"]],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",223,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",223,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",223,[[["self"]],["option"]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",223,[[["t"],["option"]],["self"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",223,N],[11,"index","","",224,N],[11,"index_mut","","",224,N],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",224,[[["cursor"]],["presult"]]],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",224,[[["cursor"]],["presult"]]],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",224,[[["cursor"]],["presult"]]],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",224,[[["cursor"]],["presult"]]],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",224,N],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",224,N],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",224,N],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",224,N],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",N,N],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",N,N],[0,"ext","","Extension traits that are made available within the `call!` parser.",N,N],[8,"IdentExt","syn::synom::ext","Additional parsing methods for `Ident`.",N,N],[10,"parse_any","","Parses any identifier including keywords.",231,[[["cursor"]],["presult"]]],[11,"parse_any","syn","",181,[[["cursor"]],["presult"]]],[6,"PResult","syn::synom","The result of a `Synom` parser.",N,N],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",N,N],[10,"parse","","",232,[[["cursor"]],["presult"]]],[11,"description","","A short name of the type being parsed.",232,[[],["option",["str"]]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",N,N],[16,"Output","","",233,N],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",233,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",233,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",233,[[["self"],["str"]],["result",["parseerror"]]]],[11,"parse","syn","",181,[[["cursor"]],["presult"]]],[11,"description","","",181,[[],["option",["str"]]]],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",234,[[["self"]],["span"]]],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[5,"visit_abi","syn::visit","",N,[[["v"],["abi"]]]],[5,"visit_angle_bracketed_generic_arguments","","",N,[[["v"],["anglebracketedgenericarguments"]]]],[5,"visit_attr_style","","",N,[[["v"],["attrstyle"]]]],[5,"visit_attribute","","",N,[[["v"],["attribute"]]]],[5,"visit_bare_fn_arg","","",N,[[["v"],["barefnarg"]]]],[5,"visit_bare_fn_arg_name","","",N,[[["v"],["barefnargname"]]]],[5,"visit_bin_op","","",N,[[["v"],["binop"]]]],[5,"visit_binding","","",N,[[["v"],["binding"]]]],[5,"visit_bound_lifetimes","","",N,[[["v"],["boundlifetimes"]]]],[5,"visit_const_param","","",N,[[["v"],["constparam"]]]],[5,"visit_data","","",N,[[["v"],["data"]]]],[5,"visit_data_enum","","",N,[[["v"],["dataenum"]]]],[5,"visit_data_struct","","",N,[[["v"],["datastruct"]]]],[5,"visit_data_union","","",N,[[["v"],["dataunion"]]]],[5,"visit_derive_input","","",N,[[["v"],["deriveinput"]]]],[5,"visit_expr","","",N,[[["v"],["expr"]]]],[5,"visit_expr_binary","","",N,[[["v"],["exprbinary"]]]],[5,"visit_expr_call","","",N,[[["v"],["exprcall"]]]],[5,"visit_expr_cast","","",N,[[["v"],["exprcast"]]]],[5,"visit_expr_field","","",N,[[["v"],["exprfield"]]]],[5,"visit_expr_index","","",N,[[["v"],["exprindex"]]]],[5,"visit_expr_lit","","",N,[[["v"],["exprlit"]]]],[5,"visit_expr_paren","","",N,[[["v"],["exprparen"]]]],[5,"visit_expr_path","","",N,[[["v"],["exprpath"]]]],[5,"visit_expr_unary","","",N,[[["v"],["exprunary"]]]],[5,"visit_expr_verbatim","","",N,[[["v"],["exprverbatim"]]]],[5,"visit_field","","",N,[[["v"],["field"]]]],[5,"visit_fields","","",N,[[["v"],["fields"]]]],[5,"visit_fields_named","","",N,[[["v"],["fieldsnamed"]]]],[5,"visit_fields_unnamed","","",N,[[["v"],["fieldsunnamed"]]]],[5,"visit_generic_argument","","",N,[[["v"],["genericargument"]]]],[5,"visit_generic_param","","",N,[[["v"],["genericparam"]]]],[5,"visit_generics","","",N,[[["v"],["generics"]]]],[5,"visit_ident","","",N,[[["v"],["ident"]]]],[5,"visit_index","","",N,[[["v"],["index"]]]],[5,"visit_lifetime","","",N,[[["v"],["lifetime"]]]],[5,"visit_lifetime_def","","",N,[[["v"],["lifetimedef"]]]],[5,"visit_lit","","",N,[[["v"],["lit"]]]],[5,"visit_lit_bool","","",N,[[["v"],["litbool"]]]],[5,"visit_lit_byte","","",N,[[["v"],["litbyte"]]]],[5,"visit_lit_byte_str","","",N,[[["v"],["litbytestr"]]]],[5,"visit_lit_char","","",N,[[["v"],["litchar"]]]],[5,"visit_lit_float","","",N,[[["v"],["litfloat"]]]],[5,"visit_lit_int","","",N,[[["v"],["litint"]]]],[5,"visit_lit_str","","",N,[[["v"],["litstr"]]]],[5,"visit_lit_verbatim","","",N,[[["v"],["litverbatim"]]]],[5,"visit_macro","","",N,[[["v"],["macro"]]]],[5,"visit_macro_delimiter","","",N,[[["v"],["macrodelimiter"]]]],[5,"visit_member","","",N,[[["v"],["member"]]]],[5,"visit_meta","","",N,[[["v"],["meta"]]]],[5,"visit_meta_list","","",N,[[["v"],["metalist"]]]],[5,"visit_meta_name_value","","",N,[[["v"],["metanamevalue"]]]],[5,"visit_nested_meta","","",N,[[["v"],["nestedmeta"]]]],[5,"visit_parenthesized_generic_arguments","","",N,[[["v"],["parenthesizedgenericarguments"]]]],[5,"visit_path","","",N,[[["v"],["path"]]]],[5,"visit_path_arguments","","",N,[[["v"],["patharguments"]]]],[5,"visit_path_segment","","",N,[[["v"],["pathsegment"]]]],[5,"visit_predicate_eq","","",N,[[["v"],["predicateeq"]]]],[5,"visit_predicate_lifetime","","",N,[[["v"],["predicatelifetime"]]]],[5,"visit_predicate_type","","",N,[[["v"],["predicatetype"]]]],[5,"visit_qself","","",N,[[["v"],["qself"]]]],[5,"visit_return_type","","",N,[[["v"],["returntype"]]]],[5,"visit_span","","",N,[[["v"],["span"]]]],[5,"visit_trait_bound","","",N,[[["v"],["traitbound"]]]],[5,"visit_trait_bound_modifier","","",N,[[["v"],["traitboundmodifier"]]]],[5,"visit_type","","",N,[[["v"],["type"]]]],[5,"visit_type_array","","",N,[[["v"],["typearray"]]]],[5,"visit_type_bare_fn","","",N,[[["v"],["typebarefn"]]]],[5,"visit_type_group","","",N,[[["v"],["typegroup"]]]],[5,"visit_type_impl_trait","","",N,[[["v"],["typeimpltrait"]]]],[5,"visit_type_infer","","",N,[[["v"],["typeinfer"]]]],[5,"visit_type_macro","","",N,[[["v"],["typemacro"]]]],[5,"visit_type_never","","",N,[[["v"],["typenever"]]]],[5,"visit_type_param","","",N,[[["v"],["typeparam"]]]],[5,"visit_type_param_bound","","",N,[[["v"],["typeparambound"]]]],[5,"visit_type_paren","","",N,[[["v"],["typeparen"]]]],[5,"visit_type_path","","",N,[[["v"],["typepath"]]]],[5,"visit_type_ptr","","",N,[[["v"],["typeptr"]]]],[5,"visit_type_reference","","",N,[[["v"],["typereference"]]]],[5,"visit_type_slice","","",N,[[["v"],["typeslice"]]]],[5,"visit_type_trait_object","","",N,[[["v"],["typetraitobject"]]]],[5,"visit_type_tuple","","",N,[[["v"],["typetuple"]]]],[5,"visit_type_verbatim","","",N,[[["v"],["typeverbatim"]]]],[5,"visit_un_op","","",N,[[["v"],["unop"]]]],[5,"visit_variant","","",N,[[["v"],["variant"]]]],[5,"visit_vis_crate","","",N,[[["v"],["viscrate"]]]],[5,"visit_vis_public","","",N,[[["v"],["vispublic"]]]],[5,"visit_vis_restricted","","",N,[[["v"],["visrestricted"]]]],[5,"visit_visibility","","",N,[[["v"],["visibility"]]]],[5,"visit_where_clause","","",N,[[["v"],["whereclause"]]]],[5,"visit_where_predicate","","",N,[[["v"],["wherepredicate"]]]],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[11,"visit_abi","","",235,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",235,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_attr_style","","",235,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",235,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",235,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",235,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",235,[[["self"],["binop"]]]],[11,"visit_binding","","",235,[[["self"],["binding"]]]],[11,"visit_bound_lifetimes","","",235,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",235,[[["self"],["constparam"]]]],[11,"visit_data","","",235,[[["self"],["data"]]]],[11,"visit_data_enum","","",235,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",235,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",235,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",235,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",235,[[["self"],["expr"]]]],[11,"visit_expr_binary","","",235,[[["self"],["exprbinary"]]]],[11,"visit_expr_call","","",235,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",235,[[["self"],["exprcast"]]]],[11,"visit_expr_field","","",235,[[["self"],["exprfield"]]]],[11,"visit_expr_index","","",235,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",235,[[["self"],["exprlit"]]]],[11,"visit_expr_paren","","",235,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",235,[[["self"],["exprpath"]]]],[11,"visit_expr_unary","","",235,[[["self"],["exprunary"]]]],[11,"visit_expr_verbatim","","",235,[[["self"],["exprverbatim"]]]],[11,"visit_field","","",235,[[["self"],["field"]]]],[11,"visit_fields","","",235,[[["self"],["fields"]]]],[11,"visit_fields_named","","",235,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",235,[[["self"],["fieldsunnamed"]]]],[11,"visit_generic_argument","","",235,[[["self"],["genericargument"]]]],[11,"visit_generic_param","","",235,[[["self"],["genericparam"]]]],[11,"visit_generics","","",235,[[["self"],["generics"]]]],[11,"visit_ident","","",235,[[["self"],["ident"]]]],[11,"visit_index","","",235,[[["self"],["index"]]]],[11,"visit_lifetime","","",235,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",235,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",235,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",235,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",235,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",235,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",235,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",235,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",235,[[["self"],["litint"]]]],[11,"visit_lit_str","","",235,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",235,[[["self"],["litverbatim"]]]],[11,"visit_macro","","",235,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",235,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",235,[[["self"],["member"]]]],[11,"visit_meta","","",235,[[["self"],["meta"]]]],[11,"visit_meta_list","","",235,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",235,[[["self"],["metanamevalue"]]]],[11,"visit_nested_meta","","",235,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",235,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_path","","",235,[[["self"],["path"]]]],[11,"visit_path_arguments","","",235,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",235,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",235,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",235,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",235,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",235,[[["self"],["qself"]]]],[11,"visit_return_type","","",235,[[["self"],["returntype"]]]],[11,"visit_span","","",235,[[["self"],["span"]]]],[11,"visit_trait_bound","","",235,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",235,[[["self"],["traitboundmodifier"]]]],[11,"visit_type","","",235,[[["self"],["type"]]]],[11,"visit_type_array","","",235,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",235,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",235,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",235,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",235,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",235,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",235,[[["self"],["typenever"]]]],[11,"visit_type_param","","",235,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",235,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",235,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",235,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",235,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",235,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",235,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",235,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",235,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",235,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",235,[[["self"],["unop"]]]],[11,"visit_variant","","",235,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",235,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",235,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",235,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",235,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",235,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",235,[[["self"],["wherepredicate"]]]],[11,"fmt","syn::synom","",236,[[["self"],["formatter"]],["result"]]],[11,"description","","",236,[[["self"]],["str"]]],[11,"fmt","","",236,[[["self"],["formatter"]],["result"]]],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",N,N],[14,"call","","Invoke the given parser function with zero or more arguments.",N,N],[14,"map","","Transform the result of a parser by applying a function or closure.",N,N],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",N,N],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",N,N],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",N,N],[14,"many0","","Parse zero or more values using the given parser.",N,N],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",N,N],[14,"value","","Produce the given value without parsing anything.",N,N],[14,"reject","","Unconditionally fail to parse anything.",N,N],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",N,N],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",N,N],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",N,N],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",N,N],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",N,N],[14,"epsilon","","Parses nothing and always succeeds.",N,N],[14,"syn","","Parse any type that implements the `Synom` trait.",N,N],[14,"custom_keyword","","Parse the given word as a keyword.",N,N],[14,"parens","","Parse inside of `(` `)` parentheses.",N,N],[14,"brackets","","Parse inside of `[` `]` square brackets.",N,N],[14,"braces","","Parse inside of `{` `}` curly braces.",N,N],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",N,N],[14,"punct","","Parse a single Rust punctuation token.",N,N],[14,"keyword","","Parse a single Rust keyword token.",N,N],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",N,N],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",181,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",181,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",181,N],[11,"span","","",181,[[["self"]],["span"]]],[11,"to_string","","",181,[[["self"]],["string"]]],[11,"from","","",181,[[["t"]],["t"]]],[11,"into","","",181,[[["self"]],["u"]]],[11,"to_owned","","",181,[[["self"]],["t"]]],[11,"clone_into","","",181,N],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"try_into","","",181,[[["self"]],["result"]]],[11,"get_type_id","","",181,[[["self"]],["typeid"]]],[11,"not_found","","",181,[[["str"],["str"]],["e"]]],[11,"eq","","",181,[[["self"],["ident"]],["bool"]]],[11,"eq","","",181,[[["self"],["t"]],["bool"]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",181,[[["self"],["ident"]],["option",["ordering"]]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",181,[[["self"]],["ident"]]],[11,"hash","","",181,N],[11,"cmp","","",181,[[["self"],["ident"]],["ordering"]]],[11,"to_tokens","","",181,N],[11,"span","","",0,[[["self"]],["span"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"not_found","","",0,[[["str"],["str"]],["e"]]],[11,"span","","",1,[[["self"]],["span"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"not_found","","",1,[[["str"],["str"]],["e"]]],[11,"span","","",2,[[["self"]],["span"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"not_found","","",2,[[["str"],["str"]],["e"]]],[11,"span","","",3,[[["self"]],["span"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"not_found","","",3,[[["str"],["str"]],["e"]]],[11,"span","","",4,[[["self"]],["span"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"not_found","","",4,[[["str"],["str"]],["e"]]],[11,"span","","",5,[[["self"]],["span"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"not_found","","",5,[[["str"],["str"]],["e"]]],[11,"span","","",6,[[["self"]],["span"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"not_found","","",6,[[["str"],["str"]],["e"]]],[11,"span","","",7,[[["self"]],["span"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"not_found","","",7,[[["str"],["str"]],["e"]]],[11,"span","","",8,[[["self"]],["span"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"not_found","","",8,[[["str"],["str"]],["e"]]],[11,"span","","",9,[[["self"]],["span"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"not_found","","",9,[[["str"],["str"]],["e"]]],[11,"from","","",184,[[["t"]],["t"]]],[11,"into","","",184,[[["self"]],["u"]]],[11,"to_owned","","",184,[[["self"]],["t"]]],[11,"clone_into","","",184,N],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"try_into","","",184,[[["self"]],["result"]]],[11,"get_type_id","","",184,[[["self"]],["typeid"]]],[11,"not_found","","",184,[[["str"],["str"]],["e"]]],[11,"from","","",198,[[["t"]],["t"]]],[11,"into","","",198,[[["self"]],["u"]]],[11,"to_owned","","",198,[[["self"]],["t"]]],[11,"clone_into","","",198,N],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"try_into","","",198,[[["self"]],["result"]]],[11,"get_type_id","","",198,[[["self"]],["typeid"]]],[11,"not_found","","",198,[[["str"],["str"]],["e"]]],[11,"from","","",199,[[["t"]],["t"]]],[11,"into","","",199,[[["self"]],["u"]]],[11,"to_owned","","",199,[[["self"]],["t"]]],[11,"clone_into","","",199,N],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"try_into","","",199,[[["self"]],["result"]]],[11,"get_type_id","","",199,[[["self"]],["typeid"]]],[11,"not_found","","",199,[[["str"],["str"]],["e"]]],[11,"span","","",10,[[["self"]],["span"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"not_found","","",10,[[["str"],["str"]],["e"]]],[11,"from","","",197,[[["t"]],["t"]]],[11,"into","","",197,[[["self"]],["u"]]],[11,"to_owned","","",197,[[["self"]],["t"]]],[11,"clone_into","","",197,N],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"try_into","","",197,[[["self"]],["result"]]],[11,"get_type_id","","",197,[[["self"]],["typeid"]]],[11,"not_found","","",197,[[["str"],["str"]],["e"]]],[11,"from","","",182,[[["t"]],["t"]]],[11,"into","","",182,[[["self"]],["u"]]],[11,"to_owned","","",182,[[["self"]],["t"]]],[11,"clone_into","","",182,N],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"try_into","","",182,[[["self"]],["result"]]],[11,"get_type_id","","",182,[[["self"]],["typeid"]]],[11,"not_found","","",182,[[["str"],["str"]],["e"]]],[11,"from","","",202,[[["t"]],["t"]]],[11,"into","","",202,[[["self"]],["u"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,N],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"try_into","","",202,[[["self"]],["result"]]],[11,"get_type_id","","",202,[[["self"]],["typeid"]]],[11,"not_found","","",202,[[["str"],["str"]],["e"]]],[11,"span","","",11,[[["self"]],["span"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"not_found","","",11,[[["str"],["str"]],["e"]]],[11,"span","","",12,[[["self"]],["span"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"not_found","","",12,[[["str"],["str"]],["e"]]],[11,"from","","",210,[[["t"]],["t"]]],[11,"into","","",210,[[["self"]],["u"]]],[11,"to_owned","","",210,[[["self"]],["t"]]],[11,"clone_into","","",210,N],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"try_into","","",210,[[["self"]],["result"]]],[11,"get_type_id","","",210,[[["self"]],["typeid"]]],[11,"not_found","","",210,[[["str"],["str"]],["e"]]],[11,"from","","",195,[[["t"]],["t"]]],[11,"into","","",195,[[["self"]],["u"]]],[11,"to_owned","","",195,[[["self"]],["t"]]],[11,"clone_into","","",195,N],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"try_into","","",195,[[["self"]],["result"]]],[11,"get_type_id","","",195,[[["self"]],["typeid"]]],[11,"not_found","","",195,[[["str"],["str"]],["e"]]],[11,"from","","",203,[[["t"]],["t"]]],[11,"into","","",203,[[["self"]],["u"]]],[11,"to_owned","","",203,[[["self"]],["t"]]],[11,"clone_into","","",203,N],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"try_into","","",203,[[["self"]],["result"]]],[11,"get_type_id","","",203,[[["self"]],["typeid"]]],[11,"not_found","","",203,[[["str"],["str"]],["e"]]],[11,"span","","",13,[[["self"]],["span"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"not_found","","",13,[[["str"],["str"]],["e"]]],[11,"from","","",192,[[["t"]],["t"]]],[11,"into","","",192,[[["self"]],["u"]]],[11,"to_owned","","",192,[[["self"]],["t"]]],[11,"clone_into","","",192,N],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"try_into","","",192,[[["self"]],["result"]]],[11,"get_type_id","","",192,[[["self"]],["typeid"]]],[11,"not_found","","",192,[[["str"],["str"]],["e"]]],[11,"from","","",208,[[["t"]],["t"]]],[11,"into","","",208,[[["self"]],["u"]]],[11,"to_owned","","",208,[[["self"]],["t"]]],[11,"clone_into","","",208,N],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"try_into","","",208,[[["self"]],["result"]]],[11,"get_type_id","","",208,[[["self"]],["typeid"]]],[11,"not_found","","",208,[[["str"],["str"]],["e"]]],[11,"from","","",188,[[["t"]],["t"]]],[11,"into","","",188,[[["self"]],["u"]]],[11,"to_owned","","",188,[[["self"]],["t"]]],[11,"clone_into","","",188,N],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"try_into","","",188,[[["self"]],["result"]]],[11,"get_type_id","","",188,[[["self"]],["typeid"]]],[11,"not_found","","",188,[[["str"],["str"]],["e"]]],[11,"from","","",189,[[["t"]],["t"]]],[11,"into","","",189,[[["self"]],["u"]]],[11,"to_owned","","",189,[[["self"]],["t"]]],[11,"clone_into","","",189,N],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"try_into","","",189,[[["self"]],["result"]]],[11,"get_type_id","","",189,[[["self"]],["typeid"]]],[11,"not_found","","",189,[[["str"],["str"]],["e"]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"into","","",183,[[["self"]],["u"]]],[11,"to_owned","","",183,[[["self"]],["t"]]],[11,"clone_into","","",183,N],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"try_into","","",183,[[["self"]],["result"]]],[11,"get_type_id","","",183,[[["self"]],["typeid"]]],[11,"not_found","","",183,[[["str"],["str"]],["e"]]],[11,"span","","",14,[[["self"]],["span"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"not_found","","",14,[[["str"],["str"]],["e"]]],[11,"span","","",15,[[["self"]],["span"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"not_found","","",15,[[["str"],["str"]],["e"]]],[11,"from","","",193,[[["t"]],["t"]]],[11,"into","","",193,[[["self"]],["u"]]],[11,"to_owned","","",193,[[["self"]],["t"]]],[11,"clone_into","","",193,N],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"try_into","","",193,[[["self"]],["result"]]],[11,"get_type_id","","",193,[[["self"]],["typeid"]]],[11,"not_found","","",193,[[["str"],["str"]],["e"]]],[11,"from","","",205,[[["t"]],["t"]]],[11,"into","","",205,[[["self"]],["u"]]],[11,"to_owned","","",205,[[["self"]],["t"]]],[11,"clone_into","","",205,N],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"try_into","","",205,[[["self"]],["result"]]],[11,"get_type_id","","",205,[[["self"]],["typeid"]]],[11,"not_found","","",205,[[["str"],["str"]],["e"]]],[11,"from","","",194,[[["t"]],["t"]]],[11,"into","","",194,[[["self"]],["u"]]],[11,"to_owned","","",194,[[["self"]],["t"]]],[11,"clone_into","","",194,N],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"try_into","","",194,[[["self"]],["result"]]],[11,"get_type_id","","",194,[[["self"]],["typeid"]]],[11,"not_found","","",194,[[["str"],["str"]],["e"]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"into","","",185,[[["self"]],["u"]]],[11,"to_owned","","",185,[[["self"]],["t"]]],[11,"clone_into","","",185,N],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"try_into","","",185,[[["self"]],["result"]]],[11,"get_type_id","","",185,[[["self"]],["typeid"]]],[11,"not_found","","",185,[[["str"],["str"]],["e"]]],[11,"span","","",16,[[["self"]],["span"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"not_found","","",16,[[["str"],["str"]],["e"]]],[11,"span","","",17,[[["self"]],["span"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"not_found","","",17,[[["str"],["str"]],["e"]]],[11,"from","","",200,[[["t"]],["t"]]],[11,"into","","",200,[[["self"]],["u"]]],[11,"to_owned","","",200,[[["self"]],["t"]]],[11,"clone_into","","",200,N],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"try_into","","",200,[[["self"]],["result"]]],[11,"get_type_id","","",200,[[["self"]],["typeid"]]],[11,"not_found","","",200,[[["str"],["str"]],["e"]]],[11,"from","","",201,[[["t"]],["t"]]],[11,"into","","",201,[[["self"]],["u"]]],[11,"to_owned","","",201,[[["self"]],["t"]]],[11,"clone_into","","",201,N],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"try_into","","",201,[[["self"]],["result"]]],[11,"get_type_id","","",201,[[["self"]],["typeid"]]],[11,"not_found","","",201,[[["str"],["str"]],["e"]]],[11,"from","","",207,[[["t"]],["t"]]],[11,"into","","",207,[[["self"]],["u"]]],[11,"to_owned","","",207,[[["self"]],["t"]]],[11,"clone_into","","",207,N],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"try_into","","",207,[[["self"]],["result"]]],[11,"get_type_id","","",207,[[["self"]],["typeid"]]],[11,"not_found","","",207,[[["str"],["str"]],["e"]]],[11,"from","","",204,[[["t"]],["t"]]],[11,"into","","",204,[[["self"]],["u"]]],[11,"to_owned","","",204,[[["self"]],["t"]]],[11,"clone_into","","",204,N],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"try_into","","",204,[[["self"]],["result"]]],[11,"get_type_id","","",204,[[["self"]],["typeid"]]],[11,"not_found","","",204,[[["str"],["str"]],["e"]]],[11,"from","","",206,[[["t"]],["t"]]],[11,"into","","",206,[[["self"]],["u"]]],[11,"to_owned","","",206,[[["self"]],["t"]]],[11,"clone_into","","",206,N],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"try_into","","",206,[[["self"]],["result"]]],[11,"get_type_id","","",206,[[["self"]],["typeid"]]],[11,"not_found","","",206,[[["str"],["str"]],["e"]]],[11,"from","","",209,[[["t"]],["t"]]],[11,"into","","",209,[[["self"]],["u"]]],[11,"to_owned","","",209,[[["self"]],["t"]]],[11,"clone_into","","",209,N],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"try_into","","",209,[[["self"]],["result"]]],[11,"get_type_id","","",209,[[["self"]],["typeid"]]],[11,"not_found","","",209,[[["str"],["str"]],["e"]]],[11,"from","","",186,[[["t"]],["t"]]],[11,"into","","",186,[[["self"]],["u"]]],[11,"to_owned","","",186,[[["self"]],["t"]]],[11,"clone_into","","",186,N],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"try_into","","",186,[[["self"]],["result"]]],[11,"get_type_id","","",186,[[["self"]],["typeid"]]],[11,"not_found","","",186,[[["str"],["str"]],["e"]]],[11,"from","","",187,[[["t"]],["t"]]],[11,"into","","",187,[[["self"]],["u"]]],[11,"to_owned","","",187,[[["self"]],["t"]]],[11,"clone_into","","",187,N],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"try_into","","",187,[[["self"]],["result"]]],[11,"get_type_id","","",187,[[["self"]],["typeid"]]],[11,"not_found","","",187,[[["str"],["str"]],["e"]]],[11,"span","","",18,[[["self"]],["span"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"not_found","","",18,[[["str"],["str"]],["e"]]],[11,"from","","",196,[[["t"]],["t"]]],[11,"into","","",196,[[["self"]],["u"]]],[11,"to_owned","","",196,[[["self"]],["t"]]],[11,"clone_into","","",196,N],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"try_into","","",196,[[["self"]],["result"]]],[11,"get_type_id","","",196,[[["self"]],["typeid"]]],[11,"not_found","","",196,[[["str"],["str"]],["e"]]],[11,"span","","",19,[[["self"]],["span"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"not_found","","",19,[[["str"],["str"]],["e"]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"into","","",190,[[["self"]],["u"]]],[11,"to_owned","","",190,[[["self"]],["t"]]],[11,"clone_into","","",190,N],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"try_into","","",190,[[["self"]],["result"]]],[11,"get_type_id","","",190,[[["self"]],["typeid"]]],[11,"not_found","","",190,[[["str"],["str"]],["e"]]],[11,"from","","",191,[[["t"]],["t"]]],[11,"into","","",191,[[["self"]],["u"]]],[11,"to_owned","","",191,[[["self"]],["t"]]],[11,"clone_into","","",191,N],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"try_into","","",191,[[["self"]],["result"]]],[11,"get_type_id","","",191,[[["self"]],["typeid"]]],[11,"not_found","","",191,[[["str"],["str"]],["e"]]],[11,"from","","",211,[[["t"]],["t"]]],[11,"into","","",211,[[["self"]],["u"]]],[11,"to_owned","","",211,[[["self"]],["t"]]],[11,"clone_into","","",211,N],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"try_into","","",211,[[["self"]],["result"]]],[11,"get_type_id","","",211,[[["self"]],["typeid"]]],[11,"not_found","","",211,[[["str"],["str"]],["e"]]],[11,"span","","",20,[[["self"]],["span"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"not_found","","",20,[[["str"],["str"]],["e"]]],[11,"span","","",21,[[["self"]],["span"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"not_found","","",21,[[["str"],["str"]],["e"]]],[11,"span","","",22,[[["self"]],["span"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"not_found","","",22,[[["str"],["str"]],["e"]]],[11,"span","","",23,[[["self"]],["span"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"not_found","","",23,[[["str"],["str"]],["e"]]],[11,"span","","",24,[[["self"]],["span"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"not_found","","",24,[[["str"],["str"]],["e"]]],[11,"span","","",25,[[["self"]],["span"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"not_found","","",25,[[["str"],["str"]],["e"]]],[11,"span","","",26,[[["self"]],["span"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"not_found","","",26,[[["str"],["str"]],["e"]]],[11,"span","","",27,[[["self"]],["span"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"not_found","","",27,[[["str"],["str"]],["e"]]],[11,"span","","",28,[[["self"]],["span"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"not_found","","",28,[[["str"],["str"]],["e"]]],[11,"span","","",29,[[["self"]],["span"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"not_found","","",29,[[["str"],["str"]],["e"]]],[11,"span","","",30,[[["self"]],["span"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"not_found","","",30,[[["str"],["str"]],["e"]]],[11,"span","","",212,[[["self"]],["span"]]],[11,"from","","",212,[[["t"]],["t"]]],[11,"into","","",212,[[["self"]],["u"]]],[11,"to_owned","","",212,[[["self"]],["t"]]],[11,"clone_into","","",212,N],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"try_into","","",212,[[["self"]],["result"]]],[11,"get_type_id","","",212,[[["self"]],["typeid"]]],[11,"not_found","","",212,[[["str"],["str"]],["e"]]],[11,"span","","",214,[[["self"]],["span"]]],[11,"from","","",214,[[["t"]],["t"]]],[11,"into","","",214,[[["self"]],["u"]]],[11,"to_owned","","",214,[[["self"]],["t"]]],[11,"clone_into","","",214,N],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"try_into","","",214,[[["self"]],["result"]]],[11,"get_type_id","","",214,[[["self"]],["typeid"]]],[11,"not_found","","",214,[[["str"],["str"]],["e"]]],[11,"span","","",213,[[["self"]],["span"]]],[11,"from","","",213,[[["t"]],["t"]]],[11,"into","","",213,[[["self"]],["u"]]],[11,"to_owned","","",213,[[["self"]],["t"]]],[11,"clone_into","","",213,N],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"try_into","","",213,[[["self"]],["result"]]],[11,"get_type_id","","",213,[[["self"]],["typeid"]]],[11,"not_found","","",213,[[["str"],["str"]],["e"]]],[11,"span","","",31,[[["self"]],["span"]]],[11,"to_string","","",31,[[["self"]],["string"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"not_found","","",31,[[["str"],["str"]],["e"]]],[11,"span","","",32,[[["self"]],["span"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"not_found","","",32,[[["str"],["str"]],["e"]]],[11,"span","","",217,[[["self"]],["span"]]],[11,"from","","",217,[[["t"]],["t"]]],[11,"into","","",217,[[["self"]],["u"]]],[11,"to_owned","","",217,[[["self"]],["t"]]],[11,"clone_into","","",217,N],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"try_into","","",217,[[["self"]],["result"]]],[11,"get_type_id","","",217,[[["self"]],["typeid"]]],[11,"not_found","","",217,[[["str"],["str"]],["e"]]],[11,"span","","",216,[[["self"]],["span"]]],[11,"from","","",216,[[["t"]],["t"]]],[11,"into","","",216,[[["self"]],["u"]]],[11,"to_owned","","",216,[[["self"]],["t"]]],[11,"clone_into","","",216,N],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"try_into","","",216,[[["self"]],["result"]]],[11,"get_type_id","","",216,[[["self"]],["typeid"]]],[11,"not_found","","",216,[[["str"],["str"]],["e"]]],[11,"span","","",218,[[["self"]],["span"]]],[11,"from","","",218,[[["t"]],["t"]]],[11,"into","","",218,[[["self"]],["u"]]],[11,"to_owned","","",218,[[["self"]],["t"]]],[11,"clone_into","","",218,N],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"try_into","","",218,[[["self"]],["result"]]],[11,"get_type_id","","",218,[[["self"]],["typeid"]]],[11,"not_found","","",218,[[["str"],["str"]],["e"]]],[11,"span","","",220,[[["self"]],["span"]]],[11,"from","","",220,[[["t"]],["t"]]],[11,"into","","",220,[[["self"]],["u"]]],[11,"to_owned","","",220,[[["self"]],["t"]]],[11,"clone_into","","",220,N],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"try_into","","",220,[[["self"]],["result"]]],[11,"get_type_id","","",220,[[["self"]],["typeid"]]],[11,"not_found","","",220,[[["str"],["str"]],["e"]]],[11,"span","","",219,[[["self"]],["span"]]],[11,"from","","",219,[[["t"]],["t"]]],[11,"into","","",219,[[["self"]],["u"]]],[11,"to_owned","","",219,[[["self"]],["t"]]],[11,"clone_into","","",219,N],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"try_into","","",219,[[["self"]],["result"]]],[11,"get_type_id","","",219,[[["self"]],["typeid"]]],[11,"not_found","","",219,[[["str"],["str"]],["e"]]],[11,"span","","",215,[[["self"]],["span"]]],[11,"from","","",215,[[["t"]],["t"]]],[11,"into","","",215,[[["self"]],["u"]]],[11,"to_owned","","",215,[[["self"]],["t"]]],[11,"clone_into","","",215,N],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"try_into","","",215,[[["self"]],["result"]]],[11,"get_type_id","","",215,[[["self"]],["typeid"]]],[11,"not_found","","",215,[[["str"],["str"]],["e"]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"not_found","","",33,[[["str"],["str"]],["e"]]],[11,"span","","",34,[[["self"]],["span"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"not_found","","",34,[[["str"],["str"]],["e"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"not_found","","",35,[[["str"],["str"]],["e"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"not_found","","",36,[[["str"],["str"]],["e"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"not_found","","",37,[[["str"],["str"]],["e"]]],[11,"span","","",38,[[["self"]],["span"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"not_found","","",38,[[["str"],["str"]],["e"]]],[11,"span","","",39,[[["self"]],["span"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"not_found","","",39,[[["str"],["str"]],["e"]]],[11,"span","","",40,[[["self"]],["span"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"not_found","","",40,[[["str"],["str"]],["e"]]],[11,"span","","",41,[[["self"]],["span"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"not_found","","",41,[[["str"],["str"]],["e"]]],[11,"span","","",42,[[["self"]],["span"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"not_found","","",42,[[["str"],["str"]],["e"]]],[11,"span","","",43,[[["self"]],["span"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"not_found","","",43,[[["str"],["str"]],["e"]]],[11,"span","","",44,[[["self"]],["span"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"not_found","","",44,[[["str"],["str"]],["e"]]],[11,"span","","",45,[[["self"]],["span"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"not_found","","",45,[[["str"],["str"]],["e"]]],[11,"span","","",46,[[["self"]],["span"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"not_found","","",46,[[["str"],["str"]],["e"]]],[11,"span","","",47,[[["self"]],["span"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"not_found","","",47,[[["str"],["str"]],["e"]]],[11,"span","","",48,[[["self"]],["span"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"not_found","","",48,[[["str"],["str"]],["e"]]],[11,"span","","",49,[[["self"]],["span"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"not_found","","",49,[[["str"],["str"]],["e"]]],[11,"span","","",50,[[["self"]],["span"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"not_found","","",50,[[["str"],["str"]],["e"]]],[11,"span","","",51,[[["self"]],["span"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"not_found","","",51,[[["str"],["str"]],["e"]]],[11,"span","","",52,[[["self"]],["span"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"not_found","","",52,[[["str"],["str"]],["e"]]],[11,"span","","",53,[[["self"]],["span"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"not_found","","",53,[[["str"],["str"]],["e"]]],[11,"span","","",54,[[["self"]],["span"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"not_found","","",54,[[["str"],["str"]],["e"]]],[11,"span","","",55,[[["self"]],["span"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"not_found","","",55,[[["str"],["str"]],["e"]]],[11,"span","","",56,[[["self"]],["span"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"not_found","","",56,[[["str"],["str"]],["e"]]],[11,"span","","",57,[[["self"]],["span"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"not_found","","",57,[[["str"],["str"]],["e"]]],[11,"span","","",58,[[["self"]],["span"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"not_found","","",58,[[["str"],["str"]],["e"]]],[11,"span","","",59,[[["self"]],["span"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"not_found","","",59,[[["str"],["str"]],["e"]]],[11,"span","","",60,[[["self"]],["span"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"not_found","","",60,[[["str"],["str"]],["e"]]],[11,"span","","",61,[[["self"]],["span"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"not_found","","",61,[[["str"],["str"]],["e"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"not_found","","",62,[[["str"],["str"]],["e"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"not_found","","",63,[[["str"],["str"]],["e"]]],[11,"span","","",64,[[["self"]],["span"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"not_found","","",64,[[["str"],["str"]],["e"]]],[11,"span","","",65,[[["self"]],["span"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"not_found","","",65,[[["str"],["str"]],["e"]]],[11,"span","","",66,[[["self"]],["span"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"not_found","","",66,[[["str"],["str"]],["e"]]],[11,"span","","",67,[[["self"]],["span"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"not_found","","",67,[[["str"],["str"]],["e"]]],[11,"span","","",68,[[["self"]],["span"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"not_found","","",68,[[["str"],["str"]],["e"]]],[11,"span","","",69,[[["self"]],["span"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"not_found","","",69,[[["str"],["str"]],["e"]]],[11,"span","","",70,[[["self"]],["span"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"not_found","","",70,[[["str"],["str"]],["e"]]],[11,"span","","",71,[[["self"]],["span"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"not_found","","",71,[[["str"],["str"]],["e"]]],[11,"span","","",72,[[["self"]],["span"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"not_found","","",72,[[["str"],["str"]],["e"]]],[11,"span","","",73,[[["self"]],["span"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"not_found","","",73,[[["str"],["str"]],["e"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"not_found","","",74,[[["str"],["str"]],["e"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"not_found","","",75,[[["str"],["str"]],["e"]]],[11,"span","","",76,[[["self"]],["span"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"not_found","","",76,[[["str"],["str"]],["e"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"not_found","","",77,[[["str"],["str"]],["e"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"not_found","","",78,[[["str"],["str"]],["e"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"not_found","","",79,[[["str"],["str"]],["e"]]],[11,"span","","",80,[[["self"]],["span"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"not_found","","",80,[[["str"],["str"]],["e"]]],[11,"span","","",81,[[["self"]],["span"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"not_found","","",81,[[["str"],["str"]],["e"]]],[11,"span","","",82,[[["self"]],["span"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"not_found","","",82,[[["str"],["str"]],["e"]]],[11,"span","","",83,[[["self"]],["span"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"not_found","","",83,[[["str"],["str"]],["e"]]],[11,"span","","",84,[[["self"]],["span"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"not_found","","",84,[[["str"],["str"]],["e"]]],[11,"span","","",85,[[["self"]],["span"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"not_found","","",85,[[["str"],["str"]],["e"]]],[11,"span","","",86,[[["self"]],["span"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"not_found","","",86,[[["str"],["str"]],["e"]]],[11,"span","syn::token","",87,[[["self"]],["span"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"not_found","","",87,[[["str"],["str"]],["e"]]],[11,"span","","",88,[[["self"]],["span"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,N],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"not_found","","",88,[[["str"],["str"]],["e"]]],[11,"span","","",89,[[["self"]],["span"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"not_found","","",89,[[["str"],["str"]],["e"]]],[11,"span","","",90,[[["self"]],["span"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"not_found","","",90,[[["str"],["str"]],["e"]]],[11,"span","","",91,[[["self"]],["span"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"not_found","","",91,[[["str"],["str"]],["e"]]],[11,"span","","",92,[[["self"]],["span"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"not_found","","",92,[[["str"],["str"]],["e"]]],[11,"span","","",93,[[["self"]],["span"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"not_found","","",93,[[["str"],["str"]],["e"]]],[11,"span","","",94,[[["self"]],["span"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"not_found","","",94,[[["str"],["str"]],["e"]]],[11,"span","","",95,[[["self"]],["span"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"not_found","","",95,[[["str"],["str"]],["e"]]],[11,"span","","",96,[[["self"]],["span"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,N],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"not_found","","",96,[[["str"],["str"]],["e"]]],[11,"span","","",97,[[["self"]],["span"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"not_found","","",97,[[["str"],["str"]],["e"]]],[11,"span","","",98,[[["self"]],["span"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"not_found","","",98,[[["str"],["str"]],["e"]]],[11,"span","","",99,[[["self"]],["span"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"not_found","","",99,[[["str"],["str"]],["e"]]],[11,"span","","",100,[[["self"]],["span"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"not_found","","",100,[[["str"],["str"]],["e"]]],[11,"span","","",101,[[["self"]],["span"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,N],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"not_found","","",101,[[["str"],["str"]],["e"]]],[11,"span","","",102,[[["self"]],["span"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,N],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"not_found","","",102,[[["str"],["str"]],["e"]]],[11,"span","","",103,[[["self"]],["span"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"not_found","","",103,[[["str"],["str"]],["e"]]],[11,"span","","",104,[[["self"]],["span"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,N],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"not_found","","",104,[[["str"],["str"]],["e"]]],[11,"span","","",105,[[["self"]],["span"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,N],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"not_found","","",105,[[["str"],["str"]],["e"]]],[11,"span","","",106,[[["self"]],["span"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,N],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"not_found","","",106,[[["str"],["str"]],["e"]]],[11,"span","","",107,[[["self"]],["span"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,N],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"not_found","","",107,[[["str"],["str"]],["e"]]],[11,"span","","",108,[[["self"]],["span"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,N],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"not_found","","",108,[[["str"],["str"]],["e"]]],[11,"span","","",109,[[["self"]],["span"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,N],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"not_found","","",109,[[["str"],["str"]],["e"]]],[11,"span","","",110,[[["self"]],["span"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,N],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"not_found","","",110,[[["str"],["str"]],["e"]]],[11,"span","","",111,[[["self"]],["span"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,N],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"not_found","","",111,[[["str"],["str"]],["e"]]],[11,"span","","",112,[[["self"]],["span"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"not_found","","",112,[[["str"],["str"]],["e"]]],[11,"span","","",113,[[["self"]],["span"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"not_found","","",113,[[["str"],["str"]],["e"]]],[11,"span","","",114,[[["self"]],["span"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,N],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"not_found","","",114,[[["str"],["str"]],["e"]]],[11,"span","","",115,[[["self"]],["span"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,N],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"not_found","","",115,[[["str"],["str"]],["e"]]],[11,"span","","",116,[[["self"]],["span"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"not_found","","",116,[[["str"],["str"]],["e"]]],[11,"span","","",117,[[["self"]],["span"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"not_found","","",117,[[["str"],["str"]],["e"]]],[11,"span","","",118,[[["self"]],["span"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"not_found","","",118,[[["str"],["str"]],["e"]]],[11,"span","","",119,[[["self"]],["span"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"not_found","","",119,[[["str"],["str"]],["e"]]],[11,"span","","",120,[[["self"]],["span"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"not_found","","",120,[[["str"],["str"]],["e"]]],[11,"span","","",121,[[["self"]],["span"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"not_found","","",121,[[["str"],["str"]],["e"]]],[11,"span","","",122,[[["self"]],["span"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"not_found","","",122,[[["str"],["str"]],["e"]]],[11,"span","","",123,[[["self"]],["span"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"not_found","","",123,[[["str"],["str"]],["e"]]],[11,"span","","",124,[[["self"]],["span"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,N],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"not_found","","",124,[[["str"],["str"]],["e"]]],[11,"span","","",125,[[["self"]],["span"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"not_found","","",125,[[["str"],["str"]],["e"]]],[11,"span","","",126,[[["self"]],["span"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"not_found","","",126,[[["str"],["str"]],["e"]]],[11,"span","","",127,[[["self"]],["span"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"not_found","","",127,[[["str"],["str"]],["e"]]],[11,"span","","",128,[[["self"]],["span"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"not_found","","",128,[[["str"],["str"]],["e"]]],[11,"span","","",129,[[["self"]],["span"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"not_found","","",129,[[["str"],["str"]],["e"]]],[11,"span","","",130,[[["self"]],["span"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"not_found","","",130,[[["str"],["str"]],["e"]]],[11,"span","","",131,[[["self"]],["span"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,N],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"not_found","","",131,[[["str"],["str"]],["e"]]],[11,"span","","",132,[[["self"]],["span"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,N],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"not_found","","",132,[[["str"],["str"]],["e"]]],[11,"span","","",133,[[["self"]],["span"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,N],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"not_found","","",133,[[["str"],["str"]],["e"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,N],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"not_found","","",134,[[["str"],["str"]],["e"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,N],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"not_found","","",135,[[["str"],["str"]],["e"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"to_owned","","",136,[[["self"]],["t"]]],[11,"clone_into","","",136,N],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"not_found","","",136,[[["str"],["str"]],["e"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"to_owned","","",137,[[["self"]],["t"]]],[11,"clone_into","","",137,N],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"not_found","","",137,[[["str"],["str"]],["e"]]],[11,"span","","",138,[[["self"]],["span"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"to_owned","","",138,[[["self"]],["t"]]],[11,"clone_into","","",138,N],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"not_found","","",138,[[["str"],["str"]],["e"]]],[11,"span","","",139,[[["self"]],["span"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"to_owned","","",139,[[["self"]],["t"]]],[11,"clone_into","","",139,N],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"not_found","","",139,[[["str"],["str"]],["e"]]],[11,"span","","",140,[[["self"]],["span"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"to_owned","","",140,[[["self"]],["t"]]],[11,"clone_into","","",140,N],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"not_found","","",140,[[["str"],["str"]],["e"]]],[11,"span","","",141,[[["self"]],["span"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"to_owned","","",141,[[["self"]],["t"]]],[11,"clone_into","","",141,N],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"not_found","","",141,[[["str"],["str"]],["e"]]],[11,"span","","",142,[[["self"]],["span"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,N],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"not_found","","",142,[[["str"],["str"]],["e"]]],[11,"span","","",143,[[["self"]],["span"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,N],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"not_found","","",143,[[["str"],["str"]],["e"]]],[11,"span","","",144,[[["self"]],["span"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,N],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"not_found","","",144,[[["str"],["str"]],["e"]]],[11,"span","","",145,[[["self"]],["span"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"to_owned","","",145,[[["self"]],["t"]]],[11,"clone_into","","",145,N],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"not_found","","",145,[[["str"],["str"]],["e"]]],[11,"span","","",146,[[["self"]],["span"]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,N],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"not_found","","",146,[[["str"],["str"]],["e"]]],[11,"span","","",147,[[["self"]],["span"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"to_owned","","",147,[[["self"]],["t"]]],[11,"clone_into","","",147,N],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"not_found","","",147,[[["str"],["str"]],["e"]]],[11,"span","","",148,[[["self"]],["span"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"to_owned","","",148,[[["self"]],["t"]]],[11,"clone_into","","",148,N],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"not_found","","",148,[[["str"],["str"]],["e"]]],[11,"span","","",149,[[["self"]],["span"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,N],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"not_found","","",149,[[["str"],["str"]],["e"]]],[11,"span","","",150,[[["self"]],["span"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,N],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"not_found","","",150,[[["str"],["str"]],["e"]]],[11,"span","","",151,[[["self"]],["span"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,N],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"not_found","","",151,[[["str"],["str"]],["e"]]],[11,"span","","",152,[[["self"]],["span"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"to_owned","","",152,[[["self"]],["t"]]],[11,"clone_into","","",152,N],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"not_found","","",152,[[["str"],["str"]],["e"]]],[11,"span","","",153,[[["self"]],["span"]]],[11,"from","","",153,[[["t"]],["t"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,N],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"not_found","","",153,[[["str"],["str"]],["e"]]],[11,"span","","",154,[[["self"]],["span"]]],[11,"from","","",154,[[["t"]],["t"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"to_owned","","",154,[[["self"]],["t"]]],[11,"clone_into","","",154,N],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"not_found","","",154,[[["str"],["str"]],["e"]]],[11,"span","","",155,[[["self"]],["span"]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"to_owned","","",155,[[["self"]],["t"]]],[11,"clone_into","","",155,N],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"not_found","","",155,[[["str"],["str"]],["e"]]],[11,"span","","",156,[[["self"]],["span"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"to_owned","","",156,[[["self"]],["t"]]],[11,"clone_into","","",156,N],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[11,"not_found","","",156,[[["str"],["str"]],["e"]]],[11,"span","","",157,[[["self"]],["span"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"into","","",157,[[["self"]],["u"]]],[11,"to_owned","","",157,[[["self"]],["t"]]],[11,"clone_into","","",157,N],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"not_found","","",157,[[["str"],["str"]],["e"]]],[11,"span","","",158,[[["self"]],["span"]]],[11,"from","","",158,[[["t"]],["t"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,N],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"not_found","","",158,[[["str"],["str"]],["e"]]],[11,"span","","",159,[[["self"]],["span"]]],[11,"from","","",159,[[["t"]],["t"]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"to_owned","","",159,[[["self"]],["t"]]],[11,"clone_into","","",159,N],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"not_found","","",159,[[["str"],["str"]],["e"]]],[11,"span","","",160,[[["self"]],["span"]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"to_owned","","",160,[[["self"]],["t"]]],[11,"clone_into","","",160,N],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"not_found","","",160,[[["str"],["str"]],["e"]]],[11,"span","","",161,[[["self"]],["span"]]],[11,"from","","",161,[[["t"]],["t"]]],[11,"into","","",161,[[["self"]],["u"]]],[11,"to_owned","","",161,[[["self"]],["t"]]],[11,"clone_into","","",161,N],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"not_found","","",161,[[["str"],["str"]],["e"]]],[11,"span","","",162,[[["self"]],["span"]]],[11,"from","","",162,[[["t"]],["t"]]],[11,"into","","",162,[[["self"]],["u"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,N],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"not_found","","",162,[[["str"],["str"]],["e"]]],[11,"span","","",163,[[["self"]],["span"]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"to_owned","","",163,[[["self"]],["t"]]],[11,"clone_into","","",163,N],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"not_found","","",163,[[["str"],["str"]],["e"]]],[11,"span","","",164,[[["self"]],["span"]]],[11,"from","","",164,[[["t"]],["t"]]],[11,"into","","",164,[[["self"]],["u"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,N],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"not_found","","",164,[[["str"],["str"]],["e"]]],[11,"span","","",165,[[["self"]],["span"]]],[11,"from","","",165,[[["t"]],["t"]]],[11,"into","","",165,[[["self"]],["u"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,N],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"not_found","","",165,[[["str"],["str"]],["e"]]],[11,"span","","",166,[[["self"]],["span"]]],[11,"from","","",166,[[["t"]],["t"]]],[11,"into","","",166,[[["self"]],["u"]]],[11,"to_owned","","",166,[[["self"]],["t"]]],[11,"clone_into","","",166,N],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"try_into","","",166,[[["self"]],["result"]]],[11,"get_type_id","","",166,[[["self"]],["typeid"]]],[11,"not_found","","",166,[[["str"],["str"]],["e"]]],[11,"span","","",167,[[["self"]],["span"]]],[11,"from","","",167,[[["t"]],["t"]]],[11,"into","","",167,[[["self"]],["u"]]],[11,"to_owned","","",167,[[["self"]],["t"]]],[11,"clone_into","","",167,N],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"try_into","","",167,[[["self"]],["result"]]],[11,"get_type_id","","",167,[[["self"]],["typeid"]]],[11,"not_found","","",167,[[["str"],["str"]],["e"]]],[11,"span","","",168,[[["self"]],["span"]]],[11,"from","","",168,[[["t"]],["t"]]],[11,"into","","",168,[[["self"]],["u"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,N],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"try_into","","",168,[[["self"]],["result"]]],[11,"get_type_id","","",168,[[["self"]],["typeid"]]],[11,"not_found","","",168,[[["str"],["str"]],["e"]]],[11,"span","","",169,[[["self"]],["span"]]],[11,"from","","",169,[[["t"]],["t"]]],[11,"into","","",169,[[["self"]],["u"]]],[11,"to_owned","","",169,[[["self"]],["t"]]],[11,"clone_into","","",169,N],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"try_into","","",169,[[["self"]],["result"]]],[11,"get_type_id","","",169,[[["self"]],["typeid"]]],[11,"not_found","","",169,[[["str"],["str"]],["e"]]],[11,"span","","",170,[[["self"]],["span"]]],[11,"from","","",170,[[["t"]],["t"]]],[11,"into","","",170,[[["self"]],["u"]]],[11,"to_owned","","",170,[[["self"]],["t"]]],[11,"clone_into","","",170,N],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"try_into","","",170,[[["self"]],["result"]]],[11,"get_type_id","","",170,[[["self"]],["typeid"]]],[11,"not_found","","",170,[[["str"],["str"]],["e"]]],[11,"span","","",171,[[["self"]],["span"]]],[11,"from","","",171,[[["t"]],["t"]]],[11,"into","","",171,[[["self"]],["u"]]],[11,"to_owned","","",171,[[["self"]],["t"]]],[11,"clone_into","","",171,N],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"try_into","","",171,[[["self"]],["result"]]],[11,"get_type_id","","",171,[[["self"]],["typeid"]]],[11,"not_found","","",171,[[["str"],["str"]],["e"]]],[11,"span","","",172,[[["self"]],["span"]]],[11,"from","","",172,[[["t"]],["t"]]],[11,"into","","",172,[[["self"]],["u"]]],[11,"to_owned","","",172,[[["self"]],["t"]]],[11,"clone_into","","",172,N],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"try_into","","",172,[[["self"]],["result"]]],[11,"get_type_id","","",172,[[["self"]],["typeid"]]],[11,"not_found","","",172,[[["str"],["str"]],["e"]]],[11,"span","","",173,[[["self"]],["span"]]],[11,"from","","",173,[[["t"]],["t"]]],[11,"into","","",173,[[["self"]],["u"]]],[11,"to_owned","","",173,[[["self"]],["t"]]],[11,"clone_into","","",173,N],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"try_into","","",173,[[["self"]],["result"]]],[11,"get_type_id","","",173,[[["self"]],["typeid"]]],[11,"not_found","","",173,[[["str"],["str"]],["e"]]],[11,"span","","",174,[[["self"]],["span"]]],[11,"from","","",174,[[["t"]],["t"]]],[11,"into","","",174,[[["self"]],["u"]]],[11,"to_owned","","",174,[[["self"]],["t"]]],[11,"clone_into","","",174,N],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"try_into","","",174,[[["self"]],["result"]]],[11,"get_type_id","","",174,[[["self"]],["typeid"]]],[11,"not_found","","",174,[[["str"],["str"]],["e"]]],[11,"span","","",175,[[["self"]],["span"]]],[11,"from","","",175,[[["t"]],["t"]]],[11,"into","","",175,[[["self"]],["u"]]],[11,"to_owned","","",175,[[["self"]],["t"]]],[11,"clone_into","","",175,N],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"try_into","","",175,[[["self"]],["result"]]],[11,"get_type_id","","",175,[[["self"]],["typeid"]]],[11,"not_found","","",175,[[["str"],["str"]],["e"]]],[11,"span","","",176,[[["self"]],["span"]]],[11,"from","","",176,[[["t"]],["t"]]],[11,"into","","",176,[[["self"]],["u"]]],[11,"to_owned","","",176,[[["self"]],["t"]]],[11,"clone_into","","",176,N],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"try_into","","",176,[[["self"]],["result"]]],[11,"get_type_id","","",176,[[["self"]],["typeid"]]],[11,"not_found","","",176,[[["str"],["str"]],["e"]]],[11,"span","","",177,[[["self"]],["span"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"into","","",177,[[["self"]],["u"]]],[11,"to_owned","","",177,[[["self"]],["t"]]],[11,"clone_into","","",177,N],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"try_into","","",177,[[["self"]],["result"]]],[11,"get_type_id","","",177,[[["self"]],["typeid"]]],[11,"not_found","","",177,[[["str"],["str"]],["e"]]],[11,"span","","",178,[[["self"]],["span"]]],[11,"from","","",178,[[["t"]],["t"]]],[11,"into","","",178,[[["self"]],["u"]]],[11,"to_owned","","",178,[[["self"]],["t"]]],[11,"clone_into","","",178,N],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"try_into","","",178,[[["self"]],["result"]]],[11,"get_type_id","","",178,[[["self"]],["typeid"]]],[11,"not_found","","",178,[[["str"],["str"]],["e"]]],[11,"span","","",179,[[["self"]],["span"]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"into","","",179,[[["self"]],["u"]]],[11,"to_owned","","",179,[[["self"]],["t"]]],[11,"clone_into","","",179,N],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"try_into","","",179,[[["self"]],["result"]]],[11,"get_type_id","","",179,[[["self"]],["typeid"]]],[11,"not_found","","",179,[[["str"],["str"]],["e"]]],[11,"span","","",180,[[["self"]],["span"]]],[11,"from","","",180,[[["t"]],["t"]]],[11,"into","","",180,[[["self"]],["u"]]],[11,"to_owned","","",180,[[["self"]],["t"]]],[11,"clone_into","","",180,N],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"try_into","","",180,[[["self"]],["result"]]],[11,"get_type_id","","",180,[[["self"]],["typeid"]]],[11,"not_found","","",180,[[["str"],["str"]],["e"]]],[11,"from","syn::buffer","",221,[[["t"]],["t"]]],[11,"into","","",221,[[["self"]],["u"]]],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"try_into","","",221,[[["self"]],["result"]]],[11,"get_type_id","","",221,[[["self"]],["typeid"]]],[11,"not_found","","",221,[[["str"],["str"]],["e"]]],[11,"from","","",222,[[["t"]],["t"]]],[11,"into","","",222,[[["self"]],["u"]]],[11,"to_owned","","",222,[[["self"]],["t"]]],[11,"clone_into","","",222,N],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"try_into","","",222,[[["self"]],["result"]]],[11,"get_type_id","","",222,[[["self"]],["typeid"]]],[11,"not_found","","",222,[[["str"],["str"]],["e"]]],[11,"span","syn::punctuated","",224,[[["self"]],["span"]]],[11,"from","","",224,[[["t"]],["t"]]],[11,"into_iter","","",224,[[["self"]],["i"]]],[11,"into","","",224,[[["self"]],["u"]]],[11,"to_owned","","",224,[[["self"]],["t"]]],[11,"clone_into","","",224,N],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"try_into","","",224,[[["self"]],["result"]]],[11,"get_type_id","","",224,[[["self"]],["typeid"]]],[11,"not_found","","",224,[[["str"],["str"]],["e"]]],[11,"from","","",225,[[["t"]],["t"]]],[11,"into_iter","","",225,[[["self"]],["i"]]],[11,"into","","",225,[[["self"]],["u"]]],[11,"try_from","","",225,[[["u"]],["result"]]],[11,"borrow","","",225,[[["self"]],["t"]]],[11,"borrow_mut","","",225,[[["self"]],["t"]]],[11,"try_into","","",225,[[["self"]],["result"]]],[11,"get_type_id","","",225,[[["self"]],["typeid"]]],[11,"not_found","","",225,[[["str"],["str"]],["e"]]],[11,"from","","",226,[[["t"]],["t"]]],[11,"into_iter","","",226,[[["self"]],["i"]]],[11,"into","","",226,[[["self"]],["u"]]],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"try_into","","",226,[[["self"]],["result"]]],[11,"get_type_id","","",226,[[["self"]],["typeid"]]],[11,"not_found","","",226,[[["str"],["str"]],["e"]]],[11,"from","","",227,[[["t"]],["t"]]],[11,"into_iter","","",227,[[["self"]],["i"]]],[11,"into","","",227,[[["self"]],["u"]]],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"try_into","","",227,[[["self"]],["result"]]],[11,"get_type_id","","",227,[[["self"]],["typeid"]]],[11,"not_found","","",227,[[["str"],["str"]],["e"]]],[11,"from","","",228,[[["t"]],["t"]]],[11,"into_iter","","",228,[[["self"]],["i"]]],[11,"into","","",228,[[["self"]],["u"]]],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"try_into","","",228,[[["self"]],["result"]]],[11,"get_type_id","","",228,[[["self"]],["typeid"]]],[11,"not_found","","",228,[[["str"],["str"]],["e"]]],[11,"from","","",229,[[["t"]],["t"]]],[11,"into_iter","","",229,[[["self"]],["i"]]],[11,"into","","",229,[[["self"]],["u"]]],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"try_into","","",229,[[["self"]],["result"]]],[11,"get_type_id","","",229,[[["self"]],["typeid"]]],[11,"not_found","","",229,[[["str"],["str"]],["e"]]],[11,"from","","",230,[[["t"]],["t"]]],[11,"into_iter","","",230,[[["self"]],["i"]]],[11,"into","","",230,[[["self"]],["u"]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"try_into","","",230,[[["self"]],["result"]]],[11,"get_type_id","","",230,[[["self"]],["typeid"]]],[11,"not_found","","",230,[[["str"],["str"]],["e"]]],[11,"span","","",223,[[["self"]],["span"]]],[11,"from","","",223,[[["t"]],["t"]]],[11,"into","","",223,[[["self"]],["u"]]],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"try_into","","",223,[[["self"]],["result"]]],[11,"get_type_id","","",223,[[["self"]],["typeid"]]],[11,"not_found","","",223,[[["str"],["str"]],["e"]]],[11,"to_string","syn::synom","",236,[[["self"]],["string"]]],[11,"from","","",236,[[["t"]],["t"]]],[11,"into","","",236,[[["self"]],["u"]]],[11,"try_from","","",236,[[["u"]],["result"]]],[11,"borrow","","",236,[[["self"]],["t"]]],[11,"borrow_mut","","",236,[[["self"]],["t"]]],[11,"try_into","","",236,[[["self"]],["result"]]],[11,"get_type_id","","",236,[[["self"]],["typeid"]]],[11,"not_found","","",236,[[["str"],["str"]],["e"]]],[11,"visit_abi","syn::visit","",235,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",235,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_attr_style","","",235,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",235,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",235,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",235,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",235,[[["self"],["binop"]]]],[11,"visit_binding","","",235,[[["self"],["binding"]]]],[11,"visit_bound_lifetimes","","",235,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",235,[[["self"],["constparam"]]]],[11,"visit_data","","",235,[[["self"],["data"]]]],[11,"visit_data_enum","","",235,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",235,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",235,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",235,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",235,[[["self"],["expr"]]]],[11,"visit_expr_binary","","",235,[[["self"],["exprbinary"]]]],[11,"visit_expr_call","","",235,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",235,[[["self"],["exprcast"]]]],[11,"visit_expr_field","","",235,[[["self"],["exprfield"]]]],[11,"visit_expr_index","","",235,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",235,[[["self"],["exprlit"]]]],[11,"visit_expr_paren","","",235,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",235,[[["self"],["exprpath"]]]],[11,"visit_expr_unary","","",235,[[["self"],["exprunary"]]]],[11,"visit_expr_verbatim","","",235,[[["self"],["exprverbatim"]]]],[11,"visit_field","","",235,[[["self"],["field"]]]],[11,"visit_fields","","",235,[[["self"],["fields"]]]],[11,"visit_fields_named","","",235,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",235,[[["self"],["fieldsunnamed"]]]],[11,"visit_generic_argument","","",235,[[["self"],["genericargument"]]]],[11,"visit_generic_param","","",235,[[["self"],["genericparam"]]]],[11,"visit_generics","","",235,[[["self"],["generics"]]]],[11,"visit_ident","","",235,[[["self"],["ident"]]]],[11,"visit_index","","",235,[[["self"],["index"]]]],[11,"visit_lifetime","","",235,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",235,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",235,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",235,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",235,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",235,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",235,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",235,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",235,[[["self"],["litint"]]]],[11,"visit_lit_str","","",235,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",235,[[["self"],["litverbatim"]]]],[11,"visit_macro","","",235,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",235,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",235,[[["self"],["member"]]]],[11,"visit_meta","","",235,[[["self"],["meta"]]]],[11,"visit_meta_list","","",235,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",235,[[["self"],["metanamevalue"]]]],[11,"visit_nested_meta","","",235,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",235,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_path","","",235,[[["self"],["path"]]]],[11,"visit_path_arguments","","",235,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",235,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",235,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",235,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",235,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",235,[[["self"],["qself"]]]],[11,"visit_return_type","","",235,[[["self"],["returntype"]]]],[11,"visit_span","","",235,[[["self"],["span"]]]],[11,"visit_trait_bound","","",235,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",235,[[["self"],["traitboundmodifier"]]]],[11,"visit_type","","",235,[[["self"],["type"]]]],[11,"visit_type_array","","",235,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",235,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",235,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",235,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",235,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",235,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",235,[[["self"],["typenever"]]]],[11,"visit_type_param","","",235,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",235,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",235,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",235,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",235,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",235,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",235,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",235,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",235,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",235,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",235,[[["self"],["unop"]]]],[11,"visit_variant","","",235,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",235,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",235,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",235,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",235,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",235,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",235,[[["self"],["wherepredicate"]]]]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Ident"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprCatch"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"IdentExt"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[8,"Visit"],[3,"ParseError"]]};
searchIndex["textwrap"]={"doc":"`textwrap` provides functions for word wrapping and filling text.","items":[[3,"NoHyphenation","textwrap","Use this as a [`Wrapper.splitter`] to avoid any kind of hyphenation:",N,N],[3,"HyphenSplitter","","Simple and default way to split words: splitting on existing hyphens only.",N,N],[3,"Wrapper","","A Wrapper holds settings for wrapping and filling text. Use it when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions are not flexible enough.",N,N],[12,"width","","The width in columns at which the text will be wrapped.",0,N],[12,"initial_indent","","Indentation used for the first line of output.",0,N],[12,"subsequent_indent","","Indentation used for subsequent lines of output.",0,N],[12,"break_words","","Allow long words to be broken if they cannot fit on a line. When set to `false`, some lines may be longer than `self.width`.",0,N],[12,"splitter","","The method for splitting words. If the `hyphenation` feature is enabled, you can use a `hyphenation::language::Corpus` here to get language-aware hyphenation.",0,N],[3,"IntoWrapIter","","An iterator over the lines of the input string which owns a `Wrapper`. An instance of `IntoWrapIter` is typically obtained through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].",N,N],[3,"WrapIter","","An iterator over the lines of the input string which borrows a `Wrapper`. An instance of `WrapIter` is typically obtained through the [`Wrapper::wrap_iter`] method.",N,N],[5,"fill","","Fill a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",N,[[["str"],["usize"]],["string"]]],[5,"wrap","","Wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",N,[[["str"],["usize"]],["vec",["cow"]]]],[5,"wrap_iter","","Lazily wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",N,[[["str"],["usize"]],["intowrapiter",["hyphensplitter"]]]],[5,"indent","","Add prefix to each non-empty line.",N,[[["str"],["str"]],["string"]]],[5,"dedent","","Removes common leading whitespace from each line.",N,[[["str"]],["string"]]],[8,"WordSplitter","","An interface for splitting words.",N,N],[10,"split","","Return all possible splits of word. Each split is a triple with a head, a hyphen, and a tail where `head + &hyphen + &tail == word`. The hyphen can be empty if there is already a hyphen in the head.",1,[[["self"],["str"]],["vec"]]],[11,"clone","","",2,[[["self"]],["nohyphenation"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"split","","",2,[[["self"],["str"]],["vec"]]],[11,"clone","","",3,[[["self"]],["hyphensplitter"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"split","","",3,[[["self"],["str"]],["vec"]]],[11,"clone","","",0,[[["self"]],["wrapper"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken. A [`HyphenSplitter`] will be used by default for splitting words. See the [`WordSplitter`] trait for other options.",0,[[["usize"]],["wrapper",["hyphensplitter"]]]],[11,"with_splitter","","Use the given [`WordSplitter`] to create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken.",0,[[["usize"],["s"]],["wrapper"]]],[11,"initial_indent","","Change [`self.initial_indent`]. The initial indentation is used on the very first line of output.",0,[[["self"],["str"]],["wrapper"]]],[11,"subsequent_indent","","Change [`self.subsequent_indent`]. The subsequent indentation is used on lines following the first line of output.",0,[[["self"],["str"]],["wrapper"]]],[11,"break_words","","Change [`self.break_words`]. This controls if words longer than `self.width` can be broken, or if they will be left sticking out into the right margin.",0,[[["self"],["bool"]],["wrapper"]]],[11,"fill","","Fill a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,[[["self"],["str"]],["string"]]],[11,"wrap","","Wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,[[["self"],["str"]],["vec",["cow"]]]],[11,"wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,[[["self"],["str"]],["wrapiter"]]],[11,"into_wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,[[["self"],["str"]],["intowrapiter"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","","",4,[[["self"]],["option",["cow"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"next","","",5,[[["self"]],["option",["cow"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]]],"paths":[[3,"Wrapper"],[8,"WordSplitter"],[3,"NoHyphenation"],[3,"HyphenSplitter"],[3,"IntoWrapIter"],[3,"WrapIter"]]};
searchIndex["time"]={"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",N,N],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",N,N],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",N,N],[12,"sec","","",0,N],[12,"nsec","","",0,N],[3,"PreciseTime","","An opaque structure representing a moment in time.",N,N],[3,"SteadyTime","","A structure representing a moment in time.",N,N],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",N,N],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,N],[12,"tm_min","","Minutes after the hour - [0, 59]",1,N],[12,"tm_hour","","Hours after midnight - [0, 23]",1,N],[12,"tm_mday","","Day of the month - [1, 31]",1,N],[12,"tm_mon","","Months since January - [0, 11]",1,N],[12,"tm_year","","Years since 1900",1,N],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,N],[12,"tm_yday","","Days since January 1 - [0, 365]",1,N],[12,"tm_isdst","","Daylight Saving Time flag.",1,N],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,N],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,N],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",N,N],[4,"ParseError","","",N,N],[13,"InvalidSecond","","",2,N],[13,"InvalidMinute","","",2,N],[13,"InvalidHour","","",2,N],[13,"InvalidDay","","",2,N],[13,"InvalidMonth","","",2,N],[13,"InvalidYear","","",2,N],[13,"InvalidDayOfWeek","","",2,N],[13,"InvalidDayOfMonth","","",2,N],[13,"InvalidDayOfYear","","",2,N],[13,"InvalidZoneOffset","","",2,N],[13,"InvalidTime","","",2,N],[13,"InvalidSecondsSinceEpoch","","",2,N],[13,"MissingFormatConverter","","",2,N],[13,"InvalidFormatSpecifier","","",2,N],[13,"UnexpectedCharacter","","",2,N],[5,"strptime","","Parses the time from the string according to the format string.",N,[[["str"],["str"]],["result",["tm","parseerror"]]]],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",N,[[],["timespec"]]],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",N,[[],["u64"]]],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",N,[[],["f64"]]],[5,"tzset","","",N,[[]]],[5,"empty_tm","","",N,[[],["tm"]]],[5,"at_utc","","Returns the specified time in UTC",N,[[["timespec"]],["tm"]]],[5,"now_utc","","Returns the current time in UTC",N,[[],["tm"]]],[5,"at","","Returns the specified time in the local timezone",N,[[["timespec"]],["tm"]]],[5,"now","","Returns the current time in the local timezone",N,[[],["tm"]]],[5,"strftime","","Formats the time according to the format string.",N,[[["str"],["tm"]],["result",["string","parseerror"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["duration"]]],[11,"eq","","",4,[[["self"],["duration"]],["bool"]]],[11,"ne","","",4,[[["self"],["duration"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["duration"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["duration"]],["bool"]]],[11,"le","","",4,[[["self"],["duration"]],["bool"]]],[11,"gt","","",4,[[["self"],["duration"]],["bool"]]],[11,"ge","","",4,[[["self"],["duration"]],["bool"]]],[11,"cmp","","",4,[[["self"],["duration"]],["ordering"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,[[["i64"]],["duration"]]],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,[[["i64"]],["duration"]]],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,[[["i64"]],["duration"]]],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,[[["i64"]],["duration"]]],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,[[["f"]],["duration"]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,[[["self"]],["i64"]]],[11,"num_days","","Returns the total number of whole days in the duration.",4,[[["self"]],["i64"]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,[[["self"]],["i64"]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,[[["self"]],["i64"]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,[[["self"]],["i64"]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,[[["self"]],["i64"]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,[[["self"]],["option",["i64"]]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,[[["self"]],["option",["i64"]]]],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,[[["self"],["duration"]],["option",["duration"]]]],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,[[],["duration"]]],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,[[],["duration"]]],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,[[],["duration"]]],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,[[["self"]],["bool"]]],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,[[["stdduration"]],["result",["duration","outofrangeerror"]]]],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,[[["self"]],["result",["stdduration","outofrangeerror"]]]],[11,"neg","","",4,[[["self"]],["duration"]]],[11,"add","","",4,[[["self"],["duration"]],["duration"]]],[11,"sub","","",4,[[["self"],["duration"]],["duration"]]],[11,"mul","","",4,[[["self"],["i32"]],["duration"]]],[11,"div","","",4,[[["self"],["i32"]],["duration"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["outofrangeerror"]]],[11,"eq","","",5,[[["self"],["outofrangeerror"]],["bool"]]],[11,"ne","","",5,[[["self"],["outofrangeerror"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"clone","","",0,[[["self"]],["timespec"]]],[11,"eq","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ne","","",0,[[["self"],["timespec"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["timespec"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"le","","",0,[[["self"],["timespec"]],["bool"]]],[11,"gt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ge","","",0,[[["self"],["timespec"]],["bool"]]],[11,"cmp","","",0,[[["self"],["timespec"]],["ordering"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"new","","",0,[[["i64"],["i32"]],["timespec"]]],[11,"add","","",0,[[["self"],["duration"]],["timespec"]]],[11,"sub","","",0,[[["self"],["duration"]],["timespec"]]],[11,"sub","","",0,[[["self"],["timespec"]],["duration"]]],[11,"clone","","",6,[[["self"]],["precisetime"]]],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,[[],["precisetime"]]],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,[[["self"],["precisetime"]],["duration"]]],[11,"clone","","",7,[[["self"]],["steadytime"]]],[11,"partial_cmp","","",7,[[["self"],["steadytime"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"le","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"gt","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"ge","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"cmp","","",7,[[["self"],["steadytime"]],["ordering"]]],[11,"eq","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"ne","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,[[],["steadytime"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"sub","","",7,[[["self"],["steadytime"]],["duration"]]],[11,"sub","","",7,[[["self"],["duration"]],["steadytime"]]],[11,"add","","",7,[[["self"],["duration"]],["steadytime"]]],[11,"clone","","",1,[[["self"]],["tm"]]],[11,"eq","","",1,[[["self"],["tm"]],["bool"]]],[11,"ne","","",1,[[["self"],["tm"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"add","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"sub","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"sub","","",1,[[["self"],["tm"]],["duration"]]],[11,"partial_cmp","","",1,[[["self"],["tm"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["tm"]],["ordering"]]],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,[[["self"]],["timespec"]]],[11,"to_local","","Convert time to the local timezone",1,[[["self"]],["tm"]]],[11,"to_utc","","Convert time to the UTC",1,[[["self"]],["tm"]]],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,[[["self"]],["tmfmt"]]],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,[[["self"]],["tmfmt"]]],[11,"strftime","","Formats the time according to the format string.",1,[[["self"],["str"]],["result",["tmfmt","parseerror"]]]],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,[[["self"]],["tmfmt"]]],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,[[["self"]],["tmfmt"]]],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,[[["self"]],["tmfmt"]]],[11,"eq","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["parseerror"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["toml"]={"doc":"A [TOML]-parsing library","items":[[0,"value","toml","Definition of a TOML value",N,N],[3,"Datetime","toml::value","A parsed TOML datetime value",N,N],[3,"DatetimeParseError","","Error returned from parsing a `Datetime` in the `FromStr` implementation.",N,N],[4,"Value","","Representation of a TOML value.",N,N],[13,"String","","Represents a TOML string",0,N],[13,"Integer","","Represents a TOML integer",0,N],[13,"Float","","Represents a TOML float",0,N],[13,"Boolean","","Represents a TOML boolean",0,N],[13,"Datetime","","Represents a TOML datetime",0,N],[13,"Array","","Represents a TOML array",0,N],[13,"Table","","Represents a TOML table",0,N],[6,"Array","","Type representing a TOML array, payload of the `Value::Array` variant",N,N],[6,"Table","","Type representing a TOML table, payload of the `Value::Table` variant",N,N],[8,"Index","","Types that can be used to index a `toml::Value`",N,N],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"clone","","",0,[[["self"]],["value"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"try_from","","Convert a `T` into `toml::Value` which is an enum that can represent any valid TOML data.",0,[[["t"]],["result",["value","error"]]]],[11,"try_into","","Interpret a `toml::Value` as an instance of type `T`.",0,[[["self"]],["result",["error"]]]],[11,"get","","Index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"as_integer","","Extracts the integer value if it is an integer.",0,[[["self"]],["option",["i64"]]]],[11,"is_integer","","Tests whether this value is an integer.",0,[[["self"]],["bool"]]],[11,"as_float","","Extracts the float value if it is a float.",0,[[["self"]],["option",["f64"]]]],[11,"is_float","","Tests whether this value is a float.",0,[[["self"]],["bool"]]],[11,"as_bool","","Extracts the boolean value if it is a boolean.",0,[[["self"]],["option",["bool"]]]],[11,"is_bool","","Tests whether this value is a boolean.",0,[[["self"]],["bool"]]],[11,"as_str","","Extracts the string of this value if it is a string.",0,[[["self"]],["option",["str"]]]],[11,"is_str","","Tests if this value is a string.",0,[[["self"]],["bool"]]],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",0,[[["self"]],["option",["datetime"]]]],[11,"is_datetime","","Tests whether this value is a datetime.",0,[[["self"]],["bool"]]],[11,"as_array","","Extracts the array value if it is an array.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","Extracts the array value if it is an array.",0,[[["self"]],["option",["vec"]]]],[11,"is_array","","Tests whether this value is an array.",0,[[["self"]],["bool"]]],[11,"as_table","","Extracts the table value if it is a table.",0,[[["self"]],["option",["table"]]]],[11,"as_table_mut","","Extracts the table value if it is a table.",0,[[["self"]],["option",["table"]]]],[11,"is_table","","Tests whether this value is a table.",0,[[["self"]],["bool"]]],[11,"same_type","","Tests whether this and another value have the same type.",0,[[["self"],["value"]],["bool"]]],[11,"type_str","","Returns a human-readable representation of the type of this value.",0,[[["self"]],["str"]]],[11,"index","","",0,[[["self"],["i"]],["value"]]],[11,"index_mut","","",0,[[["self"],["i"]],["value"]]],[11,"from","","",0,[[["str"]],["value"]]],[11,"from","","",0,[[["vec"]],["value"]]],[11,"from","","",0,[[["btreemap"]],["value"]]],[11,"from","","",0,[[["hashmap"]],["value"]]],[11,"from","","",0,[[["string"]],["value"]]],[11,"from","","",0,[[["i64"]],["value"]]],[11,"from","","",0,[[["i32"]],["value"]]],[11,"from","","",0,[[["i8"]],["value"]]],[11,"from","","",0,[[["u8"]],["value"]]],[11,"from","","",0,[[["u32"]],["value"]]],[11,"from","","",0,[[["f64"]],["value"]]],[11,"from","","",0,[[["f32"]],["value"]]],[11,"from","","",0,[[["bool"]],["value"]]],[11,"from","","",0,[[["datetime"]],["value"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result",["value"]]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"into_deserializer","","",0,[[["self"]],["self"]]],[11,"eq","","",1,[[["self"],["datetime"]],["bool"]]],[11,"ne","","",1,[[["self"],["datetime"]],["bool"]]],[11,"clone","","",1,[[["self"]],["datetime"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["datetimeparseerror"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",1,[[["str"]],["result",["datetime","datetimeparseerror"]]]],[11,"serialize","","",1,[[["self"],["s"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result",["datetime"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[0,"ser","toml","Serializing Rust structures into TOML.",N,N],[3,"Serializer","toml::ser","Serialization implementation for TOML.",N,N],[4,"Error","","Errors that can occur when serializing a type.",N,N],[13,"UnsupportedType","","Indicates that a Rust type was requested to be serialized but it was not supported.",3,N],[13,"KeyNotString","","The key of all TOML maps must be strings, but serialization was attempted where the key of a map was not a string.",3,N],[13,"ArrayMixedType","","Arrays in TOML must have a homogenous type, but a heterogeneous array was emitted.",3,N],[13,"ValueAfterTable","","All values in a TOML table must be emitted before further tables are emitted. If a value is emitted after a table then this error is generated.",3,N],[13,"DateInvalid","","A serialized date was invalid.",3,N],[13,"NumberInvalid","","A serialized number was invalid.",3,N],[13,"UnsupportedNone","","None was attempted to be serialized, but it's not supported.",3,N],[13,"Custom","","A custom error which could be generated when serializing a particular type.",3,N],[5,"to_vec","","Serialize the given data structure as a TOML byte vector.",N,[[["t"]],["result",["vec","error"]]]],[5,"to_string","","Serialize the given data structure as a String of TOML.",N,[[["t"]],["result",["string","error"]]]],[5,"to_string_pretty","","Serialize the given data structure as a \"pretty\" String of TOML.",N,[[["t"]],["result",["string","error"]]]],[5,"tables_last","","Convenience function to serialize items in a map in an order valid with TOML.",N,[[["i"],["s"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["error"]],["bool"]]],[11,"ne","","",3,[[["self"],["error"]],["bool"]]],[11,"clone","","",3,[[["self"]],["error"]]],[11,"new","","Creates a new serializer which will emit TOML into the buffer provided.",4,[[["string"]],["serializer"]]],[11,"pretty","","Instantiate a \"pretty\" formatter",4,[[["string"]],["serializer"]]],[11,"pretty_string","","Enable or Disable pretty strings",4,[[["self"],["bool"]],["self"]]],[11,"pretty_string_literal","","Enable or Disable Literal strings for pretty strings",4,[[["self"],["bool"]],["self"]]],[11,"pretty_array","","Enable or Disable pretty arrays",4,[[["self"],["bool"]],["self"]]],[11,"pretty_array_indent","","Set the indent for pretty arrays",4,[[["self"],["usize"]],["self"]]],[11,"pretty_array_trailing_comma","","Specify whether to use a trailing comma when serializing pretty arrays",4,[[["self"],["bool"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"custom","","",3,[[["t"]],["error"]]],[0,"de","toml","Deserializing TOML into Rust structures.",N,N],[3,"Error","toml::de","Errors that can occur when deserializing a type.",N,N],[3,"Deserializer","","Deserialization implementation for TOML.",N,N],[5,"from_slice","","Deserializes a byte slice into a type.",N,N],[5,"from_str","","Deserializes a string into a type.",N,[[["str"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["error"]]],[11,"new","","Creates a new deserializer which will be deserializing the string provided.",6,[[["str"]],["deserializer"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.  This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace/comments.",6,[[["self"]],["result",["error"]]]],[11,"set_require_newline_after_table","","Historical versions of toml-rs accidentally allowed a newline after a table definition, but the TOML spec requires a newline after a table definition header.",6,[[["self"],["bool"]]]],[11,"line_col","","Produces a (line, column) pair of the position of the error if available",5,[[["self"]],["option"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"custom","","",5,[[["t"]],["error"]]],[14,"toml","toml","Construct a [`toml::Value`] from TOML syntax.",N,N],[11,"to_string","toml::value","",1,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","toml::ser","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","toml::de","",5,[[["self"]],["string"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]]],"paths":[[4,"Value"],[3,"Datetime"],[3,"DatetimeParseError"],[4,"Error"],[3,"Serializer"],[3,"Error"],[3,"Deserializer"]]};
searchIndex["traitobject"]={"doc":"traitobject","items":[[5,"data","traitobject","Get the data pointer from this trait object.",N,N],[5,"data_mut","","Get the data pointer from this trait object, mutably.",N,N],[8,"Trait","","A trait implemented for all trait objects.",N,N]],"paths":[]};
searchIndex["typeable"]={"doc":"Exposes `Typeable`, which exposes the `get_type` method, which gives the `TypeId` of any 'static type.","items":[[8,"Typeable","typeable","Universal mixin trait for adding a `get_type` method.",N,N],[11,"get_type","","Get the `TypeId` of this object.",0,[[["self"]],["typeid"]]]],"paths":[[8,"Typeable"]]};
searchIndex["unicase"]={"doc":"Case","items":[[3,"UniCase","unicase","Case Insensitive wrapper of strings.",N,N],[12,"0","","",0,N],[11,"clone","","",0,[[["self"]],["unicase"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"deref","","",0,[[["self"]],["s"]]],[11,"deref_mut","","",0,[[["self"]],["s"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["s2"]],["bool"]]],[11,"from_str","","",0,[[["str"]],["result",["unicase"]]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"into","","",0,[[["self"]],["str"]]],[11,"into","","",0,[[["self"]],["string"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[3,"UniCase"]]};
searchIndex["unicode_bidi"]={"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed right-to-left and left-to-right text.  It is written in safe Rust, compatible with the current stable release.","items":[[3,"ParagraphInfo","unicode_bidi","Bidi information about a single paragraph",N,N],[12,"range","","The paragraphs boundaries within the text, as byte indices.",0,N],[12,"level","","The paragraph embedding level.",0,N],[3,"InitialInfo","","Initial bidi information of the text.",N,N],[12,"text","","The text",1,N],[12,"original_classes","","The BidiClass of the character at each byte in the text. If a character is multiple bytes, its class will appear multiple times in the vector.",1,N],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",1,N],[3,"BidiInfo","","Bidi information of the text.",N,N],[12,"text","","The text",2,N],[12,"original_classes","","The BidiClass of the character at each byte in the text.",2,N],[12,"levels","","The directional embedding level of each byte in the text.",2,N],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",2,N],[4,"BidiClass","","Represents values of the Unicode character property `Bidi_Class`, also known as the bidirectional character type.",N,N],[13,"AL","","",3,N],[13,"AN","","",3,N],[13,"B","","",3,N],[13,"BN","","",3,N],[13,"CS","","",3,N],[13,"EN","","",3,N],[13,"ES","","",3,N],[13,"ET","","",3,N],[13,"FSI","","",3,N],[13,"L","","",3,N],[13,"LRE","","",3,N],[13,"LRI","","",3,N],[13,"LRO","","",3,N],[13,"NSM","","",3,N],[13,"ON","","",3,N],[13,"PDF","","",3,N],[13,"PDI","","",3,N],[13,"R","","",3,N],[13,"RLE","","",3,N],[13,"RLI","","",3,N],[13,"RLO","","",3,N],[13,"S","","",3,N],[13,"WS","","",3,N],[5,"bidi_class","","Find the `BidiClass` of a single char.",N,[[["char"]],["bidiclass"]]],[0,"deprecated","","This module holds deprecated assets only.",N,N],[5,"visual_runs","unicode_bidi::deprecated","Find the level runs within a line and return them in visual order.",N,N],[0,"format_chars","unicode_bidi","Directional Formatting Characters",N,N],[17,"ALM","unicode_bidi::format_chars","ARABIC LETTER MARK",N,N],[17,"LRM","","LEFT-TO-RIGHT MARK",N,N],[17,"RLM","","RIGHT-TO-LEFT MARK",N,N],[17,"LRI","","LEFT‑TO‑RIGHT ISOLATE",N,N],[17,"RLI","","RIGHT‑TO‑LEFT ISOLATE",N,N],[17,"FSI","","FIRST STRONG ISOLATE",N,N],[17,"PDI","","POP DIRECTIONAL ISOLATE",N,N],[17,"LRE","","LEFT-TO-RIGHT EMBEDDING",N,N],[17,"RLE","","RIGHT-TO-LEFT EMBEDDING",N,N],[17,"PDF","","POP DIRECTIONAL FORMATTING",N,N],[17,"LRO","","LEFT-TO-RIGHT OVERRIDE",N,N],[17,"RLO","","RIGHT-TO-LEFT OVERRIDE",N,N],[0,"level","unicode_bidi","Bidi Embedding Level",N,N],[3,"Level","unicode_bidi::level","Embedding Level",N,N],[4,"Error","","Errors that can occur on Level creation or mutation",N,N],[13,"OutOfRangeNumber","","Out-of-range (invalid) embedding level number.",4,N],[5,"has_rtl","","If levels has any RTL (odd) level",N,N],[17,"LTR_LEVEL","","",N,N],[17,"RTL_LEVEL","","",N,N],[17,"MAX_EXPLICIT_DEPTH","","During explicit level resolution, embedding level can go as high as `max_depth`.",N,N],[17,"MAX_IMPLICIT_DEPTH","","During implicit level resolution, embedding level can go as high as `max_depth + 1`.",N,N],[11,"clone","","",5,[[["self"]],["level"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",5,[[["self"],["level"]],["ordering"]]],[11,"eq","","",5,[[["self"],["level"]],["bool"]]],[11,"ne","","",5,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["level"]],["bool"]]],[11,"le","","",5,[[["self"],["level"]],["bool"]]],[11,"gt","","",5,[[["self"],["level"]],["bool"]]],[11,"ge","","",5,[[["self"],["level"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["error"]],["bool"]]],[11,"ltr","","New LTR level with smallest number value (0).",5,[[],["level"]]],[11,"rtl","","New RTL level with smallest number value (1).",5,[[],["level"]]],[11,"max_implicit_depth","","Maximum depth of the directional status stack during implicit resolutions.",5,[[],["u8"]]],[11,"max_explicit_depth","","Maximum depth of the directional status stack during explicit resolutions.",5,[[],["u8"]]],[11,"new","","Create new level, fail if number is larger than `max_depth + 1`.",5,[[["u8"]],["result",["level","error"]]]],[11,"new_explicit","","Create new level, fail if number is larger than `max_depth`.",5,[[["u8"]],["result",["level","error"]]]],[11,"number","","The level number.",5,[[["self"]],["u8"]]],[11,"is_ltr","","If this level is left-to-right.",5,[[["self"]],["bool"]]],[11,"is_rtl","","If this level is right-to-left.",5,[[["self"]],["bool"]]],[11,"raise","","Raise level by `amount`, fail if number is larger than `max_depth + 1`.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"raise_explicit","","Raise level by `amount`, fail if number is larger than `max_depth`.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"lower","","Lower level by `amount`, fail if number goes below zero.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"new_explicit_next_ltr","","The next LTR (even) level greater than this, or fail if number is larger than `max_depth`.",5,[[["self"]],["result",["level","error"]]]],[11,"new_explicit_next_rtl","","The next RTL (odd) level greater than this, or fail if number is larger than `max_depth`.",5,[[["self"]],["result",["level","error"]]]],[11,"new_lowest_ge_rtl","","The lowest RTL (odd) level greater than or equal to this, or fail if number is larger than `max_depth + 1`.",5,[[["self"]],["result",["level","error"]]]],[11,"bidi_class","","Generate a character type based on a level (as specified in steps X10 and N2).",5,[[["self"]],["bidiclass"]]],[11,"vec","","",5,N],[11,"into","","Convert to the level number",5,[[["self"]],["u8"]]],[11,"from","","Create level by number",5,[[["u8"]],["level"]]],[11,"eq","","",5,[[["self"],["str"]],["bool"]]],[11,"eq","","",5,[[["self"],["string"]],["bool"]]],[11,"clone","unicode_bidi","",3,[[["self"]],["bidiclass"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["bidiclass"]],["bool"]]],[6,"LevelRun","","A maximal substring of characters with the same embedding level.",N,N],[17,"UNICODE_VERSION","","The Unicode version of data",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["paragraphinfo"]],["bool"]]],[11,"ne","","",0,[[["self"],["paragraphinfo"]],["bool"]]],[11,"eq","","",1,[[["self"],["initialinfo"]],["bool"]]],[11,"ne","","",1,[[["self"],["initialinfo"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Find the paragraphs and BidiClasses in a string of text.",1,[[["str"],["option",["level"]]],["initialinfo"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["bidiinfo"]],["bool"]]],[11,"ne","","",2,[[["self"],["bidiinfo"]],["bool"]]],[11,"new","","Split the text into paragraphs and determine the bidi embedding levels for each paragraph.",2,[[["str"],["option",["level"]]],["bidiinfo"]]],[11,"reordered_levels","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per byte.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["vec",["level"]]]],[11,"reordered_levels_per_char","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per character.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["vec",["level"]]]],[11,"reorder_line","","Re-order a line based on resolved levels and return the line in display order.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["cow",["str"]]]],[11,"visual_runs","","Find the level runs within a line and return them in visual order.",2,N],[11,"has_rtl","","If processed text has any computed RTL levels",2,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","unicode_bidi::level","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]]],"paths":[[3,"ParagraphInfo"],[3,"InitialInfo"],[3,"BidiInfo"],[4,"BidiClass"],[4,"Error"],[3,"Level"]]};
searchIndex["unicode_normalization"]={"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",N,N],[3,"Recompositions","","External iterator for a string recomposition's characters.",N,N],[3,"StreamSafe","","UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in NFKD and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.",N,N],[4,"IsNormalized","","The QuickCheck algorithm can quickly determine if a text is or isn't normalized without any allocations in many cases, but it has to be able to return `Maybe` when a full decomposition and recomposition is necessary.",N,N],[13,"Yes","","The text is definitely normalized.",0,N],[13,"No","","The text is definitely not normalized.",0,N],[13,"Maybe","","The text may be normalized.",0,N],[5,"is_nfc","","Authoritatively check if a string is in NFC.",N,[[["str"]],["bool"]]],[5,"is_nfc_quick","","Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary.  In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.",N,[[["i"]],["isnormalized"]]],[5,"is_nfc_stream_safe","","Authoritatively check if a string is Stream-Safe NFC.",N,[[["str"]],["bool"]]],[5,"is_nfc_stream_safe_quick","","Quickly check if a string is Stream-Safe NFC.",N,[[["i"]],["isnormalized"]]],[5,"is_nfd","","Authoritatively check if a string is in NFD.",N,[[["str"]],["bool"]]],[5,"is_nfd_quick","","Quickly check if a string is in NFD.",N,[[["i"]],["isnormalized"]]],[5,"is_nfd_stream_safe","","Authoritatively check if a string is Stream-Safe NFD.",N,[[["str"]],["bool"]]],[5,"is_nfd_stream_safe_quick","","Quickly check if a string is Stream-Safe NFD.",N,[[["i"]],["isnormalized"]]],[11,"clone","","",1,[[["self"]],["decompositions"]]],[11,"next","","",1,[[["self"]],["option",["char"]]]],[11,"size_hint","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["recompositions"]]],[11,"next","","",2,[[["self"]],["option",["char"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["isnormalized"]],["bool"]]],[11,"next","","",3,[[["self"]],["option",["char"]]]],[0,"char","","Methods for composing and decomposing characters.",N,N],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",N,[[["char"],["f"]]]],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",N,[[["char"],["f"]]]],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",N,[[["char"],["char"]],["option",["char"]]]],[5,"canonical_combining_class","","",N,[[["char"]],["u8"]]],[5,"is_combining_mark","","",N,[[["char"]],["bool"]]],[17,"UNICODE_VERSION","unicode_normalization","",N,N],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",N,N],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",4,[[["self"]],["decompositions"]]],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",4,[[["self"]],["decompositions"]]],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",4,[[["self"]],["recompositions"]]],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",4,[[["self"]],["recompositions"]]],[10,"stream_safe","","An Iterator over the string with Conjoining Grapheme Joiner characters inserted according to the Stream-Safe Text Process (UAX15-D4)",4,[[["self"]],["streamsafe"]]],[11,"nfd","","",1,[[["self"]],["decompositions"]]],[11,"nfkd","","",1,[[["self"]],["decompositions"]]],[11,"nfc","","",1,[[["self"]],["recompositions"]]],[11,"nfkc","","",1,[[["self"]],["recompositions"]]],[11,"stream_safe","","",1,[[["self"]],["streamsafe"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"nfd","","",2,[[["self"]],["decompositions"]]],[11,"nfkd","","",2,[[["self"]],["decompositions"]]],[11,"nfc","","",2,[[["self"]],["recompositions"]]],[11,"nfkc","","",2,[[["self"]],["recompositions"]]],[11,"stream_safe","","",2,[[["self"]],["streamsafe"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"nfd","","",3,[[["self"]],["decompositions"]]],[11,"nfkd","","",3,[[["self"]],["decompositions"]]],[11,"nfc","","",3,[[["self"]],["recompositions"]]],[11,"nfkc","","",3,[[["self"]],["recompositions"]]],[11,"stream_safe","","",3,[[["self"]],["streamsafe"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"IsNormalized"],[3,"Decompositions"],[3,"Recompositions"],[3,"StreamSafe"],[8,"UnicodeNormalization"]]};
searchIndex["unicode_width"]={"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",N,N],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",N,N],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,[[["self"]],["option",["usize"]]]],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,[[["self"]],["option",["usize"]]]],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",N,N],[10,"width","","Returns the string's displayed width in columns.",1,[[["self"]],["usize"]]],[10,"width_cjk","","Returns the string's displayed width in columns.",1,[[["self"]],["usize"]]]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["unicode_xid"]={"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",N,N],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",N,N],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,[[["self"]],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,[[["self"]],["bool"]]]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"]={"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",N,N],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,[[["self"]],["t"]]],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,[[["self"]]]],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,[[["self"]],["t"]]],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,[[["self"]],["e"]]]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["untrusted"]={"doc":"untrusted.rs: Safe, fast, zero-panic, zero-crashing, zero-allocation parsing of untrusted inputs in Rust.","items":[[3,"Input","untrusted","A wrapper around `&'a [u8]` that helps in writing panic-free code.",N,N],[3,"Reader","","A read-only, forward-only* cursor into the data in an `Input`.",N,N],[3,"Mark","","An index into the already-parsed input of a `Reader`.",N,N],[3,"EndOfInput","","The error type used to indicate the end of the input was reached before the operation could be completed.",N,N],[5,"read_all_optional","","Calls `read` with the given input as a `Reader`, ensuring that `read` consumed the entire input. When `input` is `None`, `read` will be called with `None`.",N,[[["option",["input"]],["e"],["f"]],["result"]]],[11,"clone","","",0,[[["self"]],["input"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["input"]],["bool"]]],[11,"ne","","",0,[[["self"],["input"]],["bool"]]],[11,"from","","Construct a new `Input` for the given input `bytes`.",0,N],[11,"is_empty","","Returns `true` if the input is empty and false otherwise.",0,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the input.",0,N],[11,"len","","Returns the length of the `Input`.",0,[[["self"]],["usize"]]],[11,"read_all","","Calls `read` with the given input as a `Reader`, ensuring that `read` consumed the entire input. If `read` does not consume the entire input, `incomplete_read` is returned.",0,[[["self"],["e"],["f"]],["result"]]],[11,"read_all_mut","","Like `read_all`, except taking an `FnMut`.",0,[[["self"],["e"],["f"]],["result"]]],[11,"as_slice_less_safe","","Access the input as a slice so it can be processed by functions that are not written using the Input/Reader framework.",0,N],[11,"eq","","",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new Reader for the given input. Use `read_all`, `read_all_mut`, or `read_all_optional` instead of `Reader::new` whenever possible.",1,[[["input"]],["reader"]]],[11,"at_end","","Returns `true` if the reader is at the end of the input, and `false` otherwise.",1,[[["self"]],["bool"]]],[11,"get_input_between_marks","","Returns an `Input` for already-parsed input that has had its boundaries marked using `mark`.",1,[[["self"],["mark"],["mark"]],["result",["input","endofinput"]]]],[11,"mark","","Return the current position of the `Reader` for future use in a call to `get_input_between_marks`.",1,[[["self"]],["mark"]]],[11,"peek","","Returns `true` if there is at least one more byte in the input and that byte is equal to `b`, and false otherwise.",1,[[["self"],["u8"]],["bool"]]],[11,"read_byte","","Reads the next input byte.",1,[[["self"]],["result",["u8","endofinput"]]]],[11,"skip","","Skips `num_bytes` of the input.",1,[[["self"],["usize"]],["result",["endofinput"]]]],[11,"skip_and_get_input","","Skips `num_bytes` of the input, returning the skipped input as an `Input`.",1,[[["self"],["usize"]],["result",["input","endofinput"]]]],[11,"skip_to_end","","Skips the reader to the end of the input, returning the skipped input as an `Input`.",1,[[["self"]],["input"]]],[11,"clone","","",2,[[["self"]],["endofinput"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["endofinput"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]]],"paths":[[3,"Input"],[3,"Reader"],[3,"EndOfInput"],[3,"Mark"]]};
searchIndex["url"]={"doc":"rust-url is an implementation of the URL Standard for the Rust programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",N,N],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",N,N],[12,"host","","",0,N],[12,"port","","",0,N],[3,"SocketAddrs","","Socket addresses for an URL.",N,N],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",N,N],[3,"Url","","A parsed URL record.",N,N],[3,"ParseOptions","","Full configuration for the URL parser.",N,N],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",N,N],[4,"Origin","","The origin of an URL",N,N],[13,"Opaque","","A globally unique identifier",1,N],[13,"Tuple","","Consists of the URL's scheme, host and port",1,N],[4,"Host","","The host name of an URL.",N,N],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA if this is the host of a special URL, or percent encoded for non-special URLs. Hosts for non-special URLs are also called opaque hosts.",2,N],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",2,N],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 A Recommendation for IPv6 Address Text Representation: lowercase hexadecimal with maximal `::` compression.",2,N],[4,"ParseError","","Errors that can occur during parsing.",N,N],[13,"EmptyHost","","",3,N],[13,"IdnaError","","",3,N],[13,"InvalidPort","","",3,N],[13,"InvalidIpv4Address","","",3,N],[13,"InvalidIpv6Address","","",3,N],[13,"InvalidDomainCharacter","","",3,N],[13,"RelativeUrlWithoutBase","","",3,N],[13,"RelativeUrlWithCannotBeABaseBase","","",3,N],[13,"SetHostOnCannotBeABaseUrl","","",3,N],[13,"Overflow","","",3,N],[4,"SyntaxViolation","","Non-fatal syntax violations that can occur during parsing.",N,N],[13,"Backslash","","",4,N],[13,"C0SpaceIgnored","","",4,N],[13,"EmbeddedCredentials","","",4,N],[13,"ExpectedDoubleSlash","","",4,N],[13,"ExpectedFileDoubleSlash","","",4,N],[13,"FileWithHostAndWindowsDrive","","",4,N],[13,"NonUrlCodePoint","","",4,N],[13,"NullInFragment","","",4,N],[13,"PercentDecode","","",4,N],[13,"TabOrNewlineIgnored","","",4,N],[13,"UnencodedAtSign","","",4,N],[4,"Position","","Indicates a position within a URL based on its components.",N,N],[13,"BeforeScheme","","",5,N],[13,"AfterScheme","","",5,N],[13,"BeforeUsername","","",5,N],[13,"AfterUsername","","",5,N],[13,"BeforePassword","","",5,N],[13,"AfterPassword","","",5,N],[13,"BeforeHost","","",5,N],[13,"AfterHost","","",5,N],[13,"BeforePort","","",5,N],[13,"AfterPort","","",5,N],[13,"BeforePath","","",5,N],[13,"AfterPath","","",5,N],[13,"BeforeQuery","","",5,N],[13,"AfterQuery","","",5,N],[13,"BeforeFragment","","",5,N],[13,"AfterFragment","","",5,N],[11,"clone","","",2,[[["self"]],["host"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["host"]],["bool"]]],[11,"ne","","",2,[[["self"],["host"]],["bool"]]],[11,"cmp","","",2,[[["self"],["host"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["host"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["host"]],["bool"]]],[11,"le","","",2,[[["self"],["host"]],["bool"]]],[11,"gt","","",2,[[["self"],["host"]],["bool"]]],[11,"ge","","",2,[[["self"],["host"]],["bool"]]],[11,"hash","","",2,N],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",2,[[["self"]],["host",["string"]]]],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,[[["str"]],["result",["parseerror"]]]],[11,"parse_opaque","","",2,[[["str"]],["result",["parseerror"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["hostandport"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,[[["self"]],["hostandport",["string"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"to_socket_addrs","","",0,[[["self"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"next","","",6,[[["self"]],["option",["socketaddr"]]]],[11,"eq","","",1,[[["self"],["origin"]],["bool"]]],[11,"ne","","",1,[[["self"],["origin"]],["bool"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["origin"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,[[],["origin"]]],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,[[["self"]],["bool"]]],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,[[["self"]],["string"]]],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,[[["self"]],["string"]]],[11,"eq","","",7,[[["self"],["opaqueorigin"]],["bool"]]],[11,"ne","","",7,[[["self"],["opaqueorigin"]],["bool"]]],[11,"hash","","",7,N],[11,"clone","","",7,[[["self"]],["opaqueorigin"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"drop","","",8,[[["self"]]]],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",8,[[["self"]],["self"]]],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",8,[[["self"]],["self"]]],[11,"pop","","Remove the last segment of this URL’s path.",8,[[["self"]],["self"]]],[11,"push","","Append the given segment at the end of this URL’s path.",8,[[["self"],["str"]],["self"]]],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",8,[[["self"],["i"]],["self"]]],[11,"eq","","",3,[[["self"],["parseerror"]],["bool"]]],[11,"clone","","",3,[[["self"]],["parseerror"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from","","",3,[[["errors"]],["parseerror"]]],[11,"eq","","",4,[[["self"],["syntaxviolation"]],["bool"]]],[11,"clone","","",4,[[["self"]],["syntaxviolation"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",4,[[["self"]],["str"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"index","","",9,[[["self"],["rangefull"]],["str"]]],[11,"index","","",9,[[["self"],["rangefrom",["position"]]],["str"]]],[11,"index","","",9,[[["self"],["rangeto",["position"]]],["str"]]],[11,"index","","",9,[[["self"],["range",["position"]]],["str"]]],[11,"clone","","",5,[[["self"]],["position"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[0,"form_urlencoded","","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",N,N],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",N,N],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",N,N],[3,"ByteSerialize","","Return value of `byte_serialize()`.",N,N],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",N,N],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",N,N],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",N,N],[8,"Target","","",N,N],[10,"as_mut_string","","",10,[[["self"]],["string"]]],[10,"finish","","",10,N],[16,"Finished","","",10,N],[11,"clone","","",11,[[["self"]],["parse"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",11,[[["self"]],["parseintoowned"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"next","","",13,[[["self"]],["option",["str"]]]],[11,"size_hint","","",13,N],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"as_mut_string","url","",15,[[["self"]],["string"]]],[11,"finish","","",15,[[["self"]],["url"]]],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",14,[[["t"]],["self"]]],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",14,[[["t"],["usize"]],["self"]]],[11,"clear","","Remove any existing name/value pair.",14,[[["self"]],["self"]]],[11,"custom_encoding_override","","Set the character encoding to be used for names and values before percent-encoding.",14,[[["self"],["f"]],["self"]]],[11,"append_pair","","Serialize and append a name/value pair.",14,[[["self"],["str"],["str"]],["self"]]],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",14,[[["self"],["i"]],["self"]]],[11,"finish","","If this serializer was constructed with a string, take and return that string.",14,N],[11,"clone","url","",9,[[["self"]],["url"]]],[11,"clone","","",16,[[["self"]],["parseoptions"]]],[11,"base_url","","Change the base URL",16,[[["self"],["option",["url"]]],["self"]]],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors, passing a static string description.  This method is deprecated in favor of `syntax_violation_callback` and is implemented as an adaptor for the latter, passing the `SyntaxViolation` description. Only the last value passed to either method will be used by a parser.",16,[[["self"],["option",["fn"]]],["self"]]],[11,"syntax_violation_callback","","Call the provided function or closure for a non-fatal `SyntaxViolation` when it occurs during parsing. Note that since the provided function is `Fn`, the caller might need to utilize interior mutability, such as with a `RefCell`, to collect the violations.",16,[[["self"],["option",["fn"]]],["self"]]],[11,"parse","","Parse an URL string with the configuration so far.",16,[[["self"],["str"]],["result",["url","parseerror"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"parse","","Parse an absolute URL from a string.",9,[[["str"]],["result",["url","parseerror"]]]],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",9,[[["str"],["i"]],["result",["url","parseerror"]]]],[11,"join","","Parse a string as an URL, with this URL as the base URL.",9,[[["self"],["str"]],["result",["url","parseerror"]]]],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",9,[[],["parseoptions"]]],[11,"as_str","","Return the serialization of this URL.",9,[[["self"]],["str"]]],[11,"into_string","","Return the serialization of this URL.",9,[[["self"]],["string"]]],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",9,[[["self"]],["origin"]]],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",9,[[["self"]],["str"]]],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",9,[[["self"]],["bool"]]],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",9,[[["self"]],["bool"]]],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",9,[[["self"]],["str"]]],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",9,[[["self"]],["option",["str"]]]],[11,"has_host","","Equivalent to `url.host().is_some()`.",9,[[["self"]],["bool"]]],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",9,[[["self"]],["option",["str"]]]],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",9,[[["self"]],["option",["host"]]]],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",9,[[["self"]],["option",["str"]]]],[11,"port","","Return the port number for this URL, if any.",9,[[["self"]],["option",["u16"]]]],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",9,[[["self"]],["option",["u16"]]]],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",9,[[["self"],["f"]],["result",["hostandport"]]]],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",9,[[["self"]],["str"]]],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",9,[[["self"]],["option",["split"]]]],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",9,[[["self"]],["option",["str"]]]],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",9,[[["self"]],["parse"]]],[11,"fragment","","Return this URL’s fragment identifier, if any.",9,[[["self"]],["option",["str"]]]],[11,"set_fragment","","Change this URL’s fragment identifier.",9,[[["self"],["option",["str"]]]]],[11,"set_query","","Change this URL’s query string.",9,[[["self"],["option",["str"]]]]],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",9,[[["self"]],["serializer",["urlquery"]]]],[11,"set_path","","Change this URL’s path.",9,[[["self"],["str"]]]],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",9,[[["self"]],["result",["pathsegmentsmut"]]]],[11,"set_port","","Change this URL’s port number.",9,[[["self"],["option",["u16"]]],["result"]]],[11,"set_host","","Change this URL’s host.",9,[[["self"],["option",["str"]]],["result",["parseerror"]]]],[11,"set_ip_host","","Change this URL’s host to the given IP address.",9,[[["self"],["ipaddr"]],["result"]]],[11,"set_password","","Change this URL’s password.",9,[[["self"],["option",["str"]]],["result"]]],[11,"set_username","","Change this URL’s username.",9,[[["self"],["str"]],["result"]]],[11,"set_scheme","","Change this URL’s scheme.",9,[[["self"],["str"]],["result"]]],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",9,[[["p"]],["result",["url"]]]],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",9,[[["p"]],["result",["url"]]]],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",9,[[["self"]],["result",["pathbuf"]]]],[11,"to_socket_addrs","","",9,[[["self"]],["result"]]],[11,"from_str","","",9,[[["str"]],["result",["url","parseerror"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["self"]],["bool"]]],[11,"cmp","","",9,[[["self"],["self"]],["ordering"]]],[11,"partial_cmp","","",9,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"as_ref","","",9,[[["self"]],["str"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"drop","","",15,[[["self"]]]],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",N,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","url::form_urlencoded","",11,[[["t"]],["t"]]],[11,"into_iter","","",11,[[["self"]],["i"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into_iter","","",12,[[["self"]],["i"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into_iter","","",13,[[["self"]],["i"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"SyntaxViolation"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"Serializer"],[3,"UrlQuery"],[3,"ParseOptions"]]};
searchIndex["vec_map"]={"doc":"A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",N,N],[3,"VacantEntry","","A vacant Entry.",N,N],[3,"OccupiedEntry","","An occupied Entry.",N,N],[3,"Iter","","An iterator over the key-value pairs of a map.",N,N],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",N,N],[3,"Keys","","An iterator over the keys of a map.",N,N],[3,"Values","","An iterator over the values of a map.",N,N],[3,"ValuesMut","","An iterator over the values of a map.",N,N],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",N,N],[3,"Drain","","A draining iterator over the key-value pairs of a map.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",N,N],[13,"Vacant","","A vacant Entry",0,N],[13,"Occupied","","An occupied Entry",0,N],[11,"default","","",1,[[],["self"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"new","","Creates an empty `VecMap`.",1,[[],["self"]]],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",1,[[["usize"]],["self"]]],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",1,[[["self"]],["usize"]]],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,[[["self"],["usize"]]]],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Trims the `VecMap` of any excess capacity.",1,[[["self"]]]],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",1,[[["self"]],["keys"]]],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",1,[[["self"]],["values"]]],[11,"values_mut","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r mut V`.",1,[[["self"]],["valuesmut"]]],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",1,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",1,[[["self"]],["itermut"]]],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,[[["self"],["self"]]]],[11,"split_off","","Splits the collection into two at the given key.",1,[[["self"],["usize"]],["self"]]],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of the keys, emptying (but not consuming) the original `VecMap`. The iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",1,[[["self"]],["drain"]]],[11,"len","","Returns the number of elements in the map.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",1,[[["self"]],["bool"]]],[11,"clear","","Clears the map, removing all key-value pairs.",1,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",1,[[["self"],["usize"]],["option"]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,[[["self"],["usize"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,[[["self"],["usize"]],["option"]]],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",1,[[["self"],["usize"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,[[["self"],["usize"]],["option"]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,[[["self"],["usize"]],["entry"]]],[11,"retain","","Retains only the elements specified by the predicate.",1,[[["self"],["f"]]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["f"]],["v"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",2,[[["self"],["v"]],["v"]]],[11,"get","","Gets a reference to the value in the entry.",3,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,[[["self"]],["v"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",3,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,[[["self"]],["v"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone_from","","",1,[[["self"],["self"]]]],[11,"eq","","",1,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["self"]],["ordering"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_iter","","",1,[[["i"]],["self"]]],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",1,[[["self"]],["intoiter"]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"index","","",1,[[["self"],["usize"]],["v"]]],[11,"index","","",1,[[["self"],["usize"]],["v"]]],[11,"index_mut","","",1,[[["self"],["usize"]],["v"]]],[11,"index_mut","","",1,[[["self"],["usize"]],["v"]]],[11,"clone","","",4,[[["self"]],["iter"]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"clone","","",6,[[["self"]],["keys"]]],[11,"clone","","",7,[[["self"]],["values"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"size_hint","","",8,N],[11,"next_back","","",8,[[["self"]],["option"]]],[11,"next","","",6,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option",["usize"]]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"next_back","","",7,[[["self"]],["option"]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"next_back","","",9,[[["self"]],["option"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next_back","","",10,[[["self"]],["option"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"ValuesMut"],[3,"IntoIter"]]};
searchIndex["void"]={"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",N,N],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",N,N],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",N,N],[10,"void_unwrap","","Get the value out of a wrapper.",0,[[["self"]],["t"]]],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",N,N],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,[[["self"]],["e"]]],[11,"clone","","",2,[[["self"]],["void"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["t"]],["option",["ordering"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["yansi"]={"doc":"A dead simple ANSI terminal color painting library.","items":[[3,"Style","yansi","Represents a set of styling options.",N,N],[3,"Paint","","A structure encapsulating an item and styling.",N,N],[4,"Color","","An enum representing an ANSI color code.",N,N],[13,"Unset","","No color has been set. Nothing is changed when applied.",0,N],[13,"Black","","Black #0 (foreground code `30`, background code `40`).",0,N],[13,"Red","","Red: #1 (foreground code `31`, background code `41`).",0,N],[13,"Green","","Green: #2 (foreground code `32`, background code `42`).",0,N],[13,"Yellow","","Yellow: #3 (foreground code `33`, background code `43`).",0,N],[13,"Blue","","Blue: #4 (foreground code `34`, background code `44`).",0,N],[13,"Purple","","Purple: #5 (foreground code `35`, background code `45`).",0,N],[13,"Cyan","","Cyan: #6 (foreground code `36`, background code `46`).",0,N],[13,"White","","White: #7 (foreground code `37`, background code `47`).",0,N],[13,"Fixed","","A color number from 0 to 255, for use in 256-color terminals.",0,N],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",0,N],[11,"default","","",1,[[],["paint"]]],[11,"eq","","",1,[[["self"],["paint"]],["bool"]]],[11,"ne","","",1,[[["self"],["paint"]],["bool"]]],[11,"cmp","","",1,[[["self"],["paint"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["paint"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["paint"]],["bool"]]],[11,"le","","",1,[[["self"],["paint"]],["bool"]]],[11,"gt","","",1,[[["self"],["paint"]],["bool"]]],[11,"ge","","",1,[[["self"],["paint"]],["bool"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["paint"]]],[11,"new","","Constructs a new `Paint` structure encapsulating `item` with no styling.",1,[[["t"]],["paint"]]],[11,"masked","","Constructs a new masked `Paint` structure encapsulating `item`.",1,[[["t"]],["paint"]]],[11,"rgb","","Constructs a new `Paint` structure encapsulating `item` with the foreground color set to the RGB color `r`, `g`, `b`.",1,[[["u8"],["u8"],["u8"],["t"]],["paint"]]],[11,"fixed","","Constructs a new `Paint` structure encapsulating `item` with the foreground color set to the fixed 256-bit color `color`.",1,[[["u8"],["t"]],["paint"]]],[11,"black","","Constructs a new `Paint`structure encapsulating `item`with the foreground color set to black. ",1,[[["t"]],["paint"]]],[11,"red","","Constructs a new `Paint`structure encapsulating `item`with the foreground color set to red. ",1,[[["t"]],["paint"]]],[11,"green","","Constructs a new `Paint`structure encapsulating `item`with the foreground color set to green. ",1,[[["t"]],["paint"]]],[11,"yellow","","Constructs a new `Paint`structure encapsulating `item`with the foreground color set to yellow. ",1,[[["t"]],["paint"]]],[11,"blue","","Constructs a new `Paint`structure encapsulating `item`with the foreground color set to blue. ",1,[[["t"]],["paint"]]],[11,"purple","","Constructs a new `Paint`structure encapsulating `item`with the foreground color set to purple. ",1,[[["t"]],["paint"]]],[11,"cyan","","Constructs a new `Paint`structure encapsulating `item`with the foreground color set to cyan. ",1,[[["t"]],["paint"]]],[11,"white","","Constructs a new `Paint`structure encapsulating `item`with the foreground color set to white. ",1,[[["t"]],["paint"]]],[11,"style","","Retrieves the style currently set on `self`.",1,[[["self"]],["style"]]],[11,"with_style","","Sets the style of `self` to `style`.",1,[[["self"],["style"]],["paint"]]],[11,"mask","","Masks `self`.",1,[[["self"]],["paint"]]],[11,"fg","","Sets the foreground to `color`.",1,[[["self"],["color"]],["paint"]]],[11,"bg","","Sets the background to `color`.",1,[[["self"],["color"]],["paint"]]],[11,"bold","","Enables the bold style on `self`. ",1,[[["self"]],["paint"]]],[11,"dimmed","","Enables the dimmed style on `self`. ",1,[[["self"]],["paint"]]],[11,"italic","","Enables the italic style on `self`. ",1,[[["self"]],["paint"]]],[11,"underline","","Enables the underline style on `self`. ",1,[[["self"]],["paint"]]],[11,"blink","","Enables the blink style on `self`. ",1,[[["self"]],["paint"]]],[11,"invert","","Enables the invert style on `self`. ",1,[[["self"]],["paint"]]],[11,"hidden","","Enables the hidden style on `self`. ",1,[[["self"]],["paint"]]],[11,"strikethrough","","Enables the strikethrough style on `self`. ",1,[[["self"]],["paint"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"disable","","Disables coloring globally.",1,[[]]],[11,"enable","","Enables coloring globally. Coloring is enabled by default, so this method should only be called to re enable coloring.",1,[[]]],[11,"is_enabled","","Returns `true` if coloring is enabled and `false` otherwise. Coloring is enabled by default but can be enabled and disabled on-the-fly with the [`Paint::enable()`] and [`Paint::disable()`] methods.",1,[[],["bool"]]],[11,"enable_windows_ascii","","Enables ASCII terminal escape sequences on Windows consoles when possible. Returns `true` if escape sequence support was successfully enabled and `false` otherwise. On non-Windows targets, this method always returns `true`.",1,[[],["bool"]]],[11,"default","","",2,[[],["style"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",2,[[["self"],["style"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["style"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["style"]],["bool"]]],[11,"le","","",2,[[["self"],["style"]],["bool"]]],[11,"gt","","",2,[[["self"],["style"]],["bool"]]],[11,"ge","","",2,[[["self"],["style"]],["bool"]]],[11,"hash","","",2,N],[11,"clone","","",2,[[["self"]],["style"]]],[11,"eq","","",2,[[["self"],["style"]],["bool"]]],[11,"new","","Default, unstylized `Style`. This is identical to `Style::default()`.",2,[[],["style"]]],[11,"masked","","Default, unstylized but masked `Style`. Aside from masking, this is identical to `Style::default()`.",2,[[],["style"]]],[11,"black","","Constructs a new `Style`structure with the foreground color set to black. ",2,[[],["style"]]],[11,"red","","Constructs a new `Style`structure with the foreground color set to red. ",2,[[],["style"]]],[11,"green","","Constructs a new `Style`structure with the foreground color set to green. ",2,[[],["style"]]],[11,"yellow","","Constructs a new `Style`structure with the foreground color set to yellow. ",2,[[],["style"]]],[11,"blue","","Constructs a new `Style`structure with the foreground color set to blue. ",2,[[],["style"]]],[11,"purple","","Constructs a new `Style`structure with the foreground color set to purple. ",2,[[],["style"]]],[11,"cyan","","Constructs a new `Style`structure with the foreground color set to cyan. ",2,[[],["style"]]],[11,"white","","Constructs a new `Style`structure with the foreground color set to white. ",2,[[],["style"]]],[11,"fg_color","","Returns the foreground color of `self`.",2,[[["self"]],["color"]]],[11,"bg_color","","Returns the foreground color of `self`.",2,[[["self"]],["color"]]],[11,"is_masked","","Returns `true` if `self` is masked.",2,[[["self"]],["bool"]]],[11,"is_bold","","Returns `true`if the bold property is set on `self`. ",2,[[["self"]],["bool"]]],[11,"is_dimmed","","Returns `true`if the dimmed property is set on `self`. ",2,[[["self"]],["bool"]]],[11,"is_italic","","Returns `true`if the italic property is set on `self`. ",2,[[["self"]],["bool"]]],[11,"is_underline","","Returns `true`if the underline property is set on `self`. ",2,[[["self"]],["bool"]]],[11,"is_blink","","Returns `true`if the blink property is set on `self`. ",2,[[["self"]],["bool"]]],[11,"is_invert","","Returns `true`if the invert property is set on `self`. ",2,[[["self"]],["bool"]]],[11,"is_hidden","","Returns `true`if the hidden property is set on `self`. ",2,[[["self"]],["bool"]]],[11,"is_strikethrough","","Returns `true`if the strikethrough property is set on `self`. ",2,[[["self"]],["bool"]]],[11,"fg","","Sets the foreground to `color`.",2,[[["self"],["color"]],["style"]]],[11,"bg","","Sets the background to `color`.",2,[[["self"],["color"]],["style"]]],[11,"mask","","Sets `self` to be masked.",2,[[["self"]],["style"]]],[11,"bold","","Enables the bold style on `self`. ",2,[[["self"]],["style"]]],[11,"dimmed","","Enables the dimmed style on `self`. ",2,[[["self"]],["style"]]],[11,"italic","","Enables the italic style on `self`. ",2,[[["self"]],["style"]]],[11,"underline","","Enables the underline style on `self`. ",2,[[["self"]],["style"]]],[11,"blink","","Enables the blink style on `self`. ",2,[[["self"]],["style"]]],[11,"invert","","Enables the invert style on `self`. ",2,[[["self"]],["style"]]],[11,"hidden","","Enables the hidden style on `self`. ",2,[[["self"]],["style"]]],[11,"strikethrough","","Enables the strikethrough style on `self`. ",2,[[["self"]],["style"]]],[11,"paint","","Constructs a new `Paint` structure that encapsulates `item` with the style set to `self`.",2,[[["self"],["t"]],["paint"]]],[11,"fmt_prefix","","Writes the ANSI code prefix for the currently set styles.",2,[[["self"],["formatter"]],["result"]]],[11,"fmt_suffix","","Writes the ANSI code suffix for the currently set styles.",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["color"]],["bool"]]],[11,"ne","","",0,[[["self"],["color"]],["bool"]]],[11,"cmp","","",0,[[["self"],["color"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["color"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["color"]],["bool"]]],[11,"le","","",0,[[["self"],["color"]],["bool"]]],[11,"gt","","",0,[[["self"],["color"]],["bool"]]],[11,"ge","","",0,[[["self"],["color"]],["bool"]]],[11,"hash","","",0,N],[11,"clone","","",0,[[["self"]],["color"]]],[11,"paint","","Constructs a new `Paint` structure that encapsulates `item` with the foreground color set to the color `self`.",0,[[["self"],["t"]],["paint"]]],[11,"style","","Constructs a new `Style` structure with the foreground color set to the color `self`.",0,[[["self"]],["style"]]],[11,"default","","",0,[[],["self"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"Color"],[3,"Paint"],[3,"Style"]]};
initSearch(searchIndex);
